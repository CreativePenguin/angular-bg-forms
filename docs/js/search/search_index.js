var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.344,1,0.905]],["body/components/AppComponent.html",[0,0.594,1,1.489,2,1.611,3,0.337,4,0.337,5,1.062,6,1.062,7,1.062,8,0.291,9,2.515,10,0.736,11,4.153,12,3.445,13,2.352,14,4.153,15,2.978,16,4.153,17,3.445,18,3.445,19,4.153,20,4.153,21,3.445,22,1.062,23,2.104,24,2.104,25,3.445,26,1.455,27,1.455,28,1.455,29,4.737,30,1.489,31,3,32,4.737,33,4.737,34,1.489,35,4.737,36,1.489,37,3.929,38,3.929,39,2.418,40,3.397,41,3.929,42,1.455,43,4.153,44,1.455,45,4.153,46,0.291,47,0.462,48,4.737,49,0.337,50,0.036,51,0.886,52,0.808,53,0.605,54,2.63,55,3.445,56,3.445,57,0.97,58,3.032,59,1.323,60,0.886,61,2.515,62,1.123,63,2.174,64,3.032,65,3.032,66,3.032,67,1.214,68,1.631,69,2.174,70,3.032,71,1.548,72,2.515,73,2.515,74,1.548,75,2.174,76,2.515,77,0.337,78,0.337,79,3.445,80,1.15,81,4.153,82,1.594,83,1.748,84,2.978,85,1.062,86,1.455,87,1.455,88,1.062,89,1.786,90,1.062,91,0.747,92,1.062,93,1.062,94,0.886,95,1.062,96,1.062,97,0.886,98,0.97,99,1.062,100,0.886,101,0.97,102,0.668,103,0.027,104,1.062,105,1.062,106,0.886,107,1.062,108,1.062,109,1.062,110,0.886,111,1.062,112,1.062,113,1.062,114,0.023]],["title/components/AttackRollsComponent.html",[0,0.344,67,0.905]],["body/components/AttackRollsComponent.html",[0,0.429,1,0.423,2,0.694,3,0.161,4,0.161,5,0.507,6,0.507,7,0.507,8,0.139,10,0.576,15,1.703,21,1.969,22,0.507,23,1.842,24,1.782,26,0.832,27,0.832,28,0.832,30,0.423,31,1.911,34,0.423,36,0.423,39,1.541,42,0.832,44,0.832,46,0.42,47,0.264,49,0.566,50,0.036,51,1.21,52,1.103,53,1.063,57,1.777,59,1.175,60,0.423,62,0.319,67,1.02,68,1.557,69,4.014,71,0.739,74,0.739,77,0.161,78,0.161,80,0.935,83,1.743,85,0.507,86,0.832,87,0.832,88,0.507,89,1.223,90,0.507,91,0.745,92,0.507,93,0.507,94,0.423,95,0.507,96,0.507,97,1.21,98,0.966,99,0.507,100,0.694,101,0.76,102,0.665,103,0.022,104,0.507,105,0.507,106,0.423,107,0.507,108,0.507,109,0.507,110,0.423,111,0.507,112,0.507,113,0.507,114,0.013,115,4.642,116,1.038,117,2.374,118,1.703,119,1.969,120,1.503,121,2.374,122,2.245,123,1.703,124,2.374,125,1.615,126,0.832,127,2.503,128,2.164,129,1.911,130,2.164,131,3.018,132,1.911,133,2.374,134,2.374,135,1.099,136,2.503,137,3.018,138,4.372,139,3.853,140,2.503,141,4.372,142,3.018,143,3.018,144,2.622,145,2.503,146,0.999,147,3.491,148,3.491,149,3.491,150,2.374,151,2.896,152,2.374,153,2.503,154,3.491,155,1.709,156,1.448,157,1.448,158,2.374,159,3.488,160,4.14,161,3.434,162,1.709,163,1.599,164,1.782,165,3.491,166,3.491,167,2.374,168,2.374,169,2.047,170,1.814,171,2.232,172,1.448,173,2.374,174,2.374,175,1.503,176,2.896,177,1.344,178,1.448,179,2.374,180,1.589,181,1.448,182,1.969,183,2.374,184,2.374,185,1.969,186,1.969,187,1.099,188,0.999,189,3.853,190,1.503,191,2.374,192,1.448,193,1.117,194,2.374,195,1.47,196,3.92,197,1.448,198,1.969,199,1.448,200,1.448,201,2.374,202,0.76,203,1.099,204,1.099,205,1.212,206,0.76,207,2.503,208,1.448,209,1.814,210,2.164,211,2.769,212,2.374,213,1.158,214,2.374,215,2.374,216,1.448,217,0.633,218,2.374,219,1.448,220,1.448,221,2.374,222,1.448,223,1.911,224,1.703,225,1.448,226,1.448,227,1.448,228,1.27,229,1.448,230,2.374,231,1.448,232,1.969,233,1.969,234,2.503,235,1.448,236,0.739,237,1.969,238,1.448,239,1.448,240,1.448,241,1.038,242,2.374,243,1.448,244,0.917,245,0.556,246,0.739,247,1.038,248,1.038,249,1.448,250,0.917,251,1.201,252,0.917,253,0.917,254,1.201,255,0.93,256,1.038,257,0.82,258,1.448,259,1.448,260,1.448,261,1.969,262,1.448,263,1.448,264,1.448,265,1.448,266,1.89,267,2.374,268,1.448,269,1.448,270,1.448,271,2.374,272,2.374,273,1.448,274,2.374,275,1.448,276,2.374,277,1.448,278,2.374,279,1.448,280,2.374,281,1.448,282,1.448,283,3.018,284,1.448,285,1.448,286,1.448,287,1.448,288,1.448,289,1.201,290,0.966,291,2.374,292,1.448,293,0.82,294,1.448,295,1.448,296,1.448,297,1.448,298,3.018,299,3.018,300,1.448,301,1.448,302,1.448,303,1.448,304,1.448,305,1.448,306,1.448,307,1.448,308,1.448,309,1.201,310,1.201,311,1.201,312,1.201,313,1.201,314,2.503,315,1.448,316,1.448,317,2.374,318,1.448,319,1.201,320,1.448,321,2.374,322,1.448,323,2.374,324,1.448,325,1.448,326,1.448,327,1.448,328,1.448,329,1.448,330,1.448,331,1.201,332,1.448,333,1.448,334,1.448,335,1.448,336,1.448,337,1.448,338,1.448,339,1.448,340,1.448,341,2.374,342,2.374,343,1.969,344,2.622,345,2.374,346,2.374,347,2.374,348,1.969]],["title/components/CharacterSheetComponent.html",[0,0.344,94,0.905]],["body/components/CharacterSheetComponent.html",[0,0.593,1,1.127,2,1.422,3,0.429,4,0.429,5,1.351,6,1.351,7,1.351,8,0.37,22,1.351,23,2.181,24,2.181,26,1.705,27,1.705,28,1.351,30,1.127,34,1.127,36,1.127,42,1.705,44,1.705,50,0.035,59,0.85,60,1.127,62,0.85,67,1.127,68,1.234,77,0.429,78,0.429,80,0.936,85,1.351,86,1.705,87,1.705,88,1.351,89,1.962,90,1.351,91,0.875,92,1.351,93,1.351,94,1.636,95,2.141,96,1.351,97,1.127,98,1.234,99,1.351,100,1.127,101,1.234,102,0.85,103,0.03,104,1.351,105,1.351,106,1.127,107,1.351,108,1.351,109,1.351,110,1.127,111,1.351,112,1.351,113,1.351,114,0.027,349,3.198,350,3.198,351,3.198,352,5.598,353,4.865,354,4.865,355,4.865]],["title/interfaces/CharacterStats.html",[356,0.445,357,2.221]],["body/interfaces/CharacterStats.html",[3,0.448,4,0.448,8,0.387,46,0.387,47,0.556,49,0.679,50,0.035,77,0.556,103,0.028,114,0.028,169,2.394,217,1.711,356,0.58,357,3.587,358,1.547,359,2.89,360,5.687,361,5.687,362,5.687,363,5.687,364,5.687,365,5.687,366,5.687,367,3.343,368,3.343,369,3.343,370,3.343,371,3.343,372,3.343,373,3.343,374,3.343,375,3.343,376,3.343,377,3.343,378,3.343,379,3.343,380,3.343]],["title/components/DiceBonusFormComponent.html",[0,0.344,97,0.905]],["body/components/DiceBonusFormComponent.html",[0,0.611,1,0.603,2,0.918,3,0.229,4,0.229,5,0.723,6,0.723,7,0.723,8,0.198,10,0.501,13,1.779,22,0.723,23,1.952,24,1.952,26,1.101,27,1.691,28,1.101,30,0.603,34,0.603,36,0.603,42,1.101,44,1.101,46,0.198,47,0.349,49,0.558,50,0.036,51,0.918,52,1.014,53,0.759,57,1.855,59,0.938,60,0.603,62,0.839,67,0.603,68,1.218,77,0.229,78,0.229,80,1.368,82,1.206,83,1.323,85,0.723,86,1.101,87,1.101,88,0.723,89,1.491,90,0.723,91,0.903,92,0.723,93,0.723,94,0.603,95,0.723,96,0.723,97,1.244,98,2.007,99,0.723,100,0.603,101,0.66,102,0.455,103,0.021,104,0.723,105,0.723,106,0.603,107,0.723,108,0.723,109,0.723,110,1.244,111,0.723,112,0.723,113,0.723,114,0.018,120,1.99,129,2.41,132,2.41,146,1.323,153,3.052,162,2.41,163,1.491,170,1.926,171,2.561,187,2.119,188,1.928,204,2.322,206,1.006,209,1.758,210,2.729,211,3.479,217,1.532,236,1.053,246,1.053,250,3.696,252,1.306,290,1.544,381,4.842,382,1.711,383,3.142,384,2.606,385,3.142,386,2.606,387,3.142,388,3.142,389,3.142,390,2.606,391,3.806,392,3.142,393,4.255,394,3.142,395,3.142,396,3.806,397,4.255,398,2.606,399,3.806,400,3.598,401,3.142,402,3.806,403,2.841,404,2.841,405,2.841,406,2.929,407,2.929,408,1.711,409,2.063,410,2.063,411,2.063,412,2.063,413,2.063,414,2.063,415,2.063,416,2.063,417,2.063,418,2.063,419,2.063,420,4.58,421,2.063,422,2.063,423,2.063,424,2.063,425,2.063,426,2.063,427,2.063,428,2.063,429,2.063,430,2.063,431,2.063,432,2.063,433,2.063,434,2.063,435,2.063,436,2.063,437,1.779,438,2.063,439,2.063,440,2.063,441,5.404,442,2.063,443,2.063,444,2.063,445,2.063,446,2.063,447,2.063,448,2.063,449,2.063,450,2.063,451,2.063,452,2.063,453,2.063,454,2.063,455,2.063,456,2.063,457,2.063,458,4.002,459,1.461,460,2.063,461,2.063,462,2.063,463,2.063]],["title/interfaces/DiceResults.html",[195,1.303,356,0.445]],["body/interfaces/DiceResults.html",[3,0.327,4,0.327,8,0.282,10,0.714,46,0.282,47,0.452,49,0.623,50,0.036,52,0.784,53,0.587,62,0.648,77,0.518,78,0.518,80,1.385,82,1.129,83,2.117,102,1.109,103,0.028,114,0.023,126,1.03,135,1.361,163,1.425,175,2.575,190,2.575,193,1.748,195,1.712,204,1.361,206,1.61,213,1.129,217,1.704,255,1.544,266,2.03,290,0.941,356,0.723,358,1.129,403,2.303,404,2.303,405,2.303,406,2.303,407,2.303,459,1.561,464,1.665,465,1.789,466,1.882,467,1.882,468,2.575,469,3.607,470,3.607,471,3.607,472,4.342,473,2.916,474,2.303,475,2.848,476,2.575,477,3.343,478,2.916,479,3.607,480,3.607,481,2.916,482,2.916,483,2.303,484,2.916,485,2.575,486,2.916,487,2.916,488,2.109,489,2.109,490,2.916,491,1.665,492,2.952,493,2.109,494,2.303,495,2.848,496,2.109,497,1.665,498,2.109,499,2.916,500,2.109,501,1.862,502,2.916,503,1.862,504,1.862,505,1.862,506,1.862,507,1.862,508,1.665,509,2.109,510,2.109,511,2.109,512,2.109,513,2.109,514,2.109,515,2.109,516,2.109,517,1.862]],["title/classes/DiceSet.html",[78,0.344,255,0.825]],["body/classes/DiceSet.html",[3,0.294,4,0.294,8,0.254,10,0.642,46,0.254,47,0.42,49,0.667,50,0.036,51,1.287,52,1.448,53,1.053,57,1.906,62,0.583,77,0.49,78,0.565,80,1.281,82,1.016,83,1.59,91,0.476,102,0.832,103,0.025,114,0.021,126,1.323,135,2.037,146,1.59,155,1.498,163,1.543,170,1.449,175,1.676,187,1.224,188,1.114,190,1.676,193,1.778,195,1.114,204,1.747,206,1.739,213,1.449,217,1.687,255,1.547,266,2.034,290,0.847,356,0.633,403,2.719,404,2.719,405,2.719,406,2.719,407,2.719,459,1.843,464,1.498,465,1.69,466,1.224,467,1.224,468,1.676,469,1.898,470,1.898,471,1.898,472,3.786,473,1.898,474,1.498,475,2.138,476,1.676,477,2.708,478,1.898,479,2.708,480,2.708,481,1.898,482,1.898,483,1.498,484,1.898,485,1.676,486,1.898,487,1.898,488,1.898,489,1.898,490,3.443,491,1.498,492,3.215,493,1.898,494,2.719,495,3.077,496,2.708,497,2.138,498,2.708,499,3.443,500,2.708,501,2.391,502,3.443,503,2.391,504,2.391,505,2.391,506,2.391,507,2.391,508,2.138,509,1.898,510,1.898,511,1.898,512,1.898,513,1.898,514,1.898,515,1.898,516,1.898,517,1.676,518,1.898,519,2.493,520,2.646,521,3.776,522,2.646,523,2.646,524,2.646,525,2.646,526,2.646,527,2.646,528,2.646,529,2.646,530,2.646,531,2.646,532,2.646,533,2.646,534,2.646,535,2.646,536,2.646]],["title/interfaces/DiceSetI.html",[193,0.991,356,0.445]],["body/interfaces/DiceSetI.html",[3,0.305,4,0.305,8,0.263,10,0.665,13,1.552,46,0.263,47,0.431,49,0.666,50,0.036,52,0.731,53,0.773,62,0.853,77,0.499,78,0.499,80,1.403,82,1.486,83,1.63,101,0.877,102,0.853,103,0.025,114,0.022,126,0.961,135,1.268,163,1.573,170,1.052,175,1.736,188,2.484,190,1.736,193,1.709,195,1.154,202,0.877,204,1.268,206,1.757,213,1.052,217,1.704,255,1.494,266,1.998,290,0.877,356,0.701,358,1.052,403,2.914,404,2.914,405,2.914,406,2.914,407,2.914,459,1.975,464,1.552,465,1.723,466,1.268,467,1.268,468,1.736,469,1.966,470,1.966,471,1.966,472,3.83,473,1.966,474,1.552,475,2.192,476,1.736,477,3.219,478,1.966,479,2.777,480,2.777,481,1.966,482,1.966,483,1.552,484,1.966,485,1.736,486,1.966,487,2.777,488,2.777,489,3.219,490,3.69,491,2.542,492,3.476,493,2.777,494,2.914,495,3.228,496,1.966,497,1.552,498,1.966,499,2.777,500,1.966,501,1.736,502,2.777,503,2.452,504,2.452,505,2.452,506,2.452,507,2.452,508,2.192,509,1.966,510,1.966,511,1.966,512,1.966,513,1.966,514,1.966,515,1.966,516,1.966,517,1.736,537,2.741,538,1.154,539,2.741,540,2.741,541,2.741,542,2.741,543,2.741,544,2.741,545,2.741,546,1.736,547,2.741]],["title/components/DieRollResultsTableComponent.html",[0,0.344,100,0.905]],["body/components/DieRollResultsTableComponent.html",[0,0.562,1,0.763,2,1.093,3,0.29,4,0.29,5,0.915,6,0.915,7,0.915,8,0.251,10,0.634,18,3.102,22,0.915,23,2.049,24,2.049,26,1.311,27,1.311,28,1.311,30,0.763,31,2.767,34,0.763,36,0.763,42,1.311,44,1.311,46,0.251,47,0.416,49,0.416,50,0.036,52,1.165,53,1.08,57,1.399,59,1.113,60,0.763,62,0.963,67,0.763,68,1.399,71,1.333,77,0.29,78,0.29,80,1.158,82,1.436,83,2.009,85,0.915,86,1.311,87,1.311,88,0.915,89,1.672,90,0.915,91,0.673,92,0.915,93,0.915,94,0.763,95,0.915,96,0.915,97,0.763,98,0.836,99,0.915,100,1.395,101,1.732,102,1.383,103,0.034,104,0.915,105,0.915,106,0.763,107,0.915,108,0.915,109,0.915,110,0.763,111,0.915,112,0.915,113,0.915,114,0.021,195,2.212,202,1.197,217,0.997,223,1.653,224,2.682,236,1.333,253,3.022,255,1.165,256,1.872,384,3.102,398,3.102,437,2.118,474,2.702,475,3.135,476,2.368,483,2.702,485,3.622,538,1.574,546,2.368,548,3.958,549,2.165,550,3.102,551,4.359,552,2.368,553,3.102,554,3.74,555,3.74,556,3.012,557,4.359,558,3.74,559,3.74,560,3.74,561,3.74,562,3.74,563,3.74,564,4.37,565,3.74,566,3.74,567,4.37,568,4.772,569,3.74,570,2.611,571,2.611,572,4.37,573,4.772,574,2.611,575,2.611,576,2.611,577,3.74,578,3.74,579,3.74,580,3.74,581,2.611]],["title/interfaces/DropdownGroup.html",[356,0.445,582,1.961]],["body/interfaces/DropdownGroup.html",[3,0.508,4,0.508,8,0.439,46,0.439,47,0.6,49,0.6,50,0.035,51,1.735,53,0.912,77,0.6,103,0.03,114,0.03,356,0.776,358,1.755,400,3.279,582,3.419,583,3.279,584,4.257,585,4.923,586,3.759]],["title/interfaces/DropdownItem.html",[356,0.445,586,1.961]],["body/interfaces/DropdownItem.html",[3,0.511,4,0.511,8,0.441,46,0.441,47,0.602,49,0.602,50,0.035,51,1.737,53,1.186,77,0.602,103,0.03,114,0.03,356,0.778,358,1.762,400,4.263,582,2.908,583,3.293,584,3.293,585,3.809,586,3.645]],["title/components/NavbarComponent.html",[0,0.344,30,0.905]],["body/components/NavbarComponent.html",[0,0.537,1,0.919,2,1.244,3,0.35,4,0.35,5,1.101,6,1.101,7,1.101,8,0.302,15,3.052,22,1.101,23,2.116,24,2.116,26,1.492,27,1.492,28,1.492,30,1.512,34,0.919,36,0.919,37,4.003,38,4.003,39,2.464,40,3.461,41,4.003,42,1.492,44,1.492,46,0.302,47,0.473,49,0.35,50,0.036,52,1.135,53,0.849,54,2.695,55,3.531,56,3.531,57,1.362,59,1.309,60,0.919,62,0.693,67,0.919,68,1.006,71,1.605,72,2.607,73,2.607,74,1.605,75,2.254,76,2.607,77,0.35,78,0.35,79,4.29,80,0.763,85,1.101,86,1.492,87,1.492,88,1.101,89,1.813,90,1.101,91,0.766,92,1.101,93,1.101,94,0.919,95,1.101,96,1.101,97,0.919,98,1.006,99,1.101,100,0.919,101,1.006,102,0.693,103,0.027,104,1.101,105,1.101,106,0.919,107,1.101,108,1.101,109,1.101,110,0.919,111,1.101,112,1.101,113,1.101,114,0.024,118,3.996,135,2.233,159,3.461,213,1.634,236,1.605,241,2.254,244,1.99,257,2.41,343,3.531,587,2.607,588,4.826,589,4.256,590,4.256,591,5.172,592,5.405,593,4.256,594,3.143,595,4.256,596,4.256,597,4.256,598,4.256,599,4.826,600,3.143,601,3.143,602,3.143,603,3.143,604,3.052]],["title/components/NotFoundComponent.html",[0,0.344,106,0.905]],["body/components/NotFoundComponent.html",[0,0.597,1,1.143,2,1.435,3,0.435,4,0.435,5,1.371,6,1.371,7,1.371,8,0.376,12,4.073,22,1.371,23,2.185,24,2.185,26,1.721,27,1.721,28,1.371,30,1.143,34,1.143,36,1.143,42,1.721,44,1.721,50,0.035,59,0.862,60,1.143,62,0.862,67,1.143,68,1.252,77,0.435,78,0.435,80,0.949,85,1.371,86,1.721,87,1.721,88,1.371,89,1.972,90,1.371,91,0.883,92,1.371,93,1.371,94,1.143,95,1.371,96,1.371,97,1.143,98,1.252,99,1.371,100,1.143,101,1.252,102,0.862,103,0.03,104,1.371,105,1.371,106,1.645,107,1.371,108,1.371,109,1.371,110,1.143,111,1.371,112,1.371,113,1.371,114,0.028,605,3.245,606,3.245,607,3.245,608,5.627,609,4.91,610,4.91]],["title/components/OverlayComponent.html",[0,0.344,36,0.905]],["body/components/OverlayComponent.html",[0,0.359,1,0.466,2,0.751,3,0.177,4,0.177,5,0.559,6,0.559,7,0.559,8,0.153,22,0.559,23,1.832,24,1.832,26,0.9,27,0.9,28,0.9,30,0.466,34,0.466,36,1.08,39,1.646,42,0.9,44,0.9,46,0.153,47,0.286,49,0.177,50,0.036,52,0.985,53,0.738,57,1.297,59,1.004,60,0.466,62,0.352,67,0.466,68,0.511,74,0.815,77,0.177,78,0.177,80,0.387,85,0.559,86,0.9,87,0.9,88,0.559,89,1.296,90,0.559,91,1.157,92,0.559,93,0.559,94,0.466,95,0.559,96,0.559,97,0.466,98,0.511,99,0.559,100,0.466,101,0.511,102,0.352,103,0.018,104,0.559,105,0.559,106,0.466,107,0.559,108,0.559,109,0.559,110,0.466,111,0.559,112,0.559,113,0.559,114,0.014,128,2.313,129,2.042,130,2.313,132,2.042,135,1.492,146,1.082,170,0.612,171,1.312,202,0.822,209,1.66,236,0.815,246,0.815,247,1.144,248,1.144,252,1.01,344,1.627,408,4.163,517,1.627,611,1.323,612,2.569,613,3.225,614,2.569,615,2.569,616,3.225,617,3.225,618,4.053,619,4.554,620,3.697,621,1.596,622,2.569,623,2.569,624,3.953,625,2.569,626,4.468,627,2.569,628,3.697,629,2.569,630,3.697,631,4.737,632,2.569,633,2.569,634,2.569,635,2.569,636,5.019,637,3.697,638,1.596,639,2.569,640,1.596,641,2.569,642,1.596,643,2.569,644,6.42,645,2.569,646,2.569,647,2.569,648,2.569,649,2.569,650,2.569,651,2.569,652,2.569,653,2.569,654,2.569,655,2.569,656,2.569,657,2.569,658,2.569,659,2.569,660,2.569,661,2.569,662,2.569,663,2.569,664,2.131,665,2.569,666,2.569,667,2.569,668,2.569,669,2.569,670,2.569,671,2.569,672,2.569,673,2.569,674,2.569,675,2.569,676,2.569,677,2.131,678,2.569,679,2.569,680,2.569,681,2.569,682,2.569,683,2.569,684,2.569,685,2.569,686,2.569,687,2.569,688,2.569,689,2.569,690,2.569,691,4.331,692,2.569,693,2.569,694,2.569,695,2.569,696,2.569,697,2.569,698,2.569,699,2.569,700,2.569,701,2.569,702,2.569,703,2.569,704,2.569,705,2.569,706,2.569,707,2.569,708,2.569,709,2.569,710,2.569,711,2.569,712,2.569,713,2.569,714,2.569,715,2.569,716,2.569,717,2.569,718,2.569,719,3.697,720,3.697,721,2.569,722,3.697,723,2.569,724,2.569,725,2.569,726,2.569,727,2.569,728,2.569,729,2.569,730,2.569,731,2.569,732,2.569,733,2.569,734,2.569,735,2.569,736,2.569,737,2.569,738,2.569,739,2.569,740,2.569,741,2.569,742,3.697,743,2.569,744,2.569,745,2.569,746,2.569,747,2.569,748,2.569,749,2.569,750,2.569,751,2.569,752,2.569,753,2.569,754,2.569,755,3.697,756,2.569,757,2.569,758,2.569,759,2.569,760,2.569,761,2.569,762,2.569,763,2.569,764,2.569,765,1.596,766,1.596,767,1.323,768,1.596,769,1.596,770,1.596,771,2.569,772,1.596,773,2.569,774,1.596,775,2.131,776,2.569,777,2.569,778,2.569,779,2.569,780,1.596,781,2.569,782,1.596,783,2.569,784,2.131,785,2.569,786,2.569,787,2.131,788,1.596,789,1.596,790,1.596,791,1.596,792,1.596]],["title/components/SkillCheckComponent.html",[0,0.344,34,0.905]],["body/components/SkillCheckComponent.html",[0,0.454,1,0.473,2,0.759,3,0.18,4,0.18,5,0.567,6,0.567,7,0.567,8,0.155,10,0.393,22,0.567,23,1.839,24,1.839,26,0.911,27,0.911,28,0.911,30,0.473,31,2.062,34,1.089,36,0.473,39,1.662,42,0.911,44,0.911,46,0.313,47,0.289,49,0.485,50,0.036,52,1.373,53,1.123,57,1.787,59,1.157,60,0.473,62,1.083,63,4.037,67,0.473,68,0.518,71,0.826,74,1.327,77,0.18,78,0.18,80,1.112,82,1.567,85,0.567,86,0.911,87,0.911,88,0.567,89,1.306,90,0.567,91,0.907,92,0.567,93,0.567,94,0.473,95,0.567,96,0.567,97,1.089,98,1.042,99,0.567,100,0.759,101,0.832,102,0.718,103,0.026,104,0.567,105,0.567,106,0.473,107,0.567,108,0.567,109,0.567,110,0.473,111,0.567,112,0.567,113,0.567,114,0.015,119,2.701,120,1.646,126,0.911,127,2.701,128,2.335,129,2.062,130,2.335,132,2.062,135,1.203,136,2.701,140,2.701,145,2.701,146,1.094,151,3.092,153,2.673,155,1.844,162,1.844,170,1.567,171,1.903,182,1.342,187,1.507,188,1.094,193,1.042,195,1.569,196,3.386,198,2.156,202,0.832,204,0.749,207,2.701,209,2.027,210,2.928,211,1.025,213,1.828,223,2.062,224,1.864,232,2.156,233,2.156,234,2.701,236,0.826,237,1.342,246,0.826,247,1.161,248,1.161,250,1.025,251,1.342,252,1.025,253,1.025,254,1.342,255,1.162,256,1.161,257,2.111,261,1.342,266,1.605,290,0.832,309,1.342,310,1.342,311,1.342,312,1.342,313,1.342,314,1.342,319,1.342,331,1.342,344,2.361,348,3.092,403,1.472,404,1.472,405,1.472,406,1.472,407,1.472,437,1.472,458,4.353,474,1.844,491,1.472,492,2.361,494,2.111,495,2.917,501,2.76,503,1.646,508,1.472,584,1.161,604,2.673,624,1.864,626,3.092,664,3.799,677,3.616,767,1.342,787,1.342,793,4.67,794,1.161,795,2.599,796,3.728,797,2.599,798,2.156,799,2.599,800,3.256,801,2.599,802,2.599,803,3.256,804,3.256,805,3.256,806,3.256,807,4.082,808,4.082,809,3.256,810,3.256,811,2.599,812,2.599,813,3.728,814,1.618,815,2.599,816,1.618,817,1.618,818,2.599,819,1.618,820,2.599,821,1.342,822,1.618,823,1.618,824,1.618,825,3.728,826,1.618,827,3.728,828,1.618,829,1.618,830,1.618,831,2.156,832,2.156,833,1.618,834,1.618,835,1.618,836,1.618,837,2.599,838,2.599,839,2.599,840,2.599,841,2.599,842,1.618,843,1.618,844,1.618,845,1.618,846,1.618,847,1.618,848,1.618,849,1.618,850,1.618,851,1.618,852,1.618,853,1.618,854,1.618,855,1.618,856,1.618,857,1.618,858,1.618,859,1.618,860,1.618,861,1.618,862,1.618,863,1.618,864,1.618,865,1.618,866,1.618,867,1.618,868,1.618,869,1.618,870,1.618,871,1.618,872,1.618,873,1.618,874,1.618,875,1.618,876,1.618,877,1.618,878,1.618,879,1.618,880,1.618,881,1.618,882,1.618,883,1.618,884,1.618,885,2.599,886,2.599,887,2.156,888,2.599,889,2.599,890,3.728,891,3.728,892,2.599,893,2.599,894,2.599,895,2.599,896,2.599,897,2.599,898,2.599,899,2.599,900,2.599,901,3.728,902,2.599,903,2.599,904,4.762,905,3.95,906,2.599,907,4.762,908,2.599,909,2.599,910,2.599,911,2.599]],["title/classes/Spell.html",[78,0.344,122,1.188]],["body/classes/Spell.html",[3,0.327,4,0.327,8,0.282,10,0.713,46,0.39,47,0.452,49,0.669,50,0.036,51,1.795,57,1.791,59,0.647,77,0.559,78,0.327,91,1.055,103,0.026,114,0.023,122,1.929,125,2.639,126,1.424,146,1.71,155,1.663,163,1.424,164,1.499,169,2.492,170,1.559,171,1.499,177,2.301,180,1.559,187,1.88,188,1.71,193,1.491,202,1.3,203,2.156,205,1.499,206,1.3,209,1.424,217,1.592,228,2.222,245,1.127,255,1.34,290,0.94,293,2.301,356,0.723,459,2.026,465,1.929,466,1.359,467,1.88,518,2.106,519,2.847,538,1.71,556,1.499,912,1.663,913,2.301,914,2.301,915,2.074,916,2.573,917,2.301,918,2.074,919,2.992,920,4.063,921,2.573,922,4.063,923,4.063,924,3.864,925,2.936,926,2.936,927,2.936,928,2.573,929,2.936,930,2.847,931,2.936,932,1.663,933,1.859,934,1.859,935,2.573,936,1.859,937,1.859,938,2.573,939,2.95,940,2.573,941,1.859,942,1.859,943,1.859,944,1.859,945,3.183,946,1.859,947,1.859,948,2.573,949,2.573,950,2.573,951,1.663,952,1.859,953,1.859,954,1.859]],["title/interfaces/SpellI.html",[228,1.303,356,0.445]],["body/interfaces/SpellI.html",[3,0.357,4,0.357,8,0.308,10,0.779,46,0.415,47,0.48,49,0.656,50,0.036,51,1.791,59,0.707,77,0.58,78,0.357,91,1.048,103,0.027,114,0.024,122,2.002,125,2.651,126,1.125,163,1.125,164,1.638,169,2.51,177,1.817,180,1.657,193,1.561,202,1.561,203,1.997,205,1.638,206,1.561,209,1.513,217,1.573,228,2.196,245,1.232,255,1.39,290,1.027,293,2.444,356,0.783,358,1.232,459,1.872,465,1.872,466,1.997,467,1.997,519,1.817,538,2.053,556,1.638,912,1.817,913,1.817,914,1.817,915,1.638,916,2.032,917,1.817,918,1.638,919,3.012,921,2.032,924,3.58,928,2.032,930,2.762,932,2.444,933,2.032,934,2.032,935,2.733,936,2.032,937,2.032,938,2.733,939,3.089,940,2.733,941,2.032,942,2.032,943,2.032,944,2.032,945,3.303,946,2.032,947,2.032,948,2.733,949,2.733,950,2.733,951,1.817,952,2.032,953,2.032,954,2.032]],["title/interfaces/SpellResponse.html",[245,1.188,356,0.445]],["body/interfaces/SpellResponse.html",[3,0.365,4,0.365,8,0.315,10,0.797,46,0.421,47,0.487,49,0.628,50,0.036,51,1.75,59,0.724,77,0.585,78,0.365,91,0.987,103,0.032,114,0.025,122,1.894,125,2.436,126,1.15,163,1.15,164,2.237,169,2.425,177,1.859,180,2.021,193,1.579,202,1.403,203,2.028,205,1.676,206,1.403,209,1.536,217,1.58,228,2.077,245,1.682,255,1.403,290,1.051,293,2.482,356,0.757,358,1.26,459,1.894,465,2.021,466,1.519,467,2.283,519,1.859,538,1.845,556,1.676,912,1.859,913,1.859,914,1.859,915,1.676,916,2.079,917,1.859,918,1.676,919,2.881,921,2.079,928,2.079,930,2.981,932,1.859,933,2.079,934,2.079,935,2.775,936,2.079,937,2.079,938,2.775,939,3.124,940,2.775,941,2.079,942,2.079,943,2.079,944,2.079,945,3.334,946,2.079,947,2.079,948,3.124,949,3.124,950,3.124,951,2.981,952,2.079,953,2.079,954,2.079]],["title/interfaces/SpellResponseResults.html",[180,1.188,356,0.445]],["body/interfaces/SpellResponseResults.html",[3,0.354,4,0.354,8,0.306,10,0.773,46,0.521,47,0.478,49,0.647,50,0.036,51,1.805,59,0.702,77,0.578,78,0.354,91,1.046,103,0.027,114,0.024,122,1.996,125,2.407,126,1.116,163,1.116,164,1.626,169,2.506,177,1.804,180,1.865,193,1.555,202,1.555,203,1.987,205,1.626,206,1.555,209,1.505,217,1.57,228,2.045,245,1.223,255,1.386,290,1.019,293,2.432,356,0.748,358,1.223,459,1.865,465,1.996,466,1.474,467,2.248,519,1.804,538,2.045,556,2.193,912,1.804,913,1.804,914,1.804,915,1.626,916,2.017,917,1.804,918,1.626,919,3.007,921,2.017,928,2.017,930,2.752,932,1.804,933,2.017,934,2.017,935,2.72,936,2.017,937,2.017,938,2.72,939,3.077,940,2.72,941,2.017,942,2.017,943,2.017,944,2.017,945,3.293,946,2.017,947,2.017,948,3.077,949,3.077,950,3.077,951,1.804,952,2.72,953,2.72,954,2.72]],["title/injectables/SpellsService.html",[144,1.961,955,2.221]],["body/injectables/SpellsService.html",[3,0.45,4,0.254,8,0.219,10,1.086,13,1.919,25,1.891,46,0.219,47,0.377,49,0.646,50,0.036,51,1.516,52,1.078,53,1,57,1.661,59,0.986,60,0.666,77,0.254,78,0.254,91,0.86,103,0.019,114,0.019,120,2.145,122,2.311,125,1.568,144,2.145,146,1.426,155,1.291,159,4.126,164,1.73,169,2.293,170,2.046,176,2.81,180,1.3,186,2.81,187,1.871,188,1.702,202,1.432,203,2.635,204,2.071,206,1.432,209,1.676,217,1.383,228,2.184,241,1.635,244,1.444,245,1.718,266,1.417,289,3.712,290,1.661,459,2.046,465,1.718,494,1.919,538,1.426,550,2.81,552,2.834,557,3.712,914,1.919,915,1.73,918,2.558,919,2.964,930,1.919,932,1.919,955,2.43,956,1.891,957,1.891,958,3.388,959,5.331,960,2.81,961,4.518,962,4.773,963,3.388,964,3.388,965,3.388,966,2.81,967,4.475,968,5.011,969,4.475,970,4.043,971,4.043,972,3.388,973,5.011,974,2.28,975,3.388,976,2.28,977,3.712,978,4.475,979,3.388,980,3.967,981,4.043,982,5.011,983,3.388,984,3.388,985,2.28,986,3.388,987,3.388,988,2.28,989,3.712,990,3.388,991,4.475,992,3.388,993,3.388,994,3.388,995,3.388,996,3.388,997,2.81,998,3.388,999,3.388,1000,3.388,1001,2.28,1002,2.28,1003,3.388,1004,2.28,1005,2.28,1006,2.28,1007,3.388,1008,2.28,1009,2.28,1010,2.28,1011,3.388,1012,2.28,1013,2.28,1014,2.28,1015,2.28,1016,2.28,1017,4.043,1018,2.28,1019,2.28,1020,2.28,1021,4.043,1022,2.28,1023,1.891,1024,2.28,1025,2.28,1026,2.28]],["title/components/StepperComponent.html",[0,0.344,110,0.905]],["body/components/StepperComponent.html",[0,0.411,1,0.75,2,1.08,3,0.285,4,0.285,5,0.9,6,0.9,7,0.9,8,0.246,10,0.623,22,0.9,23,2.022,24,2.022,26,0.9,27,1.517,28,0.9,30,0.75,34,0.75,36,0.75,39,1.886,40,2.65,42,1.295,44,1.295,46,0.246,47,0.411,49,0.599,50,0.036,51,1.08,52,0.684,53,1.075,54,2.34,57,1.824,59,1.106,60,0.75,62,0.566,67,0.75,68,0.822,74,1.31,75,1.841,77,0.285,78,0.285,80,0.623,85,0.9,86,1.295,87,1.295,88,0.9,89,1.659,90,0.9,91,0.992,92,0.9,93,0.9,94,0.75,95,0.9,96,0.9,97,0.75,98,0.822,99,0.9,100,0.75,101,0.822,102,0.566,103,0.024,104,0.9,105,0.9,106,0.75,107,0.9,108,0.9,109,0.9,110,1.527,111,1.295,112,0.9,113,0.9,114,0.021,126,1.295,146,1.555,161,3.065,162,2.092,170,2.155,171,2.866,187,2.418,188,2.32,211,1.626,213,1.926,217,1.435,246,1.31,266,1.659,386,3.065,390,2.129,437,1.454,552,2.34,624,4.025,775,3.065,821,3.065,1027,2.129,1028,3.695,1029,3.695,1030,4.329,1031,3.695,1032,3.695,1033,3.695,1034,3.695,1035,3.695,1036,3.695,1037,3.695,1038,3.695,1039,3.695,1040,2.567,1041,4.329,1042,2.129,1043,3.695,1044,2.567,1045,3.695,1046,3.695,1047,3.695,1048,3.695,1049,3.695,1050,3.695,1051,4.735,1052,4.735,1053,3.695,1054,4.735,1055,3.695,1056,3.695,1057,3.695,1058,3.695,1059,3.695,1060,2.567,1061,2.567,1062,3.695,1063,2.567,1064,2.567,1065,2.567,1066,2.567,1067,3.695,1068,2.567,1069,2.567,1070,2.567,1071,2.567,1072,2.567,1073,2.567,1074,2.567,1075,2.567,1076,2.567,1077,2.567,1078,2.567,1079,2.567,1080,5.018,1081,3.695,1082,3.695]],["title/coverage.html",[1083,3.495]],["body/coverage.html",[0,0.673,1,1.022,8,0.336,9,2.901,30,1.022,34,1.022,36,1.022,49,0.389,50,0.036,63,2.508,67,1.022,69,2.508,78,0.508,84,2.508,94,1.022,97,1.022,98,1.463,100,1.022,102,1.007,103,0.03,106,1.022,110,1.022,114,0.026,115,2.901,116,2.508,122,1.342,144,2.215,180,1.342,193,1.119,195,1.472,205,2.755,209,1.226,223,2.215,228,1.472,245,1.342,250,2.215,253,2.215,255,0.932,266,2.138,349,2.901,350,2.901,351,2.901,356,0.853,357,2.508,359,2.508,381,3.79,382,2.901,464,2.882,504,2.215,507,2.215,508,2.588,546,2.215,548,2.901,549,2.901,551,2.901,582,2.215,583,3.277,586,2.215,587,2.901,605,2.901,606,2.901,607,2.901,611,2.901,784,2.901,793,2.901,794,2.508,887,2.901,912,3.056,955,3.277,957,2.901,1027,2.901,1083,2.901,1084,3.497,1085,3.497,1086,3.497,1087,3.497,1088,2.901,1089,2.901,1090,5.744,1091,4.57,1092,3.497,1093,3.497,1094,3.497,1095,3.497,1096,3.497,1097,3.497,1098,3.497,1099,3.497,1100,3.497,1101,3.497,1102,3.497,1103,5.09,1104,3.497,1105,3.497,1106,3.497,1107,4.57,1108,3.497,1109,3.497,1110,3.497,1111,3.497,1112,3.497,1113,3.497,1114,4.222,1115,2.901,1116,2.901,1117,2.901,1118,3.497]],["title/dependencies.html",[1119,2.15,1120,3.086]],["body/dependencies.html",[50,0.036,60,1.3,61,3.69,71,2.271,103,0.03,114,0.03,244,2.817,246,2.271,1120,3.69,1121,4.449,1122,6.288,1123,4.449,1124,4.449,1125,4.449,1126,4.449,1127,4.449,1128,5.312,1129,5.312,1130,4.449,1131,4.449,1132,4.449,1133,4.449,1134,4.449,1135,4.449,1136,4.449,1137,4.449,1138,4.449,1139,4.449,1140,4.449]],["title/miscellaneous/enumerations.html",[1141,1.641,1142,3.086]],["body/miscellaneous/enumerations.html",[46,0.43,50,0.034,53,1.176,62,0.987,82,1.718,102,0.987,103,0.03,114,0.03,123,3.21,213,1.718,257,2.535,266,1.569,344,2.835,359,3.21,367,3.713,368,4.422,369,3.713,370,3.713,371,3.713,372,3.713,373,3.713,374,3.713,375,3.713,376,3.713,377,3.713,378,3.713,379,3.713,380,3.713,464,2.535,495,3.338,604,3.21,831,3.713,832,4.422,1141,2.835,1142,3.713,1143,4.476,1144,4.476,1145,4.476,1146,4.476,1147,4.476,1148,4.476]],["title/index.html",[46,0.249,1149,2.592,1150,2.592]],["body/index.html",[2,1.403,13,3.145,17,3.981,50,0.03,54,2.39,62,1.163,68,1.536,80,1.392,82,2.026,83,2.222,84,2.707,103,0.027,114,0.027,116,2.707,118,3.442,122,1.842,123,2.707,125,1.747,162,2.137,163,1.323,185,3.131,202,1.208,203,2.442,206,1.93,255,1.006,437,2.137,465,2.201,468,3.04,475,2.137,483,2.137,491,2.137,538,1.589,546,2.39,552,2.39,553,3.131,556,1.927,794,2.707,798,3.981,905,3.131,915,2.45,917,2.137,918,2.836,960,3.131,961,3.131,962,3.131,966,3.131,977,3.131,980,3.981,989,3.131,997,3.131,1023,3.131,1151,3.774,1152,3.774,1153,3.774,1154,3.774,1155,3.774,1156,3.774,1157,5.278,1158,3.774,1159,3.774,1160,3.774,1161,3.774,1162,3.774,1163,3.774,1164,3.774,1165,3.774,1166,3.774,1167,3.774,1168,3.774,1169,3.774,1170,3.774,1171,3.774,1172,3.774,1173,3.774,1174,4.8,1175,3.774,1176,3.774,1177,3.774,1178,3.774,1179,3.774,1180,3.774,1181,3.774,1182,5.278,1183,3.774,1184,4.8,1185,3.774,1186,3.774,1187,3.774,1188,3.774,1189,3.774,1190,3.774,1191,3.774,1192,3.774,1193,3.774,1194,3.774,1195,3.774,1196,3.774]],["title/modules.html",[1197,3.495]],["body/modules.html",[50,0.032,103,0.032,114,0.032,1197,4.137]],["title/overview.html",[1198,3.495]],["body/overview.html",[2,1.431,50,0.032,103,0.032,114,0.032,257,3.182,358,1.879,505,3.1,506,3.1,518,3.511,956,4.061,1198,4.061]],["title/properties.html",[47,0.414,1119,2.15]],["body/properties.html",[47,0.551,50,0.033,103,0.032,114,0.032,913,2.805,1199,4.952]],["title/miscellaneous/variables.html",[497,2.107,1141,1.641]],["body/miscellaneous/variables.html",[46,0.528,49,0.638,50,0.036,52,1.529,53,1.145,91,0.914,103,0.031,114,0.028,169,2.315,180,1.949,213,2.261,245,1.586,266,1.78,497,2.339,919,2.593,951,2.339,1042,3.427,1088,3.427,1089,4.213,1114,3.427,1115,4.213,1116,4.562,1117,4.562,1141,2.616,1200,4.131,1201,5.499,1202,4.131,1203,4.131,1204,4.131,1205,4.131,1206,4.131,1207,4.131,1208,5.499,1209,4.131,1210,4.131,1211,4.131,1212,4.131,1213,4.131,1214,4.131,1215,4.131,1216,4.131]]],"invertedIndex":[["",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":266,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["0.0.0",{"_index":1199,"title":{},"body":{"properties.html":{}}}],["0.14.3",{"_index":1140,"title":{},"body":{"dependencies.html":{}}}],["0.26.11",{"_index":1138,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1090,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1103,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1104,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1093,"title":{},"body":{"coverage.html":{}}}],["00",{"_index":1208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":213,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/NavbarComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["1/11",{"_index":1113,"title":{},"body":{"coverage.html":{}}}],["1/15",{"_index":1098,"title":{},"body":{"coverage.html":{}}}],["1/18",{"_index":1105,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1087,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1109,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1102,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":1107,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":1095,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":1106,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":506,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"overview.html":{}}}],["100",{"_index":887,"title":{},"body":{"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["12",{"_index":507,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"coverage.html":{}}}],["16",{"_index":1094,"title":{},"body":{"coverage.html":{}}}],["18",{"_index":1100,"title":{},"body":{"coverage.html":{}}}],["18.0.1",{"_index":1126,"title":{},"body":{"dependencies.html":{}}}],["18.2.4",{"_index":1122,"title":{},"body":{"dependencies.html":{}}}],["18/22",{"_index":1097,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":257,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["2.3.0",{"_index":1136,"title":{},"body":{"dependencies.html":{}}}],["2/11",{"_index":1101,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":508,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["25",{"_index":1091,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":604,"title":{},"body":{"components/NavbarComponent.html":{},"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{}}}],["3/8",{"_index":1111,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1108,"title":{},"body":{"coverage.html":{}}}],["37",{"_index":1110,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":503,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["5",{"_index":784,"title":{},"body":{"components/OverlayComponent.html":{},"coverage.html":{}}}],["5.2.0",{"_index":1133,"title":{},"body":{"dependencies.html":{}}}],["5/20",{"_index":1092,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":1099,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1086,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":504,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"coverage.html":{}}}],["6th",{"_index":983,"title":{},"body":{"injectables/SpellsService.html":{}}}],["7.8.0",{"_index":1134,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":505,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"overview.html":{}}}],["81",{"_index":1096,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1112,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":885,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["9pdf6ttr0j7hmkk_7t6xtpun",{"_index":1039,"title":{},"body":{"components/StepperComponent.html":{}}}],["abbreviation",{"_index":644,"title":{},"body":{"components/OverlayComponent.html":{}}}],["access",{"_index":1181,"title":{},"body":{"index.html":{}}}],["accessors",{"_index":401,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["action",{"_index":1161,"title":{},"body":{"index.html":{}}}],["actions",{"_index":1175,"title":{},"body":{"index.html":{}}}],["actual_component",{"_index":113,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["add",{"_index":775,"title":{},"body":{"components/OverlayComponent.html":{},"components/StepperComponent.html":{}}}],["added",{"_index":385,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["adding",{"_index":479,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["additional",{"_index":914,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["addobservabletoautocomplete",{"_index":147,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["addobservabletoleveldropdown",{"_index":148,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["address",{"_index":628,"title":{},"body":{"components/OverlayComponent.html":{}}}],["address2",{"_index":629,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform",{"_index":616,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls['address'].haserror('required",{"_index":774,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls['city'].haserror('required",{"_index":780,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls['firstname'].haserror('required",{"_index":770,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls['lastname'].haserror('required",{"_index":772,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls['state'].haserror('required",{"_index":782,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls[\\'address\\'].haserror(\\'required",{"_index":790,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls[\\'city\\'].haserror(\\'required",{"_index":791,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls[\\'firstname\\'].haserror(\\'required",{"_index":788,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls[\\'lastname\\'].haserror(\\'required",{"_index":789,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls[\\'state\\'].haserror(\\'required",{"_index":792,"title":{},"body":{"components/OverlayComponent.html":{}}}],["advantage",{"_index":495,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{}}}],["advantage.advantage",{"_index":825,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantage.disadvantage",{"_index":827,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantage.none",{"_index":501,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["advantageadvantage",{"_index":803,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantagedisadvantage",{"_index":804,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantageenum",{"_index":805,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantagenone",{"_index":806,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantageoptions",{"_index":807,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["ak",{"_index":647,"title":{},"body":{"components/OverlayComponent.html":{}}}],["al",{"_index":645,"title":{},"body":{"components/OverlayComponent.html":{}}}],["alabama",{"_index":643,"title":{},"body":{"components/OverlayComponent.html":{}}}],["alaska",{"_index":646,"title":{},"body":{"components/OverlayComponent.html":{}}}],["alert('thanks",{"_index":769,"title":{},"body":{"components/OverlayComponent.html":{}}}],["algorithm",{"_index":1190,"title":{},"body":{"index.html":{}}}],["allow",{"_index":916,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["allows",{"_index":119,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["american",{"_index":648,"title":{},"body":{"components/OverlayComponent.html":{}}}],["amount",{"_index":124,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["amounts",{"_index":1155,"title":{},"body":{"index.html":{}}}],["angular",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["angular/animations",{"_index":1121,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1123,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/layout",{"_index":602,"title":{},"body":{"components/NavbarComponent.html":{}}}],["angular/common",{"_index":71,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/SkillCheckComponent.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":1005,"title":{},"body":{"injectables/SpellsService.html":{}}}],["angular/compiler",{"_index":1124,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"dependencies.html":{}}}],["angular/fire",{"_index":1125,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":246,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":1127,"title":{},"body":{"dependencies.html":{}}}],["angular/material/autocomplete",{"_index":249,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["angular/material/button",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["angular/material/card",{"_index":252,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["angular/material/form",{"_index":1079,"title":{},"body":{"components/StepperComponent.html":{}}}],["angular/material/icon",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{},"components/StepperComponent.html":{}}}],["angular/material/input",{"_index":247,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["angular/material/list",{"_index":76,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["angular/material/radio",{"_index":768,"title":{},"body":{"components/OverlayComponent.html":{}}}],["angular/material/select",{"_index":248,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["angular/material/sidenav",{"_index":72,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["angular/material/table",{"_index":575,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["angular/material/toolbar",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["angular/platform",{"_index":1128,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":61,"title":{},"body":{"components/AppComponent.html":{},"dependencies.html":{}}}],["angularbg3cheats",{"_index":1151,"title":{},"body":{"index.html":{}}}],["api",{"_index":203,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["api/spells/cantrip",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/spells/level",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":24,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["app.component.html",{"_index":43,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":45,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":1089,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appears",{"_index":562,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["applicationconfig",{"_index":1202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apt",{"_index":777,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ar",{"_index":653,"title":{},"body":{"components/OverlayComponent.html":{}}}],["arizona",{"_index":650,"title":{},"body":{"components/OverlayComponent.html":{}}}],["arkansas",{"_index":652,"title":{},"body":{"components/OverlayComponent.html":{}}}],["array",{"_index":167,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["array(6",{"_index":218,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["array(7).keys()].slice(spell.level",{"_index":268,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["arrays",{"_index":539,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["async",{"_index":343,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{}}}],["asyncpipe",{"_index":588,"title":{},"body":{"components/NavbarComponent.html":{}}}],["attack",{"_index":68,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["attackrollscomponent",{"_index":67,"title":{"components/AttackRollsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["attackrollsform",{"_index":137,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["attackrollsformsubmit",{"_index":149,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["attempts",{"_index":494,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{}}}],["attemptsoptions",{"_index":808,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["autocomplete",{"_index":160,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["automatic",{"_index":891,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["automatically",{"_index":387,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["az",{"_index":651,"title":{},"body":{"components/OverlayComponent.html":{}}}],["bar",{"_index":558,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["barbarian",{"_index":369,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["bard",{"_index":370,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["based",{"_index":164,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["bg3",{"_index":55,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["block",{"_index":576,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["bonus",{"_index":98,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["boolean",{"_index":821,"title":{},"body":{"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["both",{"_index":384,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{}}}],["breakpointobserver",{"_index":591,"title":{},"body":{"components/NavbarComponent.html":{}}}],["breakpoints",{"_index":601,"title":{},"body":{"components/NavbarComponent.html":{}}}],["browser",{"_index":1129,"title":{},"body":{"dependencies.html":{}}}],["build",{"_index":1164,"title":{},"body":{"index.html":{}}}],["built",{"_index":1171,"title":{},"body":{"index.html":{}}}],["buttons",{"_index":1195,"title":{},"body":{"index.html":{}}}],["c/o",{"_index":776,"title":{},"body":{"components/OverlayComponent.html":{}}}],["c77de\",\"appid\":\"1:864287131419:web:4b60183cca62591db7b5be\",\"storagebucket\":\"test",{"_index":1209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["c77de.firebaseapp.com\",\"messagingsenderid\":\"864287131419",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["c77de.firebasestorage.app\",\"apikey\":\"aizasydp4kd1dombpfosirbe7i6dyljmbbnbtay\",\"authdomain\":\"test",{"_index":1210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ca",{"_index":655,"title":{},"body":{"components/OverlayComponent.html":{}}}],["calc",{"_index":348,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["calculate",{"_index":123,"title":{},"body":{"components/AttackRollsComponent.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["calculating",{"_index":468,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"index.html":{}}}],["calculations",{"_index":491,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"index.html":{}}}],["calculations.serivce.ts",{"_index":500,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["calculations.service",{"_index":256,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{}}}],["calculations.service.ts",{"_index":546,"title":{},"body":{"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"coverage.html":{},"index.html":{}}}],["calculator",{"_index":81,"title":{},"body":{"components/AppComponent.html":{}}}],["california",{"_index":654,"title":{},"body":{"components/OverlayComponent.html":{}}}],["call",{"_index":978,"title":{},"body":{"injectables/SpellsService.html":{}}}],["calls",{"_index":960,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["cantrip",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["carolina",{"_index":720,"title":{},"body":{"components/OverlayComponent.html":{}}}],["case",{"_index":1033,"title":{},"body":{"components/StepperComponent.html":{}}}],["catch(e",{"_index":1025,"title":{},"body":{"injectables/SpellsService.html":{}}}],["certain",{"_index":1154,"title":{},"body":{"index.html":{}}}],["chance",{"_index":474,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{}}}],["change",{"_index":161,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/StepperComponent.html":{}}}],["changes",{"_index":168,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["character",{"_index":95,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["characterclass",{"_index":368,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["charactersheetcomponent",{"_index":94,"title":{"components/CharacterSheetComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["characterstats",{"_index":357,"title":{"interfaces/CharacterStats.html":{}},"body":{"interfaces/CharacterStats.html":{},"coverage.html":{}}}],["charisma",{"_index":360,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["cheats",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["check",{"_index":82,"title":{},"body":{"components/AppComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["check'},{'name",{"_index":109,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["check.component",{"_index":64,"title":{},"body":{"components/AppComponent.html":{}}}],["check.component.html",{"_index":801,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.scss",{"_index":802,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts",{"_index":794,"title":{},"body":{"components/SkillCheckComponent.html":{},"coverage.html":{},"index.html":{}}}],["check.component.ts:105",{"_index":822,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:110",{"_index":814,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:30",{"_index":835,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:31",{"_index":843,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:32",{"_index":824,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:33",{"_index":842,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:44",{"_index":836,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:52",{"_index":829,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:53",{"_index":830,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:54",{"_index":826,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:55",{"_index":828,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:56",{"_index":833,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:61",{"_index":834,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:63",{"_index":819,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:67",{"_index":817,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:79",{"_index":816,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:88",{"_index":823,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check/skill",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["checking",{"_index":795,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["city",{"_index":630,"title":{},"body":{"components/OverlayComponent.html":{}}}],["class",{"_index":78,"title":{"classes/DiceSet.html":{},"classes/Spell.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["classes",{"_index":518,"title":{},"body":{"classes/DiceSet.html":{},"classes/Spell.html":{},"overview.html":{}}}],["cleric",{"_index":371,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["co",{"_index":657,"title":{},"body":{"components/OverlayComponent.html":{}}}],["colorado",{"_index":656,"title":{},"body":{"components/OverlayComponent.html":{}}}],["columbia",{"_index":663,"title":{},"body":{"components/OverlayComponent.html":{}}}],["commonmodule",{"_index":31,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{}}}],["company",{"_index":623,"title":{},"body":{"components/OverlayComponent.html":{}}}],["compodoc",{"_index":1172,"title":{},"body":{"index.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":90,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["componentref",{"_index":207,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"index.html":{},"overview.html":{}}}],["connecticut",{"_index":658,"title":{},"body":{"components/OverlayComponent.html":{}}}],["console.log('attack",{"_index":340,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["console.log('damage",{"_index":940,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["console.log('pipe",{"_index":1014,"title":{},"body":{"injectables/SpellsService.html":{}}}],["console.log('skill",{"_index":872,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["console.log('submit",{"_index":317,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["console.log('table",{"_index":863,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["console.log(skillchecksuccesschance",{"_index":875,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["const",{"_index":259,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["constitution",{"_index":361,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["construction",{"_index":852,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["constructor",{"_index":155,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/DiceSet.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{}}}],["constructor(http",{"_index":972,"title":{},"body":{"injectables/SpellsService.html":{}}}],["constructor(name",{"_index":921,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["constructor(undefined",{"_index":520,"title":{},"body":{"classes/DiceSet.html":{}}}],["contains",{"_index":980,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["control",{"_index":386,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/StepperComponent.html":{}}}],["controlcontainer",{"_index":391,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["controlkey",{"_index":399,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["controlvalueaccessor",{"_index":1041,"title":{},"body":{"components/StepperComponent.html":{}}}],["converts",{"_index":182,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["count",{"_index":951,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":1083,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":995,"title":{},"body":{"injectables/SpellsService.html":{}}}],["created",{"_index":486,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["creates",{"_index":550,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"injectables/SpellsService.html":{}}}],["createtablecomponent",{"_index":811,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["createtablecomponent(tableinput",{"_index":815,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["ct",{"_index":659,"title":{},"body":{"components/OverlayComponent.html":{}}}],["cum",{"_index":573,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["cumpercentageresults",{"_index":469,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["current",{"_index":190,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["currentadvantagevalue",{"_index":820,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["currentspellrange",{"_index":138,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["custom",{"_index":1029,"title":{},"body":{"components/StepperComponent.html":{}}}],["d10",{"_index":406,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["d10(dicenum",{"_index":452,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["d10num",{"_index":543,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["d12",{"_index":407,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["d12(dicenum",{"_index":455,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["d12num",{"_index":544,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["d20",{"_index":490,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["d20num",{"_index":545,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["d4",{"_index":403,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["d4(dicenum",{"_index":443,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["d4num",{"_index":540,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["d6",{"_index":404,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["d6(dicenum",{"_index":446,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["d6num",{"_index":541,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["d8",{"_index":405,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["d8(dicenum",{"_index":449,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["d8num",{"_index":542,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["dakota",{"_index":722,"title":{},"body":{"components/OverlayComponent.html":{}}}],["damage",{"_index":125,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["damage={0",{"_index":934,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["data",{"_index":465,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["day",{"_index":786,"title":{},"body":{"components/OverlayComponent.html":{}}}],["dc",{"_index":664,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["de",{"_index":661,"title":{},"body":{"components/OverlayComponent.html":{}}}],["decimals",{"_index":897,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["decision",{"_index":1158,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":220,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["decrement",{"_index":1051,"title":{},"body":{"components/StepperComponent.html":{}}}],["default",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":57,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["delaware",{"_index":660,"title":{},"body":{"components/OverlayComponent.html":{}}}],["dependencies",{"_index":1120,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["deployed",{"_index":1173,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1176,"title":{},"body":{"index.html":{}}}],["described",{"_index":484,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["description",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["designed",{"_index":1153,"title":{},"body":{"index.html":{}}}],["details",{"_index":1189,"title":{},"body":{"index.html":{}}}],["determine",{"_index":1156,"title":{},"body":{"index.html":{}}}],["dexterity",{"_index":362,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["dice",{"_index":80,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["dicebonuscomponent",{"_index":139,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["dicebonusformcomponent",{"_index":97,"title":{"components/DiceBonusFormComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["dicecalcresults",{"_index":330,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["dicecalcservice",{"_index":140,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["dicecalculations",{"_index":567,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["dicecalculationsservice",{"_index":223,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["dicenum",{"_index":420,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["diceresults",{"_index":195,"title":{"interfaces/DiceResults.html":{}},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["dicerollresults",{"_index":871,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["dicerolls",{"_index":175,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["diceset",{"_index":255,"title":{"classes/DiceSet.html":{}},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"coverage.html":{},"index.html":{}}}],["diceset(diedict",{"_index":861,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diceset(json.parse",{"_index":315,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["diceset.target.tostring",{"_index":880,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diceset.ts",{"_index":1186,"title":{},"body":{"index.html":{}}}],["diceseti",{"_index":193,"title":{"interfaces/DiceSetI.html":{}},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"coverage.html":{}}}],["dicestring",{"_index":521,"title":{},"body":{"classes/DiceSet.html":{}}}],["dict",{"_index":850,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["die",{"_index":101,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["diebonuses",{"_index":849,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diebonusform",{"_index":809,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diedict",{"_index":314,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["diedict['advantage",{"_index":857,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diedict['attempts",{"_index":859,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diedict['d20",{"_index":854,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diedict['target",{"_index":855,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["dierollresultstablecomponent",{"_index":100,"title":{"components/DieRollResultsTableComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["different",{"_index":547,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["directive",{"_index":88,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["directives",{"_index":112,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["disadvantage",{"_index":832,"title":{},"body":{"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{}}}],["display",{"_index":799,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["displayedcolumns",{"_index":568,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["displayspellautocompletevalue",{"_index":150,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["displayspellautocompletevalue(selectedvalue",{"_index":179,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["district",{"_index":662,"title":{},"body":{"components/OverlayComponent.html":{}}}],["dnd",{"_index":918,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["dnd5eapi",{"_index":979,"title":{},"body":{"injectables/SpellsService.html":{}}}],["document.getelementbyid('damage",{"_index":321,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["document.getelementbyid('success",{"_index":868,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["document.getelementbyid('target",{"_index":870,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["documentation",{"_index":84,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{},"index.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["dropdown",{"_index":173,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["dropdowngroup",{"_index":582,"title":{"interfaces/DropdownGroup.html":{}},"body":{"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"coverage.html":{}}}],["dropdownitem",{"_index":586,"title":{"interfaces/DropdownItem.html":{}},"body":{"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"coverage.html":{}}}],["druid",{"_index":372,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["dynamic",{"_index":1130,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":538,"title":{},"body":{"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["easier",{"_index":917,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"index.html":{}}}],["easy",{"_index":851,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["edit",{"_index":383,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["element",{"_index":87,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["element.cumpercentageresults",{"_index":579,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["element.numresults",{"_index":578,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["element.percentageresults",{"_index":580,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["element.rollresult",{"_index":577,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["empty",{"_index":191,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["enum",{"_index":367,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":1142,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":477,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["export",{"_index":77,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["extends",{"_index":488,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["fail",{"_index":893,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["false",{"_index":641,"title":{},"body":{"components/OverlayComponent.html":{}}}],["fb",{"_index":617,"title":{},"body":{"components/OverlayComponent.html":{}}}],["federated",{"_index":665,"title":{},"body":{"components/OverlayComponent.html":{}}}],["field",{"_index":1030,"title":{},"body":{"components/StepperComponent.html":{}}}],["fighter",{"_index":373,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["filter",{"_index":986,"title":{},"body":{"injectables/SpellsService.html":{}}}],["filter(spelllist",{"_index":307,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["filteredgroupspelllist",{"_index":141,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["firebase",{"_index":1178,"title":{},"body":{"index.html":{}}}],["first",{"_index":771,"title":{},"body":{"components/OverlayComponent.html":{}}}],["firstname",{"_index":625,"title":{},"body":{"components/OverlayComponent.html":{}}}],["fl",{"_index":669,"title":{},"body":{"components/OverlayComponent.html":{}}}],["flat",{"_index":1147,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["florida",{"_index":668,"title":{},"body":{"components/OverlayComponent.html":{}}}],["flowicon",{"_index":911,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["fm",{"_index":667,"title":{},"body":{"components/OverlayComponent.html":{}}}],["fn",{"_index":1067,"title":{},"body":{"components/StepperComponent.html":{}}}],["for(item",{"_index":902,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["for(let",{"_index":293,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["for(spell",{"_index":345,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["for(spellgroup",{"_index":342,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["forkjoin",{"_index":240,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["forkjoin(spellsgroups).pipe",{"_index":302,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["form",{"_index":162,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["form'},{'name",{"_index":99,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["form.component",{"_index":251,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["form.component.html",{"_index":388,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.scss",{"_index":395,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts",{"_index":382,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"coverage.html":{}}}],["form.component.ts:25",{"_index":413,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:26",{"_index":409,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:27",{"_index":410,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:29",{"_index":415,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:33",{"_index":417,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:37",{"_index":419,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:41",{"_index":422,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:45",{"_index":424,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:49",{"_index":426,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:53",{"_index":428,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:57",{"_index":430,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:61",{"_index":432,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:65",{"_index":434,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:69",{"_index":436,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:73",{"_index":412,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:86",{"_index":411,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form/dice",{"_index":250,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["formbuilder",{"_index":766,"title":{},"body":{"components/OverlayComponent.html":{}}}],["formcontrol",{"_index":211,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["formcontrol(0",{"_index":458,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{}}}],["formcontrol(1",{"_index":840,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["formcontrol(advantage.none",{"_index":839,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["formcontrol(this.selectedspell?.level",{"_index":212,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["formgroup",{"_index":210,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{}}}],["forms",{"_index":563,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["formsmodule",{"_index":1047,"title":{},"body":{"components/StepperComponent.html":{}}}],["forwardref",{"_index":1045,"title":{},"body":{"components/StepperComponent.html":{}}}],["found",{"_index":608,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found'},{'name",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["found.component.html",{"_index":609,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found.component.scss",{"_index":610,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found.component.ts",{"_index":607,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["found/not",{"_index":606,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["free",{"_index":637,"title":{},"body":{"components/OverlayComponent.html":{}}}],["freepik",{"_index":906,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["frontend",{"_index":798,"title":{},"body":{"components/SkillCheckComponent.html":{},"index.html":{}}}],["function",{"_index":989,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["functions",{"_index":915,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["ga",{"_index":671,"title":{},"body":{"components/OverlayComponent.html":{}}}],["generated",{"_index":467,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["generatediceset",{"_index":151,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["generates",{"_index":797,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["generatetable",{"_index":152,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["generatetable(tableinput",{"_index":194,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["georgia",{"_index":670,"title":{},"body":{"components/OverlayComponent.html":{}}}],["getallspells",{"_index":968,"title":{},"body":{"injectables/SpellsService.html":{}}}],["getallspellsoflevel",{"_index":967,"title":{},"body":{"injectables/SpellsService.html":{}}}],["getallspellsoflevel(level",{"_index":984,"title":{},"body":{"injectables/SpellsService.html":{}}}],["getauth",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getd10",{"_index":429,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["getd12",{"_index":433,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["getd4",{"_index":416,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["getd6",{"_index":421,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["getd8",{"_index":425,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["getparentformgroup",{"_index":414,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["gets",{"_index":201,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["getspell",{"_index":969,"title":{},"body":{"injectables/SpellsService.html":{}}}],["getspell(url",{"_index":987,"title":{},"body":{"injectables/SpellsService.html":{}}}],["getting",{"_index":1149,"title":{"index.html":{}},"body":{}}],["github",{"_index":1174,"title":{},"body":{"index.html":{}}}],["give",{"_index":1000,"title":{},"body":{"injectables/SpellsService.html":{}}}],["given",{"_index":992,"title":{},"body":{"injectables/SpellsService.html":{}}}],["gotten",{"_index":1185,"title":{},"body":{"index.html":{}}}],["group",{"_index":584,"title":{},"body":{"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/SkillCheckComponent.html":{}}}],["groupname",{"_index":585,"title":{},"body":{"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{}}}],["gu",{"_index":673,"title":{},"body":{"components/OverlayComponent.html":{}}}],["guam",{"_index":672,"title":{},"body":{"components/OverlayComponent.html":{}}}],["guide",{"_index":1031,"title":{},"body":{"components/StepperComponent.html":{}}}],["hampshire",{"_index":711,"title":{},"body":{"components/OverlayComponent.html":{}}}],["handled",{"_index":1177,"title":{},"body":{"index.html":{}}}],["hardcodedautocomplete",{"_index":215,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["hasunitnumber",{"_index":618,"title":{},"body":{"components/OverlayComponent.html":{}}}],["hawaii",{"_index":674,"title":{},"body":{"components/OverlayComponent.html":{}}}],["here",{"_index":1032,"title":{},"body":{"components/StepperComponent.html":{}}}],["hi",{"_index":675,"title":{},"body":{"components/OverlayComponent.html":{}}}],["higher",{"_index":476,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{}}}],["hold",{"_index":466,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["holds",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceSetI.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["home",{"_index":11,"title":{},"body":{"components/AppComponent.html":{}}}],["html",{"_index":86,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["http",{"_index":959,"title":{},"body":{"injectables/SpellsService.html":{}}}],["httpclient",{"_index":973,"title":{},"body":{"injectables/SpellsService.html":{}}}],["https://flowbite.com/docs/forms/number",{"_index":1040,"title":{},"body":{"components/StepperComponent.html":{}}}],["https://jsonplaceholder.typicode.com",{"_index":965,"title":{},"body":{"injectables/SpellsService.html":{}}}],["https://transform.tools/json",{"_index":948,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["https://v5.material.angular.io/guide/creating",{"_index":1028,"title":{},"body":{"components/StepperComponent.html":{}}}],["https://www.dnd5eapi.co",{"_index":1166,"title":{},"body":{"index.html":{}}}],["https://www.dnd5eapi.co/api",{"_index":963,"title":{},"body":{"injectables/SpellsService.html":{}}}],["https://www.dnd5eapi.co/api/spells",{"_index":950,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["https://www.youtube.com/watch?v=xtcjqawij2c&list=plw5h0dij",{"_index":1038,"title":{},"body":{"components/StepperComponent.html":{}}}],["ia",{"_index":682,"title":{},"body":{"components/OverlayComponent.html":{}}}],["icons",{"_index":904,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["id",{"_index":677,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["idaho",{"_index":676,"title":{},"body":{"components/OverlayComponent.html":{}}}],["identifier",{"_index":1084,"title":{},"body":{"coverage.html":{}}}],["if(minelement",{"_index":325,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["if(spell.level",{"_index":265,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["if(spelllevel",{"_index":1020,"title":{},"body":{"injectables/SpellsService.html":{}}}],["if(successelement",{"_index":874,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["if(tableinput",{"_index":312,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["if(targetdcelement",{"_index":878,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["il",{"_index":679,"title":{},"body":{"components/OverlayComponent.html":{}}}],["illinois",{"_index":678,"title":{},"body":{"components/OverlayComponent.html":{}}}],["implement",{"_index":498,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["implementation",{"_index":496,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["implements",{"_index":126,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"components/StepperComponent.html":{}}}],["import",{"_index":59,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["imports",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["impossible",{"_index":888,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["increment",{"_index":1052,"title":{},"body":{"components/StepperComponent.html":{}}}],["index",{"_index":46,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["indiana",{"_index":680,"title":{},"body":{"components/OverlayComponent.html":{}}}],["individual",{"_index":953,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["information",{"_index":202,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["initialize",{"_index":158,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["initializeapp({\"projectid\":\"test",{"_index":1207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":236,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["inject(breakpointobserver",{"_index":593,"title":{},"body":{"components/NavbarComponent.html":{}}}],["inject(controlcontainer",{"_index":393,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["inject(dicecalculationsservice",{"_index":224,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{}}}],["inject(formbuilder",{"_index":639,"title":{},"body":{"components/OverlayComponent.html":{}}}],["inject(spellsservice",{"_index":230,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["injectable",{"_index":955,"title":{"injectables/SpellsService.html":{}},"body":{"injectables/SpellsService.html":{},"coverage.html":{}}}],["injectables",{"_index":956,"title":{},"body":{"injectables/SpellsService.html":{},"overview.html":{}}}],["injection",{"_index":975,"title":{},"body":{"injectables/SpellsService.html":{}}}],["input",{"_index":437,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["input({required",{"_index":439,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["inputs",{"_index":398,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{}}}],["inputted",{"_index":999,"title":{},"body":{"injectables/SpellsService.html":{}}}],["intelligence",{"_index":363,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["interface",{"_index":356,"title":{"interfaces/CharacterStats.html":{},"interfaces/DiceResults.html":{},"interfaces/DiceSetI.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}},"body":{"interfaces/CharacterStats.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"coverage.html":{}}}],["interfaces",{"_index":358,"title":{},"body":{"interfaces/CharacterStats.html":{},"interfaces/DiceResults.html":{},"interfaces/DiceSetI.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"overview.html":{}}}],["iowa",{"_index":681,"title":{},"body":{"components/OverlayComponent.html":{}}}],["isadvantagenone",{"_index":812,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["isadvantagenone(currentadvantagevalue",{"_index":818,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["isdisabled",{"_index":1072,"title":{},"body":{"components/StepperComponent.html":{}}}],["ishandset",{"_index":592,"title":{},"body":{"components/NavbarComponent.html":{}}}],["island",{"_index":740,"title":{},"body":{"components/OverlayComponent.html":{}}}],["islands",{"_index":691,"title":{},"body":{"components/OverlayComponent.html":{}}}],["item",{"_index":903,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["iterable",{"_index":489,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["iterator",{"_index":499,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["jersey",{"_index":713,"title":{},"body":{"components/OverlayComponent.html":{}}}],["json",{"_index":1132,"title":{},"body":{"dependencies.html":{}}}],["json.parse",{"_index":845,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["json.stringify(this.attackrollsform.value))['diebonuses",{"_index":316,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["json.stringify(this.skillcheckform.value))['diebonuses",{"_index":846,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["kansas",{"_index":683,"title":{},"body":{"components/OverlayComponent.html":{}}}],["kentucky",{"_index":685,"title":{},"body":{"components/OverlayComponent.html":{}}}],["key",{"_index":939,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["keys",{"_index":502,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["ks",{"_index":684,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ky",{"_index":686,"title":{},"body":{"components/OverlayComponent.html":{}}}],["la",{"_index":688,"title":{},"body":{"components/OverlayComponent.html":{}}}],["label",{"_index":400,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{}}}],["last",{"_index":773,"title":{},"body":{"components/OverlayComponent.html":{}}}],["lastname",{"_index":627,"title":{},"body":{"components/OverlayComponent.html":{}}}],["layout",{"_index":1170,"title":{},"body":{"index.html":{}}}],["legend",{"_index":85,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["level",{"_index":169,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/CharacterStats.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"miscellaneous/variables.html":{}}}],["level=1",{"_index":933,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["levelnum",{"_index":283,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["likelihood",{"_index":1157,"title":{},"body":{"index.html":{}}}],["line",{"_index":848,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["link",{"_index":118,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"index.html":{}}}],["linked",{"_index":117,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["links",{"_index":16,"title":{},"body":{"components/AppComponent.html":{}}}],["list",{"_index":961,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["literal",{"_index":924,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{}}}],["looks",{"_index":561,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["louisiana",{"_index":687,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ma",{"_index":696,"title":{},"body":{"components/OverlayComponent.html":{}}}],["made",{"_index":905,"title":{},"body":{"components/SkillCheckComponent.html":{},"index.html":{}}}],["main",{"_index":966,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["maine",{"_index":689,"title":{},"body":{"components/OverlayComponent.html":{}}}],["make",{"_index":1036,"title":{},"body":{"components/StepperComponent.html":{}}}],["makes",{"_index":977,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["making",{"_index":990,"title":{},"body":{"injectables/SpellsService.html":{}}}],["many",{"_index":537,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["map",{"_index":241,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"injectables/SpellsService.html":{}}}],["map(result",{"_index":597,"title":{},"body":{"components/NavbarComponent.html":{}}}],["map(spellgroup",{"_index":303,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["mariana",{"_index":725,"title":{},"body":{"components/OverlayComponent.html":{}}}],["marshall",{"_index":690,"title":{},"body":{"components/OverlayComponent.html":{}}}],["maryland",{"_index":693,"title":{},"body":{"components/OverlayComponent.html":{}}}],["massachusetts",{"_index":695,"title":{},"body":{"components/OverlayComponent.html":{}}}],["matautocompletemodule",{"_index":131,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["matbuttonmodule",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["matbuttontogglemodule",{"_index":800,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["matcardmodule",{"_index":132,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["matching",{"_index":114,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":553,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"index.html":{}}}],["matformfieldmodule",{"_index":1048,"title":{},"body":{"components/StepperComponent.html":{}}}],["maticonmodule",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{},"components/StepperComponent.html":{}}}],["matinputmodule",{"_index":128,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["matlistmodule",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["matradiomodule",{"_index":613,"title":{},"body":{"components/OverlayComponent.html":{}}}],["matselectmodule",{"_index":130,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["matsidenavmodule",{"_index":37,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["mattablemodule",{"_index":564,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["mattoolbarmodule",{"_index":38,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["max",{"_index":324,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["maxelement",{"_index":323,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["maxelement.innertext",{"_index":328,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["md",{"_index":694,"title":{},"body":{"components/OverlayComponent.html":{}}}],["menu",{"_index":79,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["metadata",{"_index":22,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["methods",{"_index":146,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["mexico",{"_index":715,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mh",{"_index":692,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mi",{"_index":698,"title":{},"body":{"components/OverlayComponent.html":{}}}],["michigan",{"_index":697,"title":{},"body":{"components/OverlayComponent.html":{}}}],["micronesia",{"_index":666,"title":{},"body":{"components/OverlayComponent.html":{}}}],["min",{"_index":322,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["mind",{"_index":1035,"title":{},"body":{"components/StepperComponent.html":{}}}],["minelement",{"_index":320,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["minelement.innertext",{"_index":326,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["minlevel",{"_index":270,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["minnesota",{"_index":699,"title":{},"body":{"components/OverlayComponent.html":{}}}],["miscellaneous",{"_index":1141,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mississippi",{"_index":701,"title":{},"body":{"components/OverlayComponent.html":{}}}],["missouri",{"_index":703,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mn",{"_index":700,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mo",{"_index":704,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mockspellresponse",{"_index":1115,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockspellresult0",{"_index":1116,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockspellresult1",{"_index":1117,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["modified",{"_index":1193,"title":{},"body":{"index.html":{}}}],["modifier",{"_index":459,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["modifier=0",{"_index":1010,"title":{},"body":{"injectables/SpellsService.html":{}}}],["modules",{"_index":1197,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monk",{"_index":374,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["montana",{"_index":705,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mp",{"_index":726,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ms",{"_index":702,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mt",{"_index":706,"title":{},"body":{"components/OverlayComponent.html":{}}}],["multi",{"_index":1046,"title":{},"body":{"components/StepperComponent.html":{}}}],["nadiinko",{"_index":910,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["name",{"_index":91,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":184,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["natural",{"_index":890,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["navbar",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{}}}],["navbar'},{'name",{"_index":105,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["navbar.component.html",{"_index":589,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbar.component.scss",{"_index":590,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbar/navbar.component",{"_index":65,"title":{},"body":{"components/AppComponent.html":{}}}],["navbarcomponent",{"_index":30,"title":{"components/NavbarComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["nbsp",{"_index":581,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["nbsp;d4",{"_index":461,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["nbsp;d6",{"_index":462,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["nbsp;d8",{"_index":463,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["nc",{"_index":721,"title":{},"body":{"components/OverlayComponent.html":{}}}],["nd",{"_index":723,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ne",{"_index":708,"title":{},"body":{"components/OverlayComponent.html":{}}}],["nebraska",{"_index":707,"title":{},"body":{"components/OverlayComponent.html":{}}}],["necessary",{"_index":932,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["needs",{"_index":998,"title":{},"body":{"injectables/SpellsService.html":{}}}],["nevada",{"_index":709,"title":{},"body":{"components/OverlayComponent.html":{}}}],["new",{"_index":209,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"coverage.html":{}}}],["newvalue",{"_index":1075,"title":{},"body":{"components/StepperComponent.html":{}}}],["next",{"_index":517,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/OverlayComponent.html":{}}}],["ng_value_accessor",{"_index":1043,"title":{},"body":{"components/StepperComponent.html":{}}}],["ngondestroy",{"_index":397,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["ngoninit",{"_index":153,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{}}}],["nh",{"_index":712,"title":{},"body":{"components/OverlayComponent.html":{}}}],["nj",{"_index":714,"title":{},"body":{"components/OverlayComponent.html":{}}}],["nm",{"_index":716,"title":{},"body":{"components/OverlayComponent.html":{}}}],["none",{"_index":831,"title":{},"body":{"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{}}}],["north",{"_index":719,"title":{},"body":{"components/OverlayComponent.html":{}}}],["northern",{"_index":724,"title":{},"body":{"components/OverlayComponent.html":{}}}],["note",{"_index":886,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["notfoundcomponent",{"_index":106,"title":{"components/NotFoundComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["npmcli/package",{"_index":1131,"title":{},"body":{"dependencies.html":{}}}],["null",{"_index":624,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["num",{"_index":572,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["number",{"_index":217,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["numresults",{"_index":470,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["nv",{"_index":710,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ny",{"_index":718,"title":{},"body":{"components/OverlayComponent.html":{}}}],["object",{"_index":922,"title":{},"body":{"classes/Spell.html":{}}}],["observable",{"_index":159,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"injectables/SpellsService.html":{}}}],["oh",{"_index":728,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ohio",{"_index":727,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ok",{"_index":730,"title":{},"body":{"components/OverlayComponent.html":{}}}],["oklahoma",{"_index":729,"title":{},"body":{"components/OverlayComponent.html":{}}}],["once",{"_index":853,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["onchange",{"_index":1053,"title":{},"body":{"components/StepperComponent.html":{}}}],["onchange(value",{"_index":1062,"title":{},"body":{"components/StepperComponent.html":{}}}],["one",{"_index":1037,"title":{},"body":{"components/StepperComponent.html":{}}}],["oninit",{"_index":127,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["onsubmit",{"_index":620,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ontouch",{"_index":1054,"title":{},"body":{"components/StepperComponent.html":{}}}],["option",{"_index":898,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["option.id",{"_index":899,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["option.name",{"_index":901,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["option.value",{"_index":900,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["optional",{"_index":188,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["order",{"_index":996,"title":{},"body":{"injectables/SpellsService.html":{}}}],["oregon",{"_index":731,"title":{},"body":{"components/OverlayComponent.html":{}}}],["organize",{"_index":1184,"title":{},"body":{"index.html":{}}}],["organizes",{"_index":18,"title":{},"body":{"components/AppComponent.html":{},"components/DieRollResultsTableComponent.html":{}}}],["organizing",{"_index":1169,"title":{},"body":{"index.html":{}}}],["outlet",{"_index":20,"title":{},"body":{"components/AppComponent.html":{}}}],["overlay",{"_index":612,"title":{},"body":{"components/OverlayComponent.html":{}}}],["overlay'},{'name",{"_index":108,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["overlay.component.html",{"_index":614,"title":{},"body":{"components/OverlayComponent.html":{}}}],["overlay.component.scss",{"_index":615,"title":{},"body":{"components/OverlayComponent.html":{}}}],["overlay/overlay.component",{"_index":66,"title":{},"body":{"components/AppComponent.html":{}}}],["overlaycomponent",{"_index":36,"title":{"components/OverlayComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["overview",{"_index":1198,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["pa",{"_index":735,"title":{},"body":{"components/OverlayComponent.html":{}}}],["package",{"_index":1119,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"components/NotFoundComponent.html":{}}}],["pages",{"_index":17,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["paladin",{"_index":375,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["palau",{"_index":732,"title":{},"body":{"components/OverlayComponent.html":{}}}],["param",{"_index":289,"title":{},"body":{"components/AttackRollsComponent.html":{},"injectables/SpellsService.html":{}}}],["parameters",{"_index":187,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["parentcontainer",{"_index":396,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["parentformgroup",{"_index":402,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["parseint(key",{"_index":941,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["pennsylvania",{"_index":734,"title":{},"body":{"components/OverlayComponent.html":{}}}],["percent",{"_index":473,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["percentage",{"_index":485,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{}}}],["percentageresults",{"_index":471,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["percentages",{"_index":894,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["perfect",{"_index":909,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["pipe",{"_index":596,"title":{},"body":{"components/NavbarComponent.html":{}}}],["pipe(map((response",{"_index":1013,"title":{},"body":{"injectables/SpellsService.html":{}}}],["pixel",{"_index":908,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["playing",{"_index":1159,"title":{},"body":{"index.html":{}}}],["possibility",{"_index":1146,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["possible",{"_index":483,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"index.html":{}}}],["postalcode",{"_index":632,"title":{},"body":{"components/OverlayComponent.html":{}}}],["postalcode.value.length",{"_index":783,"title":{},"body":{"components/OverlayComponent.html":{}}}],["pr",{"_index":738,"title":{},"body":{"components/OverlayComponent.html":{}}}],["previous",{"_index":847,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["priority",{"_index":785,"title":{},"body":{"components/OverlayComponent.html":{}}}],["private",{"_index":135,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["proficiency",{"_index":364,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["properly",{"_index":997,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["properties",{"_index":47,"title":{"properties.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"properties.html":{}}}],["protected",{"_index":970,"title":{},"body":{"injectables/SpellsService.html":{}}}],["provide",{"_index":390,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/StepperComponent.html":{}}}],["provideanimationsasync",{"_index":1204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideauth",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providedin",{"_index":1006,"title":{},"body":{"injectables/SpellsService.html":{}}}],["providefirebaseapp",{"_index":1206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providehttpclient",{"_index":1205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":1203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":1042,"title":{},"body":{"components/StepperComponent.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":441,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["puerto",{"_index":736,"title":{},"body":{"components/OverlayComponent.html":{}}}],["pw",{"_index":733,"title":{},"body":{"components/OverlayComponent.html":{}}}],["range:0",{"_index":341,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["ranger",{"_index":376,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["rawspelllist",{"_index":142,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["reactiveformsmodule",{"_index":129,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["read",{"_index":233,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["received",{"_index":318,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["recreated",{"_index":864,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["regardless",{"_index":889,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["registeronchange",{"_index":1055,"title":{},"body":{"components/StepperComponent.html":{}}}],["registeronchange(fn",{"_index":1065,"title":{},"body":{"components/StepperComponent.html":{}}}],["registerontouched",{"_index":1056,"title":{},"body":{"components/StepperComponent.html":{}}}],["registerontouched(fn",{"_index":1068,"title":{},"body":{"components/StepperComponent.html":{}}}],["related",{"_index":1187,"title":{},"body":{"index.html":{}}}],["remove",{"_index":1082,"title":{},"body":{"components/StepperComponent.html":{}}}],["represents",{"_index":559,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["request",{"_index":991,"title":{},"body":{"injectables/SpellsService.html":{}}}],["required",{"_index":408,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{}}}],["response",{"_index":930,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["response.results",{"_index":294,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["response['damage']['damage_at_character_level']['1",{"_index":1022,"title":{},"body":{"injectables/SpellsService.html":{}}}],["response['damage']['damage_at_slot_level",{"_index":1024,"title":{},"body":{"injectables/SpellsService.html":{}}}],["response['heal_at_slot_level",{"_index":1026,"title":{},"body":{"injectables/SpellsService.html":{}}}],["response['level",{"_index":1018,"title":{},"body":{"injectables/SpellsService.html":{}}}],["response['name",{"_index":1016,"title":{},"body":{"injectables/SpellsService.html":{}}}],["response[key",{"_index":943,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["result",{"_index":556,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"index.html":{}}}],["result.matches",{"_index":598,"title":{},"body":{"components/NavbarComponent.html":{}}}],["resulted",{"_index":481,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["results",{"_index":103,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retstring",{"_index":945,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["return",{"_index":290,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["returned",{"_index":954,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["returns",{"_index":170,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["rhode",{"_index":739,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ri",{"_index":741,"title":{},"body":{"components/OverlayComponent.html":{}}}],["rico",{"_index":737,"title":{},"body":{"components/OverlayComponent.html":{}}}],["rogue",{"_index":377,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["roll",{"_index":102,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["rolled",{"_index":487,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["rolling",{"_index":475,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"index.html":{}}}],["rollresult",{"_index":472,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["rolls",{"_index":83,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"index.html":{}}}],["rolls'},{'name",{"_index":93,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["rolls.component",{"_index":70,"title":{},"body":{"components/AppComponent.html":{}}}],["rolls.component.html",{"_index":133,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.scss",{"_index":134,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts",{"_index":116,"title":{},"body":{"components/AttackRollsComponent.html":{},"coverage.html":{},"index.html":{}}}],["rolls.component.ts:105",{"_index":200,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:131",{"_index":197,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:139",{"_index":192,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:146",{"_index":178,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:158",{"_index":156,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:162",{"_index":199,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:33",{"_index":231,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:34",{"_index":225,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:35",{"_index":227,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:36",{"_index":219,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:37",{"_index":229,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:38",{"_index":216,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:44",{"_index":226,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:45",{"_index":222,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:46",{"_index":235,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:47",{"_index":208,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:54",{"_index":157,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:79",{"_index":172,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:98",{"_index":181,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls/attack",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"coverage.html":{}}}],["root",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"injectables/SpellsService.html":{}}}],["root'},{'name",{"_index":92,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["rounded",{"_index":895,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["router",{"_index":19,"title":{},"body":{"components/AppComponent.html":{}}}],["routerlink",{"_index":32,"title":{},"body":{"components/AppComponent.html":{}}}],["routerlinkactive",{"_index":33,"title":{},"body":{"components/AppComponent.html":{}}}],["routermodule",{"_index":35,"title":{},"body":{"components/AppComponent.html":{}}}],["routeroutlet",{"_index":29,"title":{},"body":{"components/AppComponent.html":{}}}],["row",{"_index":555,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["rxjs",{"_index":244,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"injectables/SpellsService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":603,"title":{},"body":{"components/NavbarComponent.html":{}}}],["samoa",{"_index":649,"title":{},"body":{"components/OverlayComponent.html":{}}}],["savageattacker",{"_index":1148,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sc",{"_index":743,"title":{},"body":{"components/OverlayComponent.html":{}}}],["sd",{"_index":744,"title":{},"body":{"components/OverlayComponent.html":{}}}],["search",{"_index":121,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["searching",{"_index":993,"title":{},"body":{"injectables/SpellsService.html":{}}}],["selected",{"_index":165,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selectedspell",{"_index":143,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selectedvalue",{"_index":189,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selectedvalue.name",{"_index":291,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selectedvalue?.url",{"_index":262,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selectedvalueasstring",{"_index":260,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selector",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["separate",{"_index":994,"title":{},"body":{"injectables/SpellsService.html":{}}}],["service",{"_index":958,"title":{},"body":{"injectables/SpellsService.html":{}}}],["services",{"_index":1179,"title":{},"body":{"index.html":{}}}],["set",{"_index":204,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{}}}],["setd10(dicenum",{"_index":431,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["setd12(dicenum",{"_index":435,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["setd4(dicenum",{"_index":418,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["setd6(dicenum",{"_index":423,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["setd8(dicenum",{"_index":427,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["setdamagefromapi",{"_index":920,"title":{},"body":{"classes/Spell.html":{}}}],["setdamagefromapi(response",{"_index":928,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["setdisabledstate",{"_index":1057,"title":{},"body":{"components/StepperComponent.html":{}}}],["setdisabledstate(isdisabled",{"_index":1070,"title":{},"body":{"components/StepperComponent.html":{}}}],["setgroupedspelllist",{"_index":154,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["setting",{"_index":177,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["sharereplay",{"_index":599,"title":{},"body":{"components/NavbarComponent.html":{}}}],["sheet",{"_index":352,"title":{},"body":{"components/CharacterSheetComponent.html":{}}}],["sheet'},{'name",{"_index":96,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["sheet.component.html",{"_index":353,"title":{},"body":{"components/CharacterSheetComponent.html":{}}}],["sheet.component.scss",{"_index":354,"title":{},"body":{"components/CharacterSheetComponent.html":{}}}],["sheet.component.ts",{"_index":351,"title":{},"body":{"components/CharacterSheetComponent.html":{},"coverage.html":{}}}],["sheet/character",{"_index":350,"title":{},"body":{"components/CharacterSheetComponent.html":{},"coverage.html":{}}}],["shipping",{"_index":636,"title":{},"body":{"components/OverlayComponent.html":{}}}],["show",{"_index":185,"title":{},"body":{"components/AttackRollsComponent.html":{},"index.html":{}}}],["shown",{"_index":21,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{}}}],["side",{"_index":14,"title":{},"body":{"components/AppComponent.html":{}}}],["sides",{"_index":1196,"title":{},"body":{"index.html":{}}}],["skill",{"_index":62,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["skillcheckcalc",{"_index":1188,"title":{},"body":{"index.html":{}}}],["skillcheckcomponent",{"_index":34,"title":{"components/SkillCheckComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["skillcheckform",{"_index":810,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["skillchecksubmit",{"_index":813,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["skillchecksuccesschance",{"_index":865,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["skillchecksuccesschance).tostring",{"_index":877,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["skipself",{"_index":394,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["sorcerer",{"_index":378,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["south",{"_index":742,"title":{},"body":{"components/OverlayComponent.html":{}}}],["specific",{"_index":557,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"injectables/SpellsService.html":{}}}],["spell",{"_index":122,"title":{"classes/Spell.html":{}},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"coverage.html":{},"index.html":{}}}],["spell(spellname",{"_index":1019,"title":{},"body":{"injectables/SpellsService.html":{}}}],["spell.damage[minlevel].d10",{"_index":279,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.damage[minlevel].d12",{"_index":281,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.damage[minlevel].d4",{"_index":273,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.damage[minlevel].d6",{"_index":275,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.damage[minlevel].d8",{"_index":277,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.name",{"_index":347,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.name.tolowercase().startswith(spellstring",{"_index":306,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.setdamagefromapi",{"_index":1021,"title":{},"body":{"injectables/SpellsService.html":{}}}],["spell.ts",{"_index":1183,"title":{},"body":{"index.html":{}}}],["spellgroup",{"_index":346,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellgroup.map(spelllist",{"_index":304,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spelli",{"_index":228,"title":{"interfaces/SpellI.html":{}},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"coverage.html":{}}}],["spelllevel",{"_index":176,"title":{},"body":{"components/AttackRollsComponent.html":{},"injectables/SpellsService.html":{}}}],["spelllist.filter(spell",{"_index":305,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spelllist.length",{"_index":308,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellname",{"_index":1015,"title":{},"body":{"injectables/SpellsService.html":{}}}],["spellresponse",{"_index":245,"title":{"interfaces/SpellResponse.html":{}},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["spellresponse.results",{"_index":981,"title":{},"body":{"injectables/SpellsService.html":{}}}],["spellresponseresults",{"_index":180,"title":{"interfaces/SpellResponseResults.html":{}},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["spells",{"_index":962,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["spells.service",{"_index":239,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spells.service.ts",{"_index":1180,"title":{},"body":{"index.html":{}}}],["spellsearchinput",{"_index":299,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellsearchinput?.name",{"_index":300,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellsgroups",{"_index":292,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellslist",{"_index":971,"title":{},"body":{"injectables/SpellsService.html":{}}}],["spellsservice",{"_index":144,"title":{"injectables/SpellsService.html":{}},"body":{"components/AttackRollsComponent.html":{},"injectables/SpellsService.html":{},"coverage.html":{}}}],["spellstring",{"_index":298,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellstring?.tolowercase",{"_index":301,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["src/.../app.config.ts",{"_index":1200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../characterstats.ts",{"_index":1144,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../diceset.ts",{"_index":1143,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../mockspells.ts",{"_index":1201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app.component.ts",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:29",{"_index":58,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":1088,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/attack",{"_index":115,"title":{},"body":{"components/AttackRollsComponent.html":{},"coverage.html":{}}}],["src/app/character",{"_index":349,"title":{},"body":{"components/CharacterSheetComponent.html":{},"coverage.html":{}}}],["src/app/characterstats.ts",{"_index":359,"title":{},"body":{"interfaces/CharacterStats.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/app/dice",{"_index":381,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"coverage.html":{}}}],["src/app/diceset.ts",{"_index":464,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/app/diceset.ts:112",{"_index":535,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:41",{"_index":529,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:42",{"_index":530,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:43",{"_index":531,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:44",{"_index":526,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:45",{"_index":527,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:46",{"_index":528,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:47",{"_index":533,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:48",{"_index":534,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:49",{"_index":525,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:50",{"_index":524,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:51",{"_index":532,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:53",{"_index":536,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:70",{"_index":522,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/die",{"_index":548,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"coverage.html":{}}}],["src/app/dropdown.ts",{"_index":583,"title":{},"body":{"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"coverage.html":{}}}],["src/app/navbar/navbar.component.ts",{"_index":587,"title":{},"body":{"components/NavbarComponent.html":{},"coverage.html":{}}}],["src/app/navbar/navbar.component.ts:27",{"_index":594,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/navbar/navbar.component.ts:29",{"_index":600,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/not",{"_index":605,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["src/app/overlay/overlay.component.ts",{"_index":611,"title":{},"body":{"components/OverlayComponent.html":{},"coverage.html":{}}}],["src/app/overlay/overlay.component.ts:106",{"_index":621,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/overlay/overlay.component.ts:27",{"_index":640,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/overlay/overlay.component.ts:28",{"_index":638,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/overlay/overlay.component.ts:42",{"_index":642,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/overlay/overlay.component.ts:44",{"_index":765,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/skill",{"_index":793,"title":{},"body":{"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["src/app/spell.ts",{"_index":912,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"coverage.html":{}}}],["src/app/spell.ts:17",{"_index":926,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spell.ts:18",{"_index":927,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spell.ts:19",{"_index":925,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spell.ts:20",{"_index":923,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spell.ts:29",{"_index":929,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spell.ts:39",{"_index":931,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spells.service.ts",{"_index":957,"title":{},"body":{"injectables/SpellsService.html":{},"coverage.html":{}}}],["src/app/spells.service.ts:19",{"_index":1001,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:20",{"_index":1004,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:21",{"_index":1002,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:28",{"_index":976,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:39",{"_index":985,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:53",{"_index":988,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:82",{"_index":974,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/stepper/stepper.component.ts",{"_index":1027,"title":{},"body":{"components/StepperComponent.html":{},"coverage.html":{}}}],["src/app/stepper/stepper.component.ts:29",{"_index":1078,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:30",{"_index":1063,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:33",{"_index":1064,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:34",{"_index":1061,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:37",{"_index":1060,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:44",{"_index":1077,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:47",{"_index":1066,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:50",{"_index":1069,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:53",{"_index":1074,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:60",{"_index":1071,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/mocks/mockspells.ts",{"_index":1114,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["standalone",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["started",{"_index":1150,"title":{"index.html":{}},"body":{}}],["startwith",{"_index":242,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["state",{"_index":631,"title":{},"body":{"components/OverlayComponent.html":{}}}],["state.name",{"_index":781,"title":{},"body":{"components/OverlayComponent.html":{}}}],["statements",{"_index":1085,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":619,"title":{},"body":{"components/OverlayComponent.html":{}}}],["stepper",{"_index":111,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["stepper.component.html",{"_index":1049,"title":{},"body":{"components/StepperComponent.html":{}}}],["stepper.component.scss",{"_index":1050,"title":{},"body":{"components/StepperComponent.html":{}}}],["stepper.component.ts",{"_index":1192,"title":{},"body":{"index.html":{}}}],["stepper/stepper.component",{"_index":438,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["steppercomponent",{"_index":110,"title":{"components/StepperComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["store",{"_index":952,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["stored",{"_index":183,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["strength",{"_index":365,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["string",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["styleurl",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["styling",{"_index":1168,"title":{},"body":{"index.html":{}}}],["submit",{"_index":787,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["subscribe",{"_index":264,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["subscribed",{"_index":982,"title":{},"body":{"injectables/SpellsService.html":{}}}],["succeed",{"_index":796,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["success",{"_index":892,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["successelement",{"_index":867,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["successelement.innerhtml",{"_index":876,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["suceed",{"_index":1162,"title":{},"body":{"index.html":{}}}],["suceeeding",{"_index":1191,"title":{},"body":{"index.html":{}}}],["suite",{"_index":778,"title":{},"body":{"components/OverlayComponent.html":{}}}],["supposed",{"_index":493,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["switchmap",{"_index":243,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["switchmap(spellsearchinput",{"_index":297,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["symbol.iterator",{"_index":509,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["table",{"_index":551,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"coverage.html":{}}}],["table'},{'name",{"_index":104,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["table.component",{"_index":254,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["table.component.html",{"_index":565,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["table.component.scss",{"_index":566,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["table.component.ts",{"_index":549,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"coverage.html":{}}}],["table.component.ts:24",{"_index":571,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["table.component.ts:25",{"_index":570,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["table.component.ts:29",{"_index":574,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["table/die",{"_index":253,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["tableinput",{"_index":198,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["tableref",{"_index":136,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1118,"title":{},"body":{"coverage.html":{}}}],["tailwindcss",{"_index":1167,"title":{},"body":{"index.html":{}}}],["target",{"_index":492,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["targetdc",{"_index":837,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["targetdcelement",{"_index":869,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["targetdcelement.innerhtml",{"_index":879,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["technologies",{"_index":1163,"title":{},"body":{"index.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["templateurl",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["tennessee",{"_index":745,"title":{},"body":{"components/OverlayComponent.html":{}}}],["test",{"_index":964,"title":{},"body":{"injectables/SpellsService.html":{}}}],["testautocomplete",{"_index":214,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["texas",{"_index":747,"title":{},"body":{"components/OverlayComponent.html":{}}}],["this.#tableref",{"_index":310,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["this.#tableref?.setinput('diceresults",{"_index":313,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["this.addobservabletoautocomplete",{"_index":335,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.addobservabletoleveldropdown",{"_index":336,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.attackrollsform.get('spell')!.valuechanges.pipe",{"_index":296,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.attackrollsform.get('spell')!.valuechanges.subscribe",{"_index":258,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.attackrollsform.get('spelllevel')!.valuechanges.subscribe",{"_index":282,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.attackrollsform.valuechanges.subscribe(value",{"_index":339,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.breakpointobserver.observe(breakpoints.handset",{"_index":595,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this.createtablecomponent",{"_index":882,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.createtablecomponent(dicerollresults",{"_index":881,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.currentspellrange",{"_index":267,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.currentspellrange[0",{"_index":271,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.d10",{"_index":514,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.d12",{"_index":515,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.d20",{"_index":516,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.d4",{"_index":511,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.d6",{"_index":512,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.d8",{"_index":513,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.damage",{"_index":938,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.damage[1",{"_index":944,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.damage[key]}\\n",{"_index":947,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.damage[parseint(key",{"_index":942,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.dicebonuscomponent.d10",{"_index":278,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicebonuscomponent.d12",{"_index":280,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicebonuscomponent.d4",{"_index":272,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicebonuscomponent.d6",{"_index":274,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicebonuscomponent.d8",{"_index":276,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicecalcservice.dicecalcresults(diceset",{"_index":331,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["this.dicecalcservice.maxroll(diceset).tostring",{"_index":329,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicecalcservice.minroll(diceset).tostring",{"_index":327,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicecalcservice.skillcheckcalc(diceset",{"_index":866,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.dicecalculations.defaultd20rollresults",{"_index":569,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["this.fb.group",{"_index":622,"title":{},"body":{"components/OverlayComponent.html":{}}}],["this.filteredgroupspelllist",{"_index":295,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.generatediceset",{"_index":319,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["this.generatetable(dicecalcresults",{"_index":332,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.generatetable(undefined",{"_index":338,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.http",{"_index":1011,"title":{},"body":{"injectables/SpellsService.html":{}}}],["this.http.get",{"_index":1007,"title":{},"body":{"injectables/SpellsService.html":{}}}],["this.keys",{"_index":510,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.level",{"_index":937,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.name",{"_index":935,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.parentcontainer.control",{"_index":440,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.addcontrol(this.controlkey",{"_index":457,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d10",{"_index":451,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d10')?.setvalue(dicenum",{"_index":453,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d12",{"_index":454,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d12')?.setvalue(dicenum",{"_index":456,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d4",{"_index":442,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d4')?.setvalue(dicenum",{"_index":444,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d6",{"_index":445,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d6')?.setvalue(dicenum",{"_index":447,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d8",{"_index":448,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d8')?.setvalue(dicenum",{"_index":450,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.removecontrol(this.controlkey",{"_index":460,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.rawspelllist",{"_index":333,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell",{"_index":269,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell?.damage[levelnum].d10",{"_index":287,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell?.damage[levelnum].d12",{"_index":288,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell?.damage[levelnum].d4",{"_index":284,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell?.damage[levelnum].d6",{"_index":285,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell?.damage[levelnum].d8",{"_index":286,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.setgroupedspelllist",{"_index":337,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.skillcheckform.value",{"_index":873,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.skillcheckform.value.advantage",{"_index":858,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.skillcheckform.value.attempts",{"_index":860,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.skillcheckform.value.targetdc",{"_index":856,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.skillcheckform.valuechanges.subscribe",{"_index":883,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.skillchecksubmit",{"_index":884,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.spellsservice.getallspells",{"_index":334,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.spellsservice.getspell(selectedvalueasstring",{"_index":263,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.updatevalue(this.value",{"_index":1081,"title":{},"body":{"components/StepperComponent.html":{}}}],["this.url",{"_index":936,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.url.href}/spells?level=${level",{"_index":1009,"title":{},"body":{"injectables/SpellsService.html":{}}}],["this.url.href}/spells?level=0&level=1&level=2&level=3&level=4&level=5&level=6",{"_index":1008,"title":{},"body":{"injectables/SpellsService.html":{}}}],["this.url.origin}${url",{"_index":1012,"title":{},"body":{"injectables/SpellsService.html":{}}}],["this.url}\\n",{"_index":946,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.value",{"_index":1080,"title":{},"body":{"components/StepperComponent.html":{}}}],["this.vcr()?.clear",{"_index":309,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["this.vcr()?.createcomponent(dierollresultstablecomponent",{"_index":311,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["times",{"_index":478,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["title",{"_index":48,"title":{},"body":{"components/AppComponent.html":{}}}],["tn",{"_index":746,"title":{},"body":{"components/OverlayComponent.html":{}}}],["together",{"_index":480,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["toggle",{"_index":844,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["tostring",{"_index":519,"title":{},"body":{"classes/DiceSet.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["total",{"_index":482,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["track",{"_index":344,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["true",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["try",{"_index":1023,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["tslib",{"_index":1135,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":896,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["tx",{"_index":748,"title":{},"body":{"components/OverlayComponent.html":{}}}],["type",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type=\"number",{"_index":1194,"title":{},"body":{"index.html":{}}}],["typedoc",{"_index":1137,"title":{},"body":{"dependencies.html":{}}}],["typeof",{"_index":261,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["types",{"_index":1182,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":949,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["ui",{"_index":554,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["undefined",{"_index":196,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["undefined=undefined",{"_index":862,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["understand",{"_index":1160,"title":{},"body":{"index.html":{}}}],["unit",{"_index":779,"title":{},"body":{"components/OverlayComponent.html":{}}}],["unknown",{"_index":1017,"title":{},"body":{"injectables/SpellsService.html":{}}}],["up",{"_index":186,"title":{},"body":{"components/AttackRollsComponent.html":{},"injectables/SpellsService.html":{}}}],["update",{"_index":174,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["updatevalue",{"_index":1058,"title":{},"body":{"components/StepperComponent.html":{}}}],["updatevalue(newvalue",{"_index":1073,"title":{},"body":{"components/StepperComponent.html":{}}}],["url",{"_index":919,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"miscellaneous/variables.html":{}}}],["url('https://www.dnd5eapi.co/api",{"_index":1003,"title":{},"body":{"injectables/SpellsService.html":{}}}],["use",{"_index":166,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["used",{"_index":206,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["useexisting",{"_index":1044,"title":{},"body":{"components/StepperComponent.html":{}}}],["usefactory",{"_index":392,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["user",{"_index":120,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{}}}],["using",{"_index":552,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["ut",{"_index":750,"title":{},"body":{"components/OverlayComponent.html":{}}}],["utah",{"_index":749,"title":{},"body":{"components/OverlayComponent.html":{}}}],["va",{"_index":756,"title":{},"body":{"components/OverlayComponent.html":{}}}],["validators",{"_index":767,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["validators.compose",{"_index":633,"title":{},"body":{"components/OverlayComponent.html":{}}}],["validators.maxlength(5",{"_index":635,"title":{},"body":{"components/OverlayComponent.html":{}}}],["validators.min(0",{"_index":838,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["validators.min(1",{"_index":841,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["validators.minlength(5",{"_index":634,"title":{},"body":{"components/OverlayComponent.html":{}}}],["validators.required",{"_index":626,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["value",{"_index":53,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":163,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"index.html":{}}}],["var",{"_index":89,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["variable",{"_index":205,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"coverage.html":{}}}],["variables",{"_index":497,"title":{"miscellaneous/variables.html":{}},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"miscellaneous/variables.html":{}}}],["vcr",{"_index":145,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["vermont",{"_index":751,"title":{},"body":{"components/OverlayComponent.html":{}}}],["version",{"_index":913,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"properties.html":{}}}],["vi",{"_index":754,"title":{},"body":{"components/OverlayComponent.html":{}}}],["viewchild",{"_index":237,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["viewchild('dieform",{"_index":221,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["viewchild('tablecontainer",{"_index":232,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["viewchildren",{"_index":238,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["viewcontainerref",{"_index":234,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["viewproviders",{"_index":389,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["virgin",{"_index":753,"title":{},"body":{"components/OverlayComponent.html":{}}}],["virginia",{"_index":755,"title":{},"body":{"components/OverlayComponent.html":{}}}],["visually",{"_index":560,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["void",{"_index":171,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"components/StepperComponent.html":{}}}],["vt",{"_index":752,"title":{},"body":{"components/OverlayComponent.html":{}}}],["wa",{"_index":758,"title":{},"body":{"components/OverlayComponent.html":{}}}],["want",{"_index":1034,"title":{},"body":{"components/StepperComponent.html":{}}}],["warlock",{"_index":379,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["washington",{"_index":757,"title":{},"body":{"components/OverlayComponent.html":{}}}],["webpage",{"_index":1152,"title":{},"body":{"index.html":{}}}],["website",{"_index":1165,"title":{},"body":{"index.html":{}}}],["west",{"_index":759,"title":{},"body":{"components/OverlayComponent.html":{}}}],["whether",{"_index":1145,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["wi",{"_index":762,"title":{},"body":{"components/OverlayComponent.html":{}}}],["wisconsin",{"_index":761,"title":{},"body":{"components/OverlayComponent.html":{}}}],["wisdom",{"_index":366,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["wizard",{"_index":380,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["works",{"_index":355,"title":{},"body":{"components/CharacterSheetComponent.html":{}}}],["writevalue",{"_index":1059,"title":{},"body":{"components/StepperComponent.html":{}}}],["writevalue(value",{"_index":1076,"title":{},"body":{"components/StepperComponent.html":{}}}],["wv",{"_index":760,"title":{},"body":{"components/OverlayComponent.html":{}}}],["www.flaticon.com",{"_index":907,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["wy",{"_index":764,"title":{},"body":{"components/OverlayComponent.html":{}}}],["wyoming",{"_index":763,"title":{},"body":{"components/OverlayComponent.html":{}}}],["yes",{"_index":523,"title":{},"body":{"classes/DiceSet.html":{}}}],["york",{"_index":717,"title":{},"body":{"components/OverlayComponent.html":{}}}],["zone.js",{"_index":1139,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n    \n        Description\n    \n    \n        Home page component -- holds side navbar with links to components of other pages, and organizes router-outlet where the other components are shown\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                                NavbarComponent\n                            CommonModule\n                            RouterLink\n                            RouterLinkActive\n                                SkillCheckComponent\n                            RouterModule\n                                OverlayComponent\n                            MatSidenavModule\n                            MatToolbarModule\n                            MatButtonModule\n                            MatIconModule\n                            MatListModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'angular-bg3-cheats'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterLink, RouterLinkActive, RouterModule, RouterOutlet } from '@angular/router';\nimport { SkillCheckComponent } from \"./skill-check/skill-check.component\";\nimport { NavbarComponent } from \"./navbar/navbar.component\";\nimport { OverlayComponent } from './overlay/overlay.component';\nimport { AttackRollsComponent } from './attack-rolls/attack-rolls.component';\nimport { CommonModule } from '@angular/common';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\n\n/**\n * Home page component -- holds side navbar with links to components of other pages, and organizes router-outlet where the other components are shown\n */\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [\n    RouterOutlet, NavbarComponent, CommonModule, RouterLink, RouterLinkActive,\n    SkillCheckComponent, RouterModule, OverlayComponent, MatSidenavModule,\n    MatToolbarModule, MatButtonModule, MatIconModule, MatListModule\n  ],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss'\n})\nexport class AppComponent {\n  title = 'angular-bg3-cheats';\n}\n\n    \n\n    \n         -->\n -->\n\n  \n    menu\n  \n  Dice Calculator\n\n\n  \n    \n      \n        Skill Check\n      \n      \n        Attack Rolls\n      \n      \n        Documentation\n      \n    \n  \n  \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ' --> -->      menu    Dice Calculator                    Skill Check                    Attack Rolls                    Documentation                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AttackRollsComponent.html":{"url":"components/AttackRollsComponent.html","title":"component - AttackRollsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AttackRollsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/attack-rolls/attack-rolls.component.ts\n\n\n\n    \n        Description\n    \n    \n        This is the component linked to with attack-rolls link in the navbar\nIt allows the user to search a spell and calculate the amount of damage that the spell can do\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-attack-rolls\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            MatInputModule\n                            ReactiveFormsModule\n                            MatSelectModule\n                            MatAutocompleteModule\n                            MatCardModule\n                                DiceBonusFormComponent\n                            MatButtonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./attack-rolls.component.html\n            \n\n\n\n            \n                styleUrl\n                ./attack-rolls.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                #tableRef\n                            \n                            \n                                attackRollsForm\n                            \n                            \n                                currentSpellRange\n                            \n                            \n                                    \n                                diceBonusComponent\n                            \n                            \n                                diceCalcService\n                            \n                            \n                                filteredGroupSpellList\n                            \n                            \n                                rawSpellList$\n                            \n                            \n                                selectedSpell\n                            \n                            \n                                spellsService\n                            \n                            \n                                vcr\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addObservableToAutocomplete\n                            \n                            \n                                addObservableToLevelDropdown\n                            \n                            \n                                attackRollsFormSubmit\n                            \n                            \n                                displaySpellAutocompleteValue\n                            \n                            \n                                generateDiceSet\n                            \n                            \n                                generateTable\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                setGroupedSpellList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:158\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addObservableToAutocomplete\n                        \n                    \n                \n            \n            \n                \naddObservableToAutocomplete()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:54\n                        \n                    \n\n\n            \n                \n                        initialize observable to autocomplete to change form values based on selected spell\n\nuse spell value to change currentSpellRange array (this changes values shown in level selector)\nuse spell value to change diceBonusComponent dice values\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addObservableToLevelDropdown\n                        \n                    \n                \n            \n            \n                \naddObservableToLevelDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:79\n                        \n                    \n\n\n            \n                \n                        The level dropdown observable will update the value of the dicerolls based on the spellLevel setting\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attackRollsFormSubmit\n                        \n                    \n                \n            \n            \n                \nattackRollsFormSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:146\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        displaySpellAutocompleteValue\n                        \n                    \n                \n            \n            \n                \ndisplaySpellAutocompleteValue(selectedValue: SpellResponseResults)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Converts the SpellResponseResults type that the autocomplete values\nare stored as into the spell names that they show up as\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selectedValue\n                                            \n                                                            SpellResponseResults\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    current selected spell value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                spell name or empty string\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateDiceSet\n                        \n                    \n                \n            \n            \n                \ngenerateDiceSet()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:139\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         DiceSetI\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateTable\n                        \n                    \n                \n            \n            \n                \ngenerateTable(tableInput: DiceResults[] | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tableInput\n                                            \n                                                            DiceResults[] | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:162\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setGroupedSpellList\n                        \n                    \n                \n            \n            \n                \nsetGroupedSpellList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:105\n                        \n                    \n\n\n            \n                \n                        Gets spell information from API to set filteredGroupSpellList variable that is used in spell autocomplete\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        #tableRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attackRollsForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    spell: new FormControl(''),\n    spellLevel: new FormControl(this.selectedSpell?.level || 1),\n    testAutocomplete: new FormControl(''),\n    hardCodedAutocomplete: new FormControl('')\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentSpellRange\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Default value : new Array(6)\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        diceBonusComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DiceBonusFormComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('dieForm')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        diceCalcService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DiceCalculationsService\n\n                    \n                \n                \n                    \n                        Default value : inject(DiceCalculationsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filteredGroupSpellList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rawSpellList$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedSpell\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellI | undefined\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        spellsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellsService\n\n                    \n                \n                \n                    \n                        Default value : inject(SpellsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        vcr\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('tableContainer', {read: ViewContainerRef})\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, ComponentRef, inject, OnInit, ViewChild, viewChild, viewChildren, ViewContainerRef } from '@angular/core';\nimport { SpellsService } from '../spells.service';\nimport { forkJoin, map, Observable, startWith, switchMap } from 'rxjs';\nimport { Spell, SpellI, SpellResponse, SpellResponseResults } from '../spell';\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { DiceBonusFormComponent } from '../dice-bonus-form/dice-bonus-form.component';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { DieRollResultsTableComponent } from '../die-roll-results-table/die-roll-results-table.component';\nimport { DiceResults, DiceSet, DiceSetI } from '../diceset';\nimport { DiceCalculationsService } from '../dice-calculations.service';\n\n/**\n * This is the component linked to with attack-rolls link in the navbar\n * It allows the user to search a spell and calculate the amount of damage that the spell can do\n */\n@Component({\n  selector: 'app-attack-rolls',\n  standalone: true,\n  imports: [\n    CommonModule, MatInputModule, ReactiveFormsModule,\n    MatSelectModule, MatAutocompleteModule, MatCardModule,\n    DiceBonusFormComponent, MatButtonModule\n],\n  templateUrl: './attack-rolls.component.html',\n  styleUrl: './attack-rolls.component.scss'\n})\nexport class AttackRollsComponent implements OnInit{\n  spellsService: SpellsService = inject(SpellsService);\n  diceCalcService: DiceCalculationsService = inject(DiceCalculationsService);\n  rawSpellList$!: Observable;\n  currentSpellRange: number[] = new Array(6);\n  selectedSpell: SpellI | undefined = undefined;\n  attackRollsForm = new FormGroup({\n    spell: new FormControl(''),\n    spellLevel: new FormControl(this.selectedSpell?.level || 1),\n    testAutocomplete: new FormControl(''),\n    hardCodedAutocomplete: new FormControl('')\n  });\n  filteredGroupSpellList!: Observable;\n  @ViewChild('dieForm') diceBonusComponent!: DiceBonusFormComponent;\n  vcr = viewChild('tableContainer', {read: ViewContainerRef});\n  #tableRef!: ComponentRef | undefined;\n\n  /**\n   * initialize observable to autocomplete to change form values based on selected spell\n   * 1. use spell value to change currentSpellRange array (this changes values shown in level selector)\n   * 2. use spell value to change diceBonusComponent dice values\n   */\n  addObservableToAutocomplete() {\n    this.attackRollsForm.get('spell')!.valueChanges.subscribe(\n      (selectedValue) => {\n        const selectedValueAsString = typeof selectedValue === 'string' ? '' : selectedValue?.url;\n        this.spellsService.getSpell(selectedValueAsString || '').subscribe(\n          (spell) => {\n            if(spell.level == 0) this.currentSpellRange = [0];\n            else this.currentSpellRange = [...Array(7).keys()].slice(spell.level);\n            this.selectedSpell = spell;\n\n            let minLevel = this.currentSpellRange[0];\n            this.diceBonusComponent.d4 = spell.damage[minLevel].d4 || 0;\n            this.diceBonusComponent.d6 = spell.damage[minLevel].d6 || 0;\n            this.diceBonusComponent.d8 = spell.damage[minLevel].d8 || 0;\n            this.diceBonusComponent.d10 = spell.damage[minLevel].d10 || 0;\n            this.diceBonusComponent.d12 = spell.damage[minLevel].d12 || 0;\n          }\n        )\n      }\n    )\n  }\n\n  /**\n   * The level dropdown observable will update the value of the dicerolls based on the spellLevel setting\n   */\n  addObservableToLevelDropdown() {\n    this.attackRollsForm.get('spellLevel')!.valueChanges.subscribe(\n      (levelNum) => {\n        levelNum = levelNum ?? this.currentSpellRange[0];\n        this.diceBonusComponent.d4 = this.selectedSpell?.damage[levelNum].d4 || 0;\n        this.diceBonusComponent.d6 = this.selectedSpell?.damage[levelNum].d6 || 0;\n        this.diceBonusComponent.d8 = this.selectedSpell?.damage[levelNum].d8 || 0;\n        this.diceBonusComponent.d10 = this.selectedSpell?.damage[levelNum].d10 || 0;\n        this.diceBonusComponent.d12 = this.selectedSpell?.damage[levelNum].d12 || 0;\n      }\n    )\n  }\n\n  /**\n   * Converts the SpellResponseResults type that the autocomplete values\n   * are stored as into the spell names that they show up as\n   * @param selectedValue current selected spell value\n   * @returns spell name or empty string\n   */\n  displaySpellAutocompleteValue(selectedValue: SpellResponseResults): string {\n    return selectedValue && selectedValue.name ? selectedValue.name : '';\n  }\n\n  /**\n   * Gets spell information from API to set filteredGroupSpellList variable that is used in spell autocomplete\n   */\n  setGroupedSpellList() {\n    let spellsGroups: Observable[] = [];\n    for(let i = 0; i  response.results)\n      ))\n    }\n    this.filteredGroupSpellList = this.attackRollsForm.get('spell')!.valueChanges.pipe(\n      startWith(''),\n      switchMap(spellSearchInput => {\n        let spellString = typeof spellSearchInput === 'string' ? spellSearchInput : spellSearchInput?.name;\n        // let spellString = spellSearchInput;\n        spellString = spellString?.toLowerCase() || '';\n        return forkJoin(spellsGroups).pipe(\n          map(spellGroup => \n            spellGroup.map(spellList => \n              spellList.filter(spell =>\n                spell.name.toLowerCase().startsWith(spellString || '')\n              )\n            ).filter(spellList => spellList.length > 0)\n          )\n        )\n      })\n    )\n  }\n\n  generateTable(tableInput: DiceResults[] | undefined) {\n    this.vcr()?.clear();\n    this.#tableRef = this.vcr()?.createComponent(DieRollResultsTableComponent);\n    if(tableInput) {\n      this.#tableRef?.setInput('diceResults', tableInput);\n    }\n  }\n\n  generateDiceSet(): DiceSetI {\n    let dieDict: DiceSetI = new DiceSet(JSON.parse(\n      JSON.stringify(this.attackRollsForm.value))['dieBonuses']);\n    console.log('submit received (attack-rolls)', dieDict);\n    return dieDict;\n  }\n\n  attackRollsFormSubmit() {\n    let diceSet = this.generateDiceSet();\n    // console.log('submit', diceSet);\n    let minElement = document.getElementById('damage-min');\n    let maxElement = document.getElementById('damage-max');\n    if(minElement && maxElement) {\n      minElement.innerText = this.diceCalcService.minRoll(diceSet).toString();\n      maxElement.innerText = this.diceCalcService.maxRoll(diceSet).toString();\n    }\n\n    let diceCalcResults = this.diceCalcService.diceCalcResults(diceSet);\n    this.generateTable(diceCalcResults);\n  }\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.rawSpellList$ = this.spellsService.getAllSpells();\n    this.addObservableToAutocomplete();\n    this.addObservableToLevelDropdown();\n    this.setGroupedSpellList();\n    // this.generateTable(undefined);\n    this.attackRollsForm.valueChanges.subscribe(value => \n      console.log('attack rolls form', value));\n  }\n\n}\n\n    \n\n    \n        \n  \n    \n      Damage Range:0-0\n    \n  \n  \n    \n      \n        \n          Spell\n          \n           -->\n          \n            @for(spellGroup of filteredGroupSpellList | async; track $index) {\n              \n                @for(spell of spellGroup; track $index) {\n                  {{spell.name}}\n                }\n              \n            }\n          \n        \n        \n          Level\n          \n            @for (level of currentSpellRange; track $index) {\n              {{level}}\n            }\n          \n        \n      \n      \n      \n        Calc!\n      \n    \n  \n\n\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Damage Range:0-0                                    Spell                     -->                      @for(spellGroup of filteredGroupSpellList | async; track $index) {                              @for(spell of spellGroup; track $index) {                  {{spell.name}}                }                          }                                    Level                      @for (level of currentSpellRange; track $index) {              {{level}}            }                                            Calc!            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AttackRollsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CharacterSheetComponent.html":{"url":"components/CharacterSheetComponent.html","title":"component - CharacterSheetComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CharacterSheetComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/character-sheet/character-sheet.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-character-sheet\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./character-sheet.component.html\n            \n\n\n\n            \n                styleUrl\n                ./character-sheet.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-character-sheet',\n  standalone: true,\n  imports: [],\n  templateUrl: './character-sheet.component.html',\n  styleUrl: './character-sheet.component.scss'\n})\nexport class CharacterSheetComponent {\n\n}\n\n    \n\n    \n        character-sheet works!\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'character-sheet works!'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CharacterSheetComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CharacterStats.html":{"url":"interfaces/CharacterStats.html","title":"interface - CharacterStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CharacterStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/characterstats.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            charisma\n                                        \n                                \n                                \n                                        \n                                            constitution\n                                        \n                                \n                                \n                                        \n                                            dexterity\n                                        \n                                \n                                \n                                        \n                                            intelligence\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            proficiency\n                                        \n                                \n                                \n                                        \n                                            strength\n                                        \n                                \n                                \n                                        \n                                            wisdom\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        charisma\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        charisma:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        constitution\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        constitution:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dexterity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dexterity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        intelligence\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        intelligence:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        proficiency\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        proficiency:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strength\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        strength:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wisdom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        wisdom:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CharacterStats {\n    strength: number,\n    dexterity: number,\n    constitution: number,\n    intelligence: number,\n    wisdom: number,\n    charisma: number,\n    proficiency: number,\n    level: number\n}\n\n\nexport enum CharacterClass {\n    Barbarian,\n    Bard,\n    Cleric,\n    Druid,\n    Fighter,\n    Monk,\n    Paladin,\n    Ranger,\n    Rogue,\n    Sorcerer,\n    Warlock,\n    Wizard\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DiceBonusFormComponent.html":{"url":"components/DiceBonusFormComponent.html","title":"component - DiceBonusFormComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DiceBonusFormComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dice-bonus-form/dice-bonus-form.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component holds all the dice values that the user is able to set and edit.\nThis component is used on both skill check component and attack rolls component\nThe dice values are added to the form control automatically\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-dice-bonus-form\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            ReactiveFormsModule\n                                StepperComponent\n                            MatCardModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./dice-bonus-form.component.html\n            \n\n            \n                viewProviders\n                \n                    \n                            {\n    provide: ControlContainer, useFactory: () => inject(ControlContainer, { skipSelf: true })\n}\n                    \n                \n            \n\n\n            \n                styleUrl\n                ./dice-bonus-form.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                parentContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                controlKey\n                            \n                            \n                                label\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    parentFormGroup\n                                \n                                \n                                    d4\n                                \n                                \n                                    d6\n                                \n                                \n                                    d8\n                                \n                                \n                                    d10\n                                \n                                \n                                    d12\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        controlKey\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                        \n                            \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Bonus Dice'\n                    \n                \n                        \n                            \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:27\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:86\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:73\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        parentContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ControlContainer)\n                    \n                \n                    \n                        \n                                Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:25\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        parentFormGroup\n                    \n                \n\n                \n                    \n                        getparentFormGroup()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:29\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        d4\n                    \n                \n\n                \n                    \n                        getd4()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:33\n                                \n                            \n\n                \n                    \n                        setd4(diceNum: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:37\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            diceNum\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        d6\n                    \n                \n\n                \n                    \n                        getd6()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:41\n                                \n                            \n\n                \n                    \n                        setd6(diceNum: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:45\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            diceNum\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        d8\n                    \n                \n\n                \n                    \n                        getd8()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:49\n                                \n                            \n\n                \n                    \n                        setd8(diceNum: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:53\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            diceNum\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        d10\n                    \n                \n\n                \n                    \n                        getd10()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:57\n                                \n                            \n\n                \n                    \n                        setd10(diceNum: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:61\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            diceNum\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        d12\n                    \n                \n\n                \n                    \n                        getd12()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:65\n                                \n                            \n\n                \n                    \n                        setd12(diceNum: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:69\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            diceNum\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, inject, Input } from '@angular/core';\nimport { ControlContainer, FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { StepperComponent } from '../stepper/stepper.component';\nimport { MatCardModule } from '@angular/material/card';\n\n/**\n * This component holds all the dice values that the user is able to set and edit.\n * This component is used on both skill check component and attack rolls component\n * The dice values are added to the form control automatically\n */\n@Component({\n  selector: 'app-dice-bonus-form',\n  standalone: true,\n  viewProviders: [\n    {\n      provide: ControlContainer,\n      useFactory: () => inject(ControlContainer, {skipSelf: true})\n    }\n  ],\n  imports: [ReactiveFormsModule, StepperComponent, MatCardModule],\n  templateUrl: './dice-bonus-form.component.html',\n  styleUrl: './dice-bonus-form.component.scss'\n})\nexport class DiceBonusFormComponent {\n  parentContainer = inject(ControlContainer);\n  @Input({required: true}) controlKey = '';\n  @Input() label = 'Bonus Dice';\n\n  get parentFormGroup() {\n    return this.parentContainer.control as FormGroup;\n  }\n\n  public get d4(): FormControl {\n    return this.parentFormGroup.get(this.controlKey)?.get('d4') as FormControl\n  }\n\n  public set d4(diceNum: number) {\n    this.parentFormGroup.get(this.controlKey)?.get('d4')?.setValue(diceNum);\n  }\n\n  public get d6(): FormControl {\n    return this.parentFormGroup.get(this.controlKey)?.get('d6') as FormControl\n  }\n\n  public set d6(diceNum: number) {\n    this.parentFormGroup.get(this.controlKey)?.get('d6')?.setValue(diceNum);\n  }\n\n  public get d8(): FormControl {\n    return this.parentFormGroup.get(this.controlKey)?.get('d8') as FormControl\n  }\n\n  public set d8(diceNum: number) {\n    this.parentFormGroup.get(this.controlKey)?.get('d8')?.setValue(diceNum);\n  }\n  \n  public get d10(): FormControl {\n    return this.parentFormGroup.get(this.controlKey)?.get('d10') as FormControl\n  }\n\n  public set d10(diceNum: number) {\n    this.parentFormGroup.get(this.controlKey)?.get('d10')?.setValue(diceNum);\n  }\n  \n  public get d12(): FormControl {\n    return this.parentFormGroup.get(this.controlKey)?.get('d12') as FormControl\n  }\n\n  public set d12(diceNum: number) {\n    this.parentFormGroup.get(this.controlKey)?.get('d12')?.setValue(diceNum);\n  }\n\n  ngOnInit() {\n    this.parentFormGroup.addControl(this.controlKey,\n      new FormGroup({\n        d4: new FormControl(0),\n        d6: new FormControl(0),\n        d8: new FormControl(0),\n        d10: new FormControl(0),\n        d12: new FormControl(0),\n        modifier: new FormControl(0),\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.parentFormGroup.removeControl(this.controlKey);\n  }\n}\n\n    \n\n    \n        \n  {{label}}\n  \n  d4:\n  \n  \n  d6:\n  \n  \n  d8:\n  \n  \n  d10:\n  \n  \n  d12:\n  \n -->\n\n\n  \n    {{label}}\n    \n      \n       -->\n        &nbsp;d4:\n        \n        \n      \n      \n        &nbsp;d6:\n        \n        \n      \n      \n        &nbsp;d8:\n        \n        \n      \n      \n        d10:\n        \n        \n      \n      \n        d12:\n        \n        \n      \n      \n        modifier:\n        \n      \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  {{label}}    d4:      d6:      d8:      d10:      d12:   -->      {{label}}                 -->         d4:                                     d6:                                     d8:                                    d10:                                    d12:                                    modifier:                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DiceBonusFormComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DiceResults.html":{"url":"interfaces/DiceResults.html","title":"interface - DiceResults","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DiceResults\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/diceset.ts\n        \n\n\n            \n                Description\n            \n            \n                This interface is a data type to hold the number generated from calculating the dice roll results.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cumPercentageResults\n                                        \n                                \n                                \n                                        \n                                            numResults\n                                        \n                                \n                                \n                                        \n                                            percentageResults\n                                        \n                                \n                                \n                                        \n                                            rollResult\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cumPercentageResults\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cumPercentageResults:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the percent chance when rolling a diceset that you would get a rollResult higher than or equal to the current rollResult\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        numResults\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        numResults:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the number of times adding the dice together resulted in the rollResult\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        percentageResults\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        percentageResults:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    number of rolls with rollResult / total number of rolls possible from all the diceRolls. Can also be described as the percentage when rolling a diceset, that you would get rollResult as the roll.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rollResult\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rollResult:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the number created by adding together all the dice rolled in a DiceSetI\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface DiceSetI extends Iterable {\n    d4?: number;\n    d6?: number;\n    d8?: number;\n    d10?: number;\n    d12?: number;\n    d20?: number;\n    modifier: number;\n    /** Used in skill check dice calculations for the target value that the diceset is supposed to be equal */\n    target: number;\n    attempts: number;\n    advantage: Advantage;\n}\n\n/**\n * This interface is a data type to hold the number generated from calculating the dice roll results.\n */\nexport interface DiceResults {\n    /** the number created by adding together all the dice rolled in a DiceSetI */\n    rollResult: number;\n    /** the number of times adding the dice together resulted in the rollResult */\n    numResults: number;\n    /** number of rolls with rollResult / total number of rolls possible from all the diceRolls. Can also be described as the percentage when rolling a diceset, that you would get rollResult as the roll. */\n    percentageResults: number;\n    /** the percent chance when rolling a diceset that you would get a rollResult higher than or equal to the current rollResult */\n    cumPercentageResults: number;\n}\n\n/**\n * DiceSet data type implementation of DiceSetI\n * DiceSet class is used to set default values for variables in DiceSetI\n * DiceSet class is also used to implement iterator used in dice-calculations.serivce.ts\n */\nexport class DiceSet implements DiceSetI {\n    d4!: number;\n    d6!: number;\n    d8!: number;\n    d10!: number;\n    d12!: number;\n    d20!: number;\n    modifier: number = 0;\n    target: number = 0;\n    attempts: number = 1;\n    advantage: Advantage = Advantage.None;\n    private keys = [4, 6, 8, 10, 12, 20];\n\n    [Symbol.iterator](): Iterator {\n        let i = 0;\n        let keys = this.keys;\n        let values = [\n            this.d4 ?? 0, this.d6 ?? 0, this.d8 ?? 0, \n            this.d10 ?? 0, this.d12 ?? 0, this.d20 ?? 0\n        ]\n\n        return {\n            next() {\n                if (i \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DiceSet.html":{"url":"classes/DiceSet.html","title":"class - DiceSet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DiceSet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/diceset.ts\n        \n\n\n            \n                Description\n            \n            \n                DiceSet data type implementation of DiceSetI\nDiceSet class is used to set default values for variables in DiceSetI\nDiceSet class is also used to implement iterator used in dice-calculations.serivce.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                            DiceSetI\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                advantage\n                            \n                            \n                                attempts\n                            \n                            \n                                d10\n                            \n                            \n                                d12\n                            \n                            \n                                d20\n                            \n                            \n                                d4\n                            \n                            \n                                d6\n                            \n                            \n                                d8\n                            \n                            \n                                    Private\n                                keys\n                            \n                            \n                                modifier\n                            \n                            \n                                target\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                            \n                                \n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined, dicestring?: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/diceset.ts:70\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dicestring\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        advantage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Advantage\n\n                    \n                \n                \n                    \n                        Default value : Advantage.None\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attempts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d10\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d12\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d20\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d4\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d6\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d8\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [4, 6, 8, 10, 12, 20]\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        modifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:48\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/diceset.ts:112\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n            \n                \n()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/diceset.ts:53\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Iterator\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export interface DiceSetI extends Iterable {\n    d4?: number;\n    d6?: number;\n    d8?: number;\n    d10?: number;\n    d12?: number;\n    d20?: number;\n    modifier: number;\n    /** Used in skill check dice calculations for the target value that the diceset is supposed to be equal */\n    target: number;\n    attempts: number;\n    advantage: Advantage;\n}\n\n/**\n * This interface is a data type to hold the number generated from calculating the dice roll results.\n */\nexport interface DiceResults {\n    /** the number created by adding together all the dice rolled in a DiceSetI */\n    rollResult: number;\n    /** the number of times adding the dice together resulted in the rollResult */\n    numResults: number;\n    /** number of rolls with rollResult / total number of rolls possible from all the diceRolls. Can also be described as the percentage when rolling a diceset, that you would get rollResult as the roll. */\n    percentageResults: number;\n    /** the percent chance when rolling a diceset that you would get a rollResult higher than or equal to the current rollResult */\n    cumPercentageResults: number;\n}\n\n/**\n * DiceSet data type implementation of DiceSetI\n * DiceSet class is used to set default values for variables in DiceSetI\n * DiceSet class is also used to implement iterator used in dice-calculations.serivce.ts\n */\nexport class DiceSet implements DiceSetI {\n    d4!: number;\n    d6!: number;\n    d8!: number;\n    d10!: number;\n    d12!: number;\n    d20!: number;\n    modifier: number = 0;\n    target: number = 0;\n    attempts: number = 1;\n    advantage: Advantage = Advantage.None;\n    private keys = [4, 6, 8, 10, 12, 20];\n\n    [Symbol.iterator](): Iterator {\n        let i = 0;\n        let keys = this.keys;\n        let values = [\n            this.d4 ?? 0, this.d6 ?? 0, this.d8 ?? 0, \n            this.d10 ?? 0, this.d12 ?? 0, this.d20 ?? 0\n        ]\n\n        return {\n            next() {\n                if (i \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DiceSetI.html":{"url":"interfaces/DiceSetI.html","title":"interface - DiceSetI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DiceSetI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/diceset.ts\n        \n\n\n            \n                Description\n            \n            \n                This interface holds how many dice are rolled for each type of die\nIterable: returns arrays of all the dice values:\n[4, d4num], [6, d6num], [8, d8num], [10, d10num], [12, d12num], [20, d20num]\nThis data type is used in dice-calculations.service.ts where the dice information is used in different calculations.\n\n            \n\n            \n                Extends\n            \n            \n                        Iterable\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            advantage\n                                        \n                                \n                                \n                                        \n                                            attempts\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d10\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d12\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d20\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d4\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d6\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d8\n                                        \n                                \n                                \n                                        \n                                            modifier\n                                        \n                                \n                                \n                                        \n                                            target\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        advantage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        advantage:         Advantage\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Advantage\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        attempts\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        attempts:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d10\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d10:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d12\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d12:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d20\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d20:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d4\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d4:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d6\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d6:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d8\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d8:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        modifier\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        modifier:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        target:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Used in skill check dice calculations for the target value that the diceset is supposed to be equal\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface DiceSetI extends Iterable {\n    d4?: number;\n    d6?: number;\n    d8?: number;\n    d10?: number;\n    d12?: number;\n    d20?: number;\n    modifier: number;\n    /** Used in skill check dice calculations for the target value that the diceset is supposed to be equal */\n    target: number;\n    attempts: number;\n    advantage: Advantage;\n}\n\n/**\n * This interface is a data type to hold the number generated from calculating the dice roll results.\n */\nexport interface DiceResults {\n    /** the number created by adding together all the dice rolled in a DiceSetI */\n    rollResult: number;\n    /** the number of times adding the dice together resulted in the rollResult */\n    numResults: number;\n    /** number of rolls with rollResult / total number of rolls possible from all the diceRolls. Can also be described as the percentage when rolling a diceset, that you would get rollResult as the roll. */\n    percentageResults: number;\n    /** the percent chance when rolling a diceset that you would get a rollResult higher than or equal to the current rollResult */\n    cumPercentageResults: number;\n}\n\n/**\n * DiceSet data type implementation of DiceSetI\n * DiceSet class is used to set default values for variables in DiceSetI\n * DiceSet class is also used to implement iterator used in dice-calculations.serivce.ts\n */\nexport class DiceSet implements DiceSetI {\n    d4!: number;\n    d6!: number;\n    d8!: number;\n    d10!: number;\n    d12!: number;\n    d20!: number;\n    modifier: number = 0;\n    target: number = 0;\n    attempts: number = 1;\n    advantage: Advantage = Advantage.None;\n    private keys = [4, 6, 8, 10, 12, 20];\n\n    [Symbol.iterator](): Iterator {\n        let i = 0;\n        let keys = this.keys;\n        let values = [\n            this.d4 ?? 0, this.d6 ?? 0, this.d8 ?? 0, \n            this.d10 ?? 0, this.d12 ?? 0, this.d20 ?? 0\n        ]\n\n        return {\n            next() {\n                if (i \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DieRollResultsTableComponent.html":{"url":"components/DieRollResultsTableComponent.html","title":"component - DieRollResultsTableComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DieRollResultsTableComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/die-roll-results-table/die-roll-results-table.component.ts\n\n\n\n    \n        Description\n    \n    \n        This creates a table using Material UI that organizes information from dice-calculations.service.ts.\nEach row of the table has the possible roll value from rolling the diceset,\nthe number of possible rolls that result in said roll value,\nthe percentage chance of rolling higher than that specific roll,\nthe percentage chance of rolling that specific roll,\nand a bar that represents how rolling that specific roll visually looks.\nThis component appears on both skill-check and attack-rolls forms.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-die-roll-results-table\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            MatTableModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./die-roll-results-table.component.html\n            \n\n\n\n            \n                styleUrl\n                ./die-roll-results-table.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                diceCalculations\n                            \n                            \n                                displayedColumns\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                diceResults\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        diceResults\n                    \n                \n                \n                    \n                        Type :         DiceResults[]\n\n                    \n                \n                \n                    \n                        Default value : this.diceCalculations.defaultD20RollResults()\n                    \n                \n                        \n                            \n                                    Defined in src/app/die-roll-results-table/die-roll-results-table.component.ts:25\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        diceCalculations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DiceCalculationsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/die-roll-results-table/die-roll-results-table.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        displayedColumns\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    'roll-result', 'num-result', 'percentage-cum-result', 'percentage-result'\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/die-roll-results-table/die-roll-results-table.component.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject, Input } from '@angular/core';\nimport { MatTableModule } from '@angular/material/table';\nimport { DiceResults } from '../diceset';\nimport { CommonModule } from '@angular/common';\nimport { DiceCalculationsService } from '../dice-calculations.service';\n\n/**\n * This creates a table using Material UI that organizes information from dice-calculations.service.ts.\n * Each row of the table has the possible roll value from rolling the diceset,\n * the number of possible rolls that result in said roll value,\n * the percentage chance of rolling higher than that specific roll,\n * the percentage chance of rolling that specific roll,\n * and a bar that represents how rolling that specific roll visually looks.\n * This component appears on both skill-check and attack-rolls forms.\n */\n@Component({\n  selector: 'app-die-roll-results-table',\n  standalone: true,\n  imports: [CommonModule, MatTableModule],\n  templateUrl: './die-roll-results-table.component.html',\n  styleUrl: './die-roll-results-table.component.scss'\n})\nexport class DieRollResultsTableComponent {\n  diceCalculations = inject(DiceCalculationsService);\n  @Input() diceResults: DiceResults[] = this.diceCalculations.defaultD20RollResults();\n  // displayedColumns = [\n  //   'roll-result', 'num-result', 'percentage-result', 'percentage-block'\n  // ];\n  displayedColumns = [\n    'roll-result', 'num-result', 'percentage-cum-result', 'percentage-result'\n  ];\n}\n\n    \n\n    \n        \n  \n    Roll\n    {{element.rollResult}}\n  \n  \n    #\n    {{element.numResults}}\n  \n  \n    % cum\n    \n      {{element.cumPercentageResults}}%\n    \n  \n  \n    %\n    \n      {{element.percentageResults}}%\n      \n      \n        &nbsp;\n      \n    \n  \n  \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Roll    {{element.rollResult}}        #    {{element.numResults}}        % cum          {{element.cumPercentageResults}}%            %          {{element.percentageResults}}%                                     '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DieRollResultsTableComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropdownGroup.html":{"url":"interfaces/DropdownGroup.html","title":"interface - DropdownGroup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DropdownGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/dropdown.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            group\n                                        \n                                \n                                \n                                        \n                                            groupName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        group\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        group:         DropdownItem[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DropdownItem[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        groupName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        groupName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface DropdownGroup {\n    groupName: string;\n    group: DropdownItem[];\n}\nexport interface DropdownItem {\n    label: string;\n    value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropdownItem.html":{"url":"interfaces/DropdownItem.html","title":"interface - DropdownItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DropdownItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/dropdown.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface DropdownGroup {\n    groupName: string;\n    group: DropdownItem[];\n}\nexport interface DropdownItem {\n    label: string;\n    value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavbarComponent.html":{"url":"components/NavbarComponent.html","title":"component - NavbarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NavbarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/navbar/navbar.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-navbar\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatToolbarModule\n                            MatButtonModule\n                            MatSidenavModule\n                            MatListModule\n                            MatIconModule\n                            AsyncPipe\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./navbar.component.html\n            \n\n\n\n            \n                styleUrl\n                ./navbar.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                breakpointObserver\n                            \n                            \n                                isHandset$\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        breakpointObserver\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(BreakpointObserver)\n                    \n                \n                    \n                        \n                                Defined in src/app/navbar/navbar.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isHandset$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    )\n                    \n                \n                    \n                        \n                                Defined in src/app/navbar/navbar.component.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { AsyncPipe } from '@angular/common';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrl: './navbar.component.scss',\n  standalone: true,\n  imports: [\n    MatToolbarModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatListModule,\n    MatIconModule,\n    AsyncPipe,\n  ]\n})\nexport class NavbarComponent {\n  private breakpointObserver = inject(BreakpointObserver);\n\n  isHandset$: Observable = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    );\n}\n\n    \n\n    \n        \n  \n    Menu\n    \n      Link 1\n      Link 2\n      Link 3\n    \n  \n  \n    \n      @if (isHandset$ | async) {\n        \n          menu\n        \n      }\n      angular-bg3-cheats\n    \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Menu          Link 1      Link 2      Link 3                  @if (isHandset$ | async) {                  menu              }      angular-bg3-cheats          '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NavbarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NotFoundComponent.html":{"url":"components/NotFoundComponent.html","title":"component - NotFoundComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NotFoundComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/not-found/not-found.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-not-found\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./not-found.component.html\n            \n\n\n\n            \n                styleUrl\n                ./not-found.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  standalone: true,\n  imports: [],\n  templateUrl: './not-found.component.html',\n  styleUrl: './not-found.component.scss'\n})\nexport class NotFoundComponent {\n\n}\n\n    \n\n    \n        page not found\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'page not found'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NotFoundComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OverlayComponent.html":{"url":"components/OverlayComponent.html","title":"component - OverlayComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  OverlayComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/overlay/overlay.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-overlay\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatInputModule\n                            MatButtonModule\n                            MatSelectModule\n                            MatRadioModule\n                            MatCardModule\n                            ReactiveFormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./overlay.component.html\n            \n\n\n\n            \n                styleUrl\n                ./overlay.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                addressForm\n                            \n                            \n                                    Private\n                                fb\n                            \n                            \n                                hasUnitNumber\n                            \n                            \n                                states\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/overlay/overlay.component.ts:106\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        addressForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.fb.group({\n    company: null,\n    firstName: [null, Validators.required],\n    lastName: [null, Validators.required],\n    address: [null, Validators.required],\n    address2: null,\n    city: [null, Validators.required],\n    state: [null, Validators.required],\n    postalCode: [null, Validators.compose([\n      Validators.required, Validators.minLength(5), Validators.maxLength(5)])\n    ],\n    shipping: ['free', Validators.required]\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/overlay/overlay.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fb\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(FormBuilder)\n                    \n                \n                    \n                        \n                                Defined in src/app/overlay/overlay.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasUnitNumber\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/overlay/overlay.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        states\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {name: 'Alabama', abbreviation: 'AL'},\n    {name: 'Alaska', abbreviation: 'AK'},\n    {name: 'American Samoa', abbreviation: 'AS'},\n    {name: 'Arizona', abbreviation: 'AZ'},\n    {name: 'Arkansas', abbreviation: 'AR'},\n    {name: 'California', abbreviation: 'CA'},\n    {name: 'Colorado', abbreviation: 'CO'},\n    {name: 'Connecticut', abbreviation: 'CT'},\n    {name: 'Delaware', abbreviation: 'DE'},\n    {name: 'District Of Columbia', abbreviation: 'DC'},\n    {name: 'Federated States Of Micronesia', abbreviation: 'FM'},\n    {name: 'Florida', abbreviation: 'FL'},\n    {name: 'Georgia', abbreviation: 'GA'},\n    {name: 'Guam', abbreviation: 'GU'},\n    {name: 'Hawaii', abbreviation: 'HI'},\n    {name: 'Idaho', abbreviation: 'ID'},\n    {name: 'Illinois', abbreviation: 'IL'},\n    {name: 'Indiana', abbreviation: 'IN'},\n    {name: 'Iowa', abbreviation: 'IA'},\n    {name: 'Kansas', abbreviation: 'KS'},\n    {name: 'Kentucky', abbreviation: 'KY'},\n    {name: 'Louisiana', abbreviation: 'LA'},\n    {name: 'Maine', abbreviation: 'ME'},\n    {name: 'Marshall Islands', abbreviation: 'MH'},\n    {name: 'Maryland', abbreviation: 'MD'},\n    {name: 'Massachusetts', abbreviation: 'MA'},\n    {name: 'Michigan', abbreviation: 'MI'},\n    {name: 'Minnesota', abbreviation: 'MN'},\n    {name: 'Mississippi', abbreviation: 'MS'},\n    {name: 'Missouri', abbreviation: 'MO'},\n    {name: 'Montana', abbreviation: 'MT'},\n    {name: 'Nebraska', abbreviation: 'NE'},\n    {name: 'Nevada', abbreviation: 'NV'},\n    {name: 'New Hampshire', abbreviation: 'NH'},\n    {name: 'New Jersey', abbreviation: 'NJ'},\n    {name: 'New Mexico', abbreviation: 'NM'},\n    {name: 'New York', abbreviation: 'NY'},\n    {name: 'North Carolina', abbreviation: 'NC'},\n    {name: 'North Dakota', abbreviation: 'ND'},\n    {name: 'Northern Mariana Islands', abbreviation: 'MP'},\n    {name: 'Ohio', abbreviation: 'OH'},\n    {name: 'Oklahoma', abbreviation: 'OK'},\n    {name: 'Oregon', abbreviation: 'OR'},\n    {name: 'Palau', abbreviation: 'PW'},\n    {name: 'Pennsylvania', abbreviation: 'PA'},\n    {name: 'Puerto Rico', abbreviation: 'PR'},\n    {name: 'Rhode Island', abbreviation: 'RI'},\n    {name: 'South Carolina', abbreviation: 'SC'},\n    {name: 'South Dakota', abbreviation: 'SD'},\n    {name: 'Tennessee', abbreviation: 'TN'},\n    {name: 'Texas', abbreviation: 'TX'},\n    {name: 'Utah', abbreviation: 'UT'},\n    {name: 'Vermont', abbreviation: 'VT'},\n    {name: 'Virgin Islands', abbreviation: 'VI'},\n    {name: 'Virginia', abbreviation: 'VA'},\n    {name: 'Washington', abbreviation: 'WA'},\n    {name: 'West Virginia', abbreviation: 'WV'},\n    {name: 'Wisconsin', abbreviation: 'WI'},\n    {name: 'Wyoming', abbreviation: 'WY'}\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/overlay/overlay.component.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\n\nimport { ReactiveFormsModule, FormBuilder, Validators } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatCardModule } from '@angular/material/card';\n\n\n@Component({\n  selector: 'app-overlay',\n  templateUrl: './overlay.component.html',\n  styleUrl: './overlay.component.scss',\n  standalone: true,\n  imports: [\n    MatInputModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatCardModule,\n    ReactiveFormsModule\n  ]\n})\nexport class OverlayComponent {\n  private fb = inject(FormBuilder);\n  addressForm = this.fb.group({\n    company: null,\n    firstName: [null, Validators.required],\n    lastName: [null, Validators.required],\n    address: [null, Validators.required],\n    address2: null,\n    city: [null, Validators.required],\n    state: [null, Validators.required],\n    postalCode: [null, Validators.compose([\n      Validators.required, Validators.minLength(5), Validators.maxLength(5)])\n    ],\n    shipping: ['free', Validators.required]\n  });\n\n  hasUnitNumber = false;\n\n  states = [\n    {name: 'Alabama', abbreviation: 'AL'},\n    {name: 'Alaska', abbreviation: 'AK'},\n    {name: 'American Samoa', abbreviation: 'AS'},\n    {name: 'Arizona', abbreviation: 'AZ'},\n    {name: 'Arkansas', abbreviation: 'AR'},\n    {name: 'California', abbreviation: 'CA'},\n    {name: 'Colorado', abbreviation: 'CO'},\n    {name: 'Connecticut', abbreviation: 'CT'},\n    {name: 'Delaware', abbreviation: 'DE'},\n    {name: 'District Of Columbia', abbreviation: 'DC'},\n    {name: 'Federated States Of Micronesia', abbreviation: 'FM'},\n    {name: 'Florida', abbreviation: 'FL'},\n    {name: 'Georgia', abbreviation: 'GA'},\n    {name: 'Guam', abbreviation: 'GU'},\n    {name: 'Hawaii', abbreviation: 'HI'},\n    {name: 'Idaho', abbreviation: 'ID'},\n    {name: 'Illinois', abbreviation: 'IL'},\n    {name: 'Indiana', abbreviation: 'IN'},\n    {name: 'Iowa', abbreviation: 'IA'},\n    {name: 'Kansas', abbreviation: 'KS'},\n    {name: 'Kentucky', abbreviation: 'KY'},\n    {name: 'Louisiana', abbreviation: 'LA'},\n    {name: 'Maine', abbreviation: 'ME'},\n    {name: 'Marshall Islands', abbreviation: 'MH'},\n    {name: 'Maryland', abbreviation: 'MD'},\n    {name: 'Massachusetts', abbreviation: 'MA'},\n    {name: 'Michigan', abbreviation: 'MI'},\n    {name: 'Minnesota', abbreviation: 'MN'},\n    {name: 'Mississippi', abbreviation: 'MS'},\n    {name: 'Missouri', abbreviation: 'MO'},\n    {name: 'Montana', abbreviation: 'MT'},\n    {name: 'Nebraska', abbreviation: 'NE'},\n    {name: 'Nevada', abbreviation: 'NV'},\n    {name: 'New Hampshire', abbreviation: 'NH'},\n    {name: 'New Jersey', abbreviation: 'NJ'},\n    {name: 'New Mexico', abbreviation: 'NM'},\n    {name: 'New York', abbreviation: 'NY'},\n    {name: 'North Carolina', abbreviation: 'NC'},\n    {name: 'North Dakota', abbreviation: 'ND'},\n    {name: 'Northern Mariana Islands', abbreviation: 'MP'},\n    {name: 'Ohio', abbreviation: 'OH'},\n    {name: 'Oklahoma', abbreviation: 'OK'},\n    {name: 'Oregon', abbreviation: 'OR'},\n    {name: 'Palau', abbreviation: 'PW'},\n    {name: 'Pennsylvania', abbreviation: 'PA'},\n    {name: 'Puerto Rico', abbreviation: 'PR'},\n    {name: 'Rhode Island', abbreviation: 'RI'},\n    {name: 'South Carolina', abbreviation: 'SC'},\n    {name: 'South Dakota', abbreviation: 'SD'},\n    {name: 'Tennessee', abbreviation: 'TN'},\n    {name: 'Texas', abbreviation: 'TX'},\n    {name: 'Utah', abbreviation: 'UT'},\n    {name: 'Vermont', abbreviation: 'VT'},\n    {name: 'Virgin Islands', abbreviation: 'VI'},\n    {name: 'Virginia', abbreviation: 'VA'},\n    {name: 'Washington', abbreviation: 'WA'},\n    {name: 'West Virginia', abbreviation: 'WV'},\n    {name: 'Wisconsin', abbreviation: 'WI'},\n    {name: 'Wyoming', abbreviation: 'WY'}\n  ];\n\n  onSubmit(): void {\n    alert('Thanks!');\n  }\n}\n\n    \n\n    \n        \n\n  \n    \n      Shipping Information\n    \n    \n      \n        \n          \n            \n          \n        \n      \n      \n        \n          \n            \n            @if (addressForm.controls['firstName'].hasError('required')) {\n              First name is required\n            }\n          \n        \n        \n          \n            \n            @if (addressForm.controls['lastName'].hasError('required')) {\n              Last name is required\n            }\n          \n        \n      \n      \n        \n          \n            \n            @if (addressForm.controls['address'].hasError('required')) {\n              Address is required\n            }\n          \n        \n      \n      \n        \n          @if (hasUnitNumber) {\n            \n              \n            \n          } @else {\n            \n              + Add C/O, Apt, Suite, Unit\n            \n          }\n        \n      \n      \n        \n          \n            \n            @if (addressForm.controls['city'].hasError('required')) {\n              City is required\n            }\n          \n        \n        \n          \n            \n              @for (state of states; track state) {\n                {{ state.name }}\n              }\n            \n            @if (addressForm.controls['state'].hasError('required')) {\n              State is required\n            }\n          \n        \n      \n      \n        \n          \n            \n            {{postalCode.value.length}} / 5\n          \n        \n      \n      \n        \n          \n            Free Shipping\n            Priority Shipping\n            Next Day Shipping\n          \n        \n      \n    \n    \n      Submit\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Shipping Information                                                                                                                    @if (addressForm.controls[\\'firstName\\'].hasError(\\'required\\')) {              First name is required            }                                                            @if (addressForm.controls[\\'lastName\\'].hasError(\\'required\\')) {              Last name is required            }                                                                        @if (addressForm.controls[\\'address\\'].hasError(\\'required\\')) {              Address is required            }                                                @if (hasUnitNumber) {                                                } @else {                          + Add C/O, Apt, Suite, Unit                      }                                                              @if (addressForm.controls[\\'city\\'].hasError(\\'required\\')) {              City is required            }                                                              @for (state of states; track state) {                {{ state.name }}              }                        @if (addressForm.controls[\\'state\\'].hasError(\\'required\\')) {              State is required            }                                                                        {{postalCode.value.length}} / 5                                                            Free Shipping            Priority Shipping            Next Day Shipping                                      Submit      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'OverlayComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SkillCheckComponent.html":{"url":"components/SkillCheckComponent.html","title":"component - SkillCheckComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SkillCheckComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/skill-check/skill-check.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component allows for the checking of how likely a skill check is to succeed.\nIt generates a frontend to display results from dice calculations, and a form for the user to input their dice calc information\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-skill-check\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            ReactiveFormsModule\n                            CommonModule\n                            MatCardModule\n                            MatSelectModule\n                                DiceBonusFormComponent\n                            MatButtonModule\n                            MatButtonToggleModule\n                            MatInputModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./skill-check.component.html\n            \n\n\n\n            \n                styleUrl\n                ./skill-check.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                #tableRef\n                            \n                            \n                                advantageAdvantage\n                            \n                            \n                                advantageDisadvantage\n                            \n                            \n                                advantageEnum\n                            \n                            \n                                advantageNone\n                            \n                            \n                                advantageOptions\n                            \n                            \n                                attemptsOptions\n                            \n                            \n                                diceCalcService\n                            \n                            \n                                dieBonusForm\n                            \n                            \n                                skillCheckForm\n                            \n                            \n                                vcr\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTableComponent\n                            \n                            \n                                generateDiceSet\n                            \n                            \n                                isAdvantageNone\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                skillCheckSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/skill-check/skill-check.component.ts:110\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createTableComponent\n                        \n                    \n                \n            \n            \n                \ncreateTableComponent(tableInput: DiceResults[] | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/skill-check/skill-check.component.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                tableInput\n                                            \n                                                            DiceResults[] | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    undefined\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateDiceSet\n                        \n                    \n                \n            \n            \n                \ngenerateDiceSet()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/skill-check/skill-check.component.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         DiceSetI\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isAdvantageNone\n                        \n                    \n                \n            \n            \n                \nisAdvantageNone(currentAdvantageValue: Advantage)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/skill-check/skill-check.component.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                currentAdvantageValue\n                                            \n                                                            Advantage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/skill-check/skill-check.component.ts:105\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skillCheckSubmit\n                        \n                    \n                \n            \n            \n                \nskillCheckSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/skill-check/skill-check.component.ts:88\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        #tableRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        advantageAdvantage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Advantage.Advantage\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        advantageDisadvantage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Advantage.Disadvantage\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        advantageEnum\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Advantage\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        advantageNone\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Advantage.None\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        advantageOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {id: 1, name: 'None', value: Advantage.None},\n    {id: 2, name: 'Advantage', value: Advantage.Advantage},\n    {id: 3, name: 'Disadvantage', value: Advantage.Disadvantage},\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attemptsOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [1, 2, 3, 4]\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        diceCalcService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DiceCalculationsService\n\n                    \n                \n                \n                    \n                        Default value : inject(DiceCalculationsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dieBonusForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    ' d4': new FormControl(0),\n    ' d6': new FormControl(0),\n    ' d8': new FormControl(0),\n    'd10': new FormControl(0),\n    'd12': new FormControl(0),\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skillCheckForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    targetDC: new FormControl(0, [\n      Validators.required,\n      Validators.min(0)\n    ]),\n    advantage: new FormControl(Advantage.None),\n    attempts: new FormControl(1, [\n      Validators.required,\n      Validators.min(1)\n    ])\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        vcr\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('tableContainer', {read: ViewContainerRef})\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, ComponentRef, inject, OnInit, viewChild, ViewContainerRef } from '@angular/core';\nimport { FormControl, ReactiveFormsModule, FormGroup, Validators } from '@angular/forms';\nimport { DiceSet, DiceSetI, Advantage, DiceResults } from '../diceset';\nimport { DiceCalculationsService } from '../dice-calculations.service';\nimport { DiceBonusFormComponent } from '../dice-bonus-form/dice-bonus-form.component';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle'\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { DieRollResultsTableComponent } from '../die-roll-results-table/die-roll-results-table.component';\n\n/**\n * This component allows for the checking of how likely a skill check is to succeed.\n * It generates a frontend to display results from dice calculations, and a form for the user to input their dice calc information\n */\n@Component({\n  selector: 'app-skill-check',\n  standalone: true,\n  imports: [\n    ReactiveFormsModule, CommonModule, MatCardModule, MatSelectModule,\n    DiceBonusFormComponent, MatButtonModule,\n    MatButtonToggleModule, MatInputModule\n  ],\n  templateUrl: './skill-check.component.html',\n  styleUrl: './skill-check.component.scss'\n})\nexport class SkillCheckComponent implements OnInit {\n  diceCalcService: DiceCalculationsService = inject(DiceCalculationsService);\n  vcr = viewChild('tableContainer', {read: ViewContainerRef});\n  #tableRef!: ComponentRef | undefined;\n  skillCheckForm = new FormGroup({\n    targetDC: new FormControl(0, [\n      Validators.required,\n      Validators.min(0)\n    ]),\n    advantage: new FormControl(Advantage.None),\n    attempts: new FormControl(1, [\n      Validators.required,\n      Validators.min(1)\n    ])\n  });\n  dieBonusForm = new FormGroup({\n    ' d4': new FormControl(0),\n    ' d6': new FormControl(0),\n    ' d8': new FormControl(0),\n    'd10': new FormControl(0),\n    'd12': new FormControl(0),\n  });\n  // diceSet!: DiceSet;\n  advantageEnum: typeof Advantage = Advantage;\n  advantageNone = Advantage.None;\n  advantageAdvantage = Advantage.Advantage\n  advantageDisadvantage = Advantage.Disadvantage;\n  advantageOptions = [\n    {id: 1, name: 'None', value: Advantage.None},\n    {id: 2, name: 'Advantage', value: Advantage.Advantage},\n    {id: 3, name: 'Disadvantage', value: Advantage.Disadvantage},\n  ];\n  attemptsOptions = [1, 2, 3, 4];\n\n  isAdvantageNone(currentAdvantageValue: Advantage) {\n    return currentAdvantageValue === Advantage.None;\n  }\n\n  generateDiceSet(): DiceSetI {\n    let dieDict = JSON.parse(\n      JSON.stringify(this.skillCheckForm.value))['dieBonuses'];\n    // previous line converts diebonuses form group into dict,\n    // this allows easy construction of new DiceSet once other parameters are set\n    dieDict['d20'] = 1;\n    dieDict['target'] = this.skillCheckForm.value.targetDC ?? 0;\n    dieDict['advantage'] = this.skillCheckForm.value.advantage ?? Advantage.None;\n    dieDict['attempts'] = this.skillCheckForm.value.attempts ?? 1;\n    return new DiceSet(dieDict);\n  }\n\n  createTableComponent(tableInput: DiceResults[] | undefined=undefined) {\n    this.vcr()?.clear();\n    this.#tableRef = this.vcr()?.createComponent(DieRollResultsTableComponent);\n    if(tableInput) {\n      console.log('table recreated');\n      this.#tableRef?.setInput('diceResults', tableInput);\n    }\n  }\n\n  skillCheckSubmit() {\n    let diceset = this.generateDiceSet();\n    let skillCheckSuccessChance = this.diceCalcService.skillCheckCalc(diceset);\n    let successElement = document.getElementById('success-chance');\n    let targetDCElement = document.getElementById('target-dc-value');\n    let diceRollResults = this.diceCalcService.diceCalcResults(diceset);\n    console.log('skill check submit', this.skillCheckForm.value);\n    if(successElement !== null) {\n      console.log(skillCheckSuccessChance);\n      successElement.innerHTML = (skillCheckSuccessChance).toString();\n    }\n    if(targetDCElement !== null) {\n      targetDCElement.innerHTML = diceset.target.toString();\n    }\n    this.createTableComponent(diceRollResults);\n  }\n\n  ngOnInit(): void {\n    this.createTableComponent();\n    this.skillCheckForm.valueChanges.subscribe(\n      () => this.skillCheckSubmit()\n    );\n  }\n\n  constructor() {}\n}\n\n    \n\n    \n        \n  \n    \n      95% chance to succeed with target DC 0\n    \n    \n      Note: 100% and 0% are impossible since regardless of DC, a natural 20 is an automatic success, and a natural 1 is an automatic fail. Percentages are rounded to two decimals.\n    \n  \n  \n    \n      \n        \n          Target DC\n          \n        \n      \n      \n        \n        @for (option of advantageOptions; track option.id) {\n          @if (option.value == '0') {\n            \n              {{option.name}}\n            \n          } @else {\n            \n              {{option.name}}\n            \n          }\n        }\n        \n      \n      \n        \n          Attempts\n          \n            @for(item of attemptsOptions; track $index) {\n              {{item}}\n            }\n          \n        \n      \n    \n    \n    \n      Calc!\n    \n  \n\n\n\n\n\n  Icons made by Freepik from www.flaticon.com\n  Icons made by Pixel perfect from\n    www.flaticon.com\n  Icons made by Nadiinko from www.flaticon.com\n  Icons made by Flowicon from www.flaticon.com\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            95% chance to succeed with target DC 0              Note: 100% and 0% are impossible since regardless of DC, a natural 20 is an automatic success, and a natural 1 is an automatic fail. Percentages are rounded to two decimals.                                    Target DC                                              @for (option of advantageOptions; track option.id) {          @if (option.value == \\'0\\') {                          {{option.name}}                      } @else {                          {{option.name}}                      }        }                                      Attempts                      @for(item of attemptsOptions; track $index) {              {{item}}            }                                          Calc!        Icons made by Freepik from www.flaticon.com  Icons made by Pixel perfect from    www.flaticon.com  Icons made by Nadiinko from www.flaticon.com  Icons made by Flowicon from www.flaticon.com'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SkillCheckComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Spell.html":{"url":"classes/Spell.html","title":"class - Spell","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Spell\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/spell.ts\n        \n\n\n            \n                Description\n            \n            \n                The data type version of SpellI, which has additional functions to allow easier setting of values from DnD API\n\n            \n\n\n            \n                Implements\n            \n            \n                            SpellI\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                damage\n                            \n                            \n                                level\n                            \n                            \n                                name\n                            \n                            \n                                url\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setDamageFromAPI\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, url: string, level: number, damage: object)\n                    \n                \n                        \n                            \n                                Defined in src/app/spell.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        level\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        damage\n                                                  \n                                                        \n                                                                        object\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        damage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/app/spell.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/spell.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/spell.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/spell.ts:18\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setDamageFromAPI\n                        \n                    \n                \n            \n            \n                \nsetDamageFromAPI(response: literal type, modifier: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/spell.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                modifier\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/spell.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DiceSetI, DiceSet } from \"./diceset\";\n\n/**\n * Interface used to hold all necessary information about each spell\n */\nexport interface SpellI {\n    name: string\n    url: string\n    level: number\n    damage: { [level: number]: DiceSetI }\n}\n\n/**\n * The data type version of SpellI, which has additional functions to allow easier setting of values from DnD API\n */\nexport class Spell implements SpellI {\n    name: string;\n    url: string;\n    level: number;\n    damage: { [level: number]: DiceSetI; };\n    \n    constructor(name='', url='', level=1, damage={0: new DiceSet({})}) {\n        this.name = name;\n        this.url = url;\n        this.level = level;\n        this.damage = damage;\n    }\n\n    setDamageFromAPI(response: {[level: string]: string}, modifier: number) {\n        for(let key in response) {\n            console.log('damage from api', parseInt(key), response);\n            this.damage[parseInt(key)] = new DiceSet(\n                {modifier: modifier}, response[key]\n            );\n            console.log('damage variable', this.damage[1]);\n        }\n    }\n\n    toString(): string {\n        let retString = `name: ${this.name}, url: ${this.url}\\n`;\n        retString += `damage: `\n        for(let key in this.damage) {\n            retString += `{${key}: ${this.damage[key]}\\n`\n        }\n        return retString;\n    }\n\n}\n\n/**\n * data type generated from: https://transform.tools/json-to-typescript\n * Based on response from https://www.dnd5eapi.co/api/spells\n */\nexport interface SpellResponse {\n    count: number\n    results: SpellResponseResults[]\n}\n\n/**\n * Used to store individual information about each spell returned as a result from https://www.dnd5eapi.co/api/spells\n * data type generated from: https://transform.tools/json-to-typescript\n */\nexport interface SpellResponseResults {\n    index: string\n    name: string\n    level: number\n    url: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpellI.html":{"url":"interfaces/SpellI.html","title":"interface - SpellI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpellI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/spell.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface used to hold all necessary information about each spell\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            damage\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        damage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        damage:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DiceSetI, DiceSet } from \"./diceset\";\n\n/**\n * Interface used to hold all necessary information about each spell\n */\nexport interface SpellI {\n    name: string\n    url: string\n    level: number\n    damage: { [level: number]: DiceSetI }\n}\n\n/**\n * The data type version of SpellI, which has additional functions to allow easier setting of values from DnD API\n */\nexport class Spell implements SpellI {\n    name: string;\n    url: string;\n    level: number;\n    damage: { [level: number]: DiceSetI; };\n    \n    constructor(name='', url='', level=1, damage={0: new DiceSet({})}) {\n        this.name = name;\n        this.url = url;\n        this.level = level;\n        this.damage = damage;\n    }\n\n    setDamageFromAPI(response: {[level: string]: string}, modifier: number) {\n        for(let key in response) {\n            console.log('damage from api', parseInt(key), response);\n            this.damage[parseInt(key)] = new DiceSet(\n                {modifier: modifier}, response[key]\n            );\n            console.log('damage variable', this.damage[1]);\n        }\n    }\n\n    toString(): string {\n        let retString = `name: ${this.name}, url: ${this.url}\\n`;\n        retString += `damage: `\n        for(let key in this.damage) {\n            retString += `{${key}: ${this.damage[key]}\\n`\n        }\n        return retString;\n    }\n\n}\n\n/**\n * data type generated from: https://transform.tools/json-to-typescript\n * Based on response from https://www.dnd5eapi.co/api/spells\n */\nexport interface SpellResponse {\n    count: number\n    results: SpellResponseResults[]\n}\n\n/**\n * Used to store individual information about each spell returned as a result from https://www.dnd5eapi.co/api/spells\n * data type generated from: https://transform.tools/json-to-typescript\n */\nexport interface SpellResponseResults {\n    index: string\n    name: string\n    level: number\n    url: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpellResponse.html":{"url":"interfaces/SpellResponse.html","title":"interface - SpellResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpellResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/spell.ts\n        \n\n\n            \n                Description\n            \n            \n                data type generated from: https://transform.tools/json-to-typescript\nBased on response from https://www.dnd5eapi.co/api/spells\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            results\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        results\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        results:         SpellResponseResults[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SpellResponseResults[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DiceSetI, DiceSet } from \"./diceset\";\n\n/**\n * Interface used to hold all necessary information about each spell\n */\nexport interface SpellI {\n    name: string\n    url: string\n    level: number\n    damage: { [level: number]: DiceSetI }\n}\n\n/**\n * The data type version of SpellI, which has additional functions to allow easier setting of values from DnD API\n */\nexport class Spell implements SpellI {\n    name: string;\n    url: string;\n    level: number;\n    damage: { [level: number]: DiceSetI; };\n    \n    constructor(name='', url='', level=1, damage={0: new DiceSet({})}) {\n        this.name = name;\n        this.url = url;\n        this.level = level;\n        this.damage = damage;\n    }\n\n    setDamageFromAPI(response: {[level: string]: string}, modifier: number) {\n        for(let key in response) {\n            console.log('damage from api', parseInt(key), response);\n            this.damage[parseInt(key)] = new DiceSet(\n                {modifier: modifier}, response[key]\n            );\n            console.log('damage variable', this.damage[1]);\n        }\n    }\n\n    toString(): string {\n        let retString = `name: ${this.name}, url: ${this.url}\\n`;\n        retString += `damage: `\n        for(let key in this.damage) {\n            retString += `{${key}: ${this.damage[key]}\\n`\n        }\n        return retString;\n    }\n\n}\n\n/**\n * data type generated from: https://transform.tools/json-to-typescript\n * Based on response from https://www.dnd5eapi.co/api/spells\n */\nexport interface SpellResponse {\n    count: number\n    results: SpellResponseResults[]\n}\n\n/**\n * Used to store individual information about each spell returned as a result from https://www.dnd5eapi.co/api/spells\n * data type generated from: https://transform.tools/json-to-typescript\n */\nexport interface SpellResponseResults {\n    index: string\n    name: string\n    level: number\n    url: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpellResponseResults.html":{"url":"interfaces/SpellResponseResults.html","title":"interface - SpellResponseResults","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpellResponseResults\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/spell.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to store individual information about each spell returned as a result from https://www.dnd5eapi.co/api/spells\ndata type generated from: https://transform.tools/json-to-typescript\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            index\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        index\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        index:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DiceSetI, DiceSet } from \"./diceset\";\n\n/**\n * Interface used to hold all necessary information about each spell\n */\nexport interface SpellI {\n    name: string\n    url: string\n    level: number\n    damage: { [level: number]: DiceSetI }\n}\n\n/**\n * The data type version of SpellI, which has additional functions to allow easier setting of values from DnD API\n */\nexport class Spell implements SpellI {\n    name: string;\n    url: string;\n    level: number;\n    damage: { [level: number]: DiceSetI; };\n    \n    constructor(name='', url='', level=1, damage={0: new DiceSet({})}) {\n        this.name = name;\n        this.url = url;\n        this.level = level;\n        this.damage = damage;\n    }\n\n    setDamageFromAPI(response: {[level: string]: string}, modifier: number) {\n        for(let key in response) {\n            console.log('damage from api', parseInt(key), response);\n            this.damage[parseInt(key)] = new DiceSet(\n                {modifier: modifier}, response[key]\n            );\n            console.log('damage variable', this.damage[1]);\n        }\n    }\n\n    toString(): string {\n        let retString = `name: ${this.name}, url: ${this.url}\\n`;\n        retString += `damage: `\n        for(let key in this.damage) {\n            retString += `{${key}: ${this.damage[key]}\\n`\n        }\n        return retString;\n    }\n\n}\n\n/**\n * data type generated from: https://transform.tools/json-to-typescript\n * Based on response from https://www.dnd5eapi.co/api/spells\n */\nexport interface SpellResponse {\n    count: number\n    results: SpellResponseResults[]\n}\n\n/**\n * Used to store individual information about each spell returned as a result from https://www.dnd5eapi.co/api/spells\n * data type generated from: https://transform.tools/json-to-typescript\n */\nexport interface SpellResponseResults {\n    index: string\n    name: string\n    level: number\n    url: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SpellsService.html":{"url":"injectables/SpellsService.html","title":"injectable - SpellsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SpellsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/spells.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This service is for http calls to get a list of all the dnd spells\napi used: https://www.dnd5eapi.co/api\napi used to test: https://jsonplaceholder.typicode.com/\nMain functions: getAllSpellsOfLevel, getAllSpells, getSpell\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                http\n                            \n                            \n                                    Protected\n                                spellsList\n                            \n                            \n                                url\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllSpells\n                            \n                            \n                                getAllSpellsOfLevel\n                            \n                            \n                                getSpell\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/spells.service.ts:82\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                injection\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllSpells\n                        \n                    \n                \n            \n            \n                \ngetAllSpells()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/spells.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Makes call to dnd5eapi to get spell list\nThe return value is a SpellResponse type which contains a list of the spells in SpellResponse.results\n\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable that when subscribed to will get all the spells in dnd up to 6th level\nThe return value is a SpellResponse type which contains a list of the spells in SpellResponse.results\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllSpellsOfLevel\n                        \n                    \n                \n            \n            \n                \ngetAllSpellsOfLevel(level: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/spells.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                level\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    spell level to filter spells\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable that when subscribed to will get a list of all spells of said level\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSpell\n                        \n                    \n                \n            \n            \n                \ngetSpell(url: string, modifier: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/spells.service.ts:53\n                        \n                    \n\n\n            \n                \n                        This function creates a SpellI by making an API request given a specific url.\nDnD API returns a specific url with each spell name when searching all spells that contains additional information about the spell.\nThis function makes a separate API call using that new url, and attempts to create a SpellI data type using the info from the API request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    url from SpellResponseResults type\n\n                                            \n                                        \n                                        \n                                                modifier\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    0\n                                            \n\n                                            \n                                                    In order to properly set spell damage, the spell modifier needs to be set based on what the user had inputted\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable that when subscribed to will give a Spell data type that holds all necessary information about the spell\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        http\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpClient\n\n                    \n                \n                    \n                        \n                                Defined in src/app/spells.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        spellsList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellI[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/spells.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new URL('https://www.dnd5eapi.co/api')\n                    \n                \n                    \n                        \n                                Defined in src/app/spells.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { SpellI, SpellResponse, Spell } from './spell';\nimport { map, Observable } from 'rxjs';\n\n/**\n * This service is for http calls to get a list of all the dnd spells\n * \n * api used: https://www.dnd5eapi.co/api\n * api used to test: https://jsonplaceholder.typicode.com/\n * \n * Main functions: getAllSpellsOfLevel, getAllSpells, getSpell\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SpellsService {\n\n  http!: HttpClient;\n  url = new URL('https://www.dnd5eapi.co/api');\n  protected spellsList: SpellI[] = [];\n\n  /**\n   * Makes call to dnd5eapi to get spell list\n   * @returns Observable that when subscribed to will get all the spells in dnd up to 6th level\n   * The return value is a SpellResponse type which contains a list of the spells in SpellResponse.results\n   */\n  getAllSpells(): Observable {\n    return this.http.get(\n      `${this.url.href}/spells?level=0&level=1&level=2&level=3&level=4&level=5&level=6`,\n      );\n  }\n\n  /**\n   * \n   * @param level spell level to filter spells\n   * @returns Observable that when subscribed to will get a list of all spells of said level\n   */\n  getAllSpellsOfLevel(level: number): Observable {\n    return this.http.get(\n      `${this.url.href}/spells?level=${level}`,\n      );\n  }\n\n  /**\n   * This function creates a SpellI by making an API request given a specific url.\n   * DnD API returns a specific url with each spell name when searching all spells that contains additional information about the spell.\n   * This function makes a separate API call using that new url, and attempts to create a SpellI data type using the info from the API request\n   * @param url url from SpellResponseResults type\n   * @param modifier In order to properly set spell damage, the spell modifier needs to be set based on what the user had inputted\n   * @returns Observable that when subscribed to will give a Spell data type that holds all necessary information about the spell\n   */\n  getSpell(url: string, modifier=0): Observable {\n    return this.http.\n      get(\n        `${this.url.origin}${url}`\n      ).pipe(map((response) => {\n        console.log('pipe response', response)\n        let spellName: string = response['name'] as unknown as string;\n        let spellLevel: number = response['level'] as unknown as number;\n        let spell = new Spell(spellName, url, spellLevel);\n        if(spellLevel == 0) {\n          spell.setDamageFromAPI(\n            {'0': response['damage']['damage_at_character_level']['1']},\n            modifier\n          )\n        } else {\n          try {\n            spell.setDamageFromAPI(\n              response['damage']['damage_at_slot_level'], \n              modifier\n            );\n          } catch(e) {\n            spell.setDamageFromAPI(\n              response['heal_at_slot_level'] as unknown as {[level: string]: string}, modifier\n            )\n          }\n        }\n        return spell;\n    }));\n  }\n\n  /**\n   * \n   * @param http injection\n   */\n  constructor(http: HttpClient) { \n    this.http = http;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/StepperComponent.html":{"url":"components/StepperComponent.html","title":"component - StepperComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  StepperComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/stepper/stepper.component.ts\n\n\n\n    \n        Description\n    \n    \n        https://v5.material.angular.io/guide/creating-a-custom-form-field-control\nguide here in case I want to change my mind and just make one using angular\nhttps://www.youtube.com/watch?v=xTcJQaWiJ2c&list=PLw5h0DiJ-9PDF6TTr0J7HmKK_7t6XTPuN https://flowbite.com/docs/forms/number-input/\n\n    \n\n\n    \n        Implements\n    \n    \n                ControlValueAccessor\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                {\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => StepperComponent), multi: true,\n}\n                \n            \n\n\n            \n                selector\n                app-stepper\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            FormsModule\n                            MatButtonModule\n                            MatIconModule\n                            MatFormFieldModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./stepper.component.html\n            \n\n\n\n            \n                styleUrl\n                ./stepper.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                decrement\n                            \n                            \n                                increment\n                            \n                            \n                                onChange\n                            \n                            \n                                onTouch\n                            \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                    Optional\n                                setDisabledState\n                            \n                            \n                                updateValue\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        decrement\n                        \n                    \n                \n            \n            \n                \ndecrement()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        increment\n                        \n                    \n                \n            \n            \n                \nincrement()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onChange\n                        \n                    \n                \n            \n            \n                \nonChange(value: number | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        number | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onTouch\n                        \n                    \n                \n            \n            \n                \nonTouch()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerOnChange\n                        \n                    \n                \n            \n            \n                \nregisterOnChange(fn: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerOnTouched\n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(fn: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        setDisabledState\n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                isDisabled\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateValue\n                        \n                    \n                \n            \n            \n                \nupdateValue(newValue: number | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newValue\n                                            \n                                                        number | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        writeValue\n                        \n                    \n                \n            \n            \n                \nwriteValue(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/stepper/stepper.component.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\n\n/**\n * https://v5.material.angular.io/guide/creating-a-custom-form-field-control\n * guide here in case I want to change my mind and just make one using angular\n * https://www.youtube.com/watch?v=xTcJQaWiJ2c&list=PLw5h0DiJ-9PDF6TTr0J7HmKK_7t6XTPuN  StepperComponent),\n      multi: true,\n    }\n  ],\n  templateUrl: './stepper.component.html',\n  styleUrl: './stepper.component.scss'\n})\nexport class StepperComponent implements ControlValueAccessor {\n  value: number | null = 0;\n  onChange(value: number | null) {\n    this.value = value;\n  }\n  onTouch() {}\n  increment() {\n    this.updateValue(this.value !== null ? this.value + 1 : 1);\n  }\n  decrement() {\n    if (this.value ?? 0 >= 1) {\n      this.updateValue(this.value != null ? this.value - 1 : 0);\n    } else if (this.value ?? 1 \n    \n\n    \n        \n\n  -\n  \n  +\n -->\n\n\n\n  \n    remove\n  \n  \n  \n    add\n  \n -->\n\n\n\n  \n    -\n     -->\n  \n  \n  \n    +\n     -->\n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  -    + -->      remove          add   -->      -     -->          +     -->  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'StepperComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/attack-rolls/attack-rolls.component.ts\n            \n            component\n            AttackRollsComponent\n            \n                25 %\n                (5/20)\n            \n        \n        \n            \n                \n                src/app/character-sheet/character-sheet.component.ts\n            \n            component\n            CharacterSheetComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/characterstats.ts\n            \n            interface\n            CharacterStats\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/dice-bonus-form/dice-bonus-form.component.ts\n            \n            component\n            DiceBonusFormComponent\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/dice-calculations.service.ts\n            \n            injectable\n            DiceCalculationsService\n            \n                81 %\n                (18/22)\n            \n        \n        \n            \n                \n                src/app/diceset.ts\n            \n            class\n            DiceSet\n            \n                6 %\n                (1/15)\n            \n        \n        \n            \n                \n                src/app/diceset.ts\n            \n            interface\n            DiceResults\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/diceset.ts\n            \n            interface\n            DiceSetI\n            \n                18 %\n                (2/11)\n            \n        \n        \n            \n                \n                src/app/die-roll-results-table/die-roll-results-table.component.ts\n            \n            component\n            DieRollResultsTableComponent\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/dropdown.ts\n            \n            interface\n            DropdownGroup\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/dropdown.ts\n            \n            interface\n            DropdownItem\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/navbar/navbar.component.ts\n            \n            component\n            NavbarComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/not-found/not-found.component.ts\n            \n            component\n            NotFoundComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/overlay/overlay.component.ts\n            \n            component\n            OverlayComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/skill-check/skill-check.component.ts\n            \n            component\n            SkillCheckComponent\n            \n                5 %\n                (1/18)\n            \n        \n        \n            \n                \n                src/app/spell.ts\n            \n            class\n            Spell\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/app/spell.ts\n            \n            interface\n            SpellI\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/spell.ts\n            \n            interface\n            SpellResponse\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/spell.ts\n            \n            interface\n            SpellResponseResults\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/spells.service.ts\n            \n            injectable\n            SpellsService\n            \n                37 %\n                (3/8)\n            \n        \n        \n            \n                \n                src/app/stepper/stepper.component.ts\n            \n            component\n            StepperComponent\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                        src/mocks/mockSpells.ts\n            \n            variable\n            mockSpellResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/mocks/mockSpells.ts\n            \n            variable\n            mockSpellResult0\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/mocks/mockSpells.ts\n            \n            variable\n            mockSpellResult1\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^18.2.4\n        \n            @angular/cdk : ^18.2.4\n        \n            @angular/common : ^18.2.4\n        \n            @angular/compiler : ^18.2.4\n        \n            @angular/core : ^18.2.4\n        \n            @angular/fire : ^18.0.1\n        \n            @angular/forms : ^18.2.4\n        \n            @angular/material : ^18.2.4\n        \n            @angular/platform-browser : ^18.2.4\n        \n            @angular/platform-browser-dynamic : ^18.2.4\n        \n            @angular/router : ^18.2.4\n        \n            @npmcli/package-json : ^5.2.0\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            typedoc : ^0.26.11\n        \n            zone.js : ~0.14.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Advantage   (src/.../diceset.ts)\n                        \n                        \n                            CharacterClass   (src/.../characterstats.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/diceset.ts\n    \n        \n            \n                \n                    \n                        \n                        Advantage\n                    \n                \n                    \n                        \n                            Enum to track whether to calculate skill check possibility with advantage, disadvantage, or no just a flat roll\n\n                        \n                    \n                        \n                            \n                                 None\n                            \n                        \n                        \n                            \n                                Value : 0\n                            \n                        \n                        \n                            \n                                 Advantage\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 Disadvantage\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n                        \n                            \n                                 SavageAttacker\n                            \n                        \n                        \n                            \n                                Value : 3\n                            \n                        \n            \n        \n\n    src/app/characterstats.ts\n    \n        \n            \n                \n                    \n                        \n                        CharacterClass\n                    \n                \n                        \n                            \n                                 Barbarian\n                            \n                        \n                        \n                            \n                                 Bard\n                            \n                        \n                        \n                            \n                                 Cleric\n                            \n                        \n                        \n                            \n                                 Druid\n                            \n                        \n                        \n                            \n                                 Fighter\n                            \n                        \n                        \n                            \n                                 Monk\n                            \n                        \n                        \n                            \n                                 Paladin\n                            \n                        \n                        \n                            \n                                 Ranger\n                            \n                        \n                        \n                            \n                                 Rogue\n                            \n                        \n                        \n                            \n                                 Sorcerer\n                            \n                        \n                        \n                            \n                                 Warlock\n                            \n                        \n                        \n                            \n                                 Wizard\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAngularBg3Cheats\nThis webpage is designed to show all possible values that could result in rolling certain amounts of dice.\nThis makes it easier to determine what the likelihood of each decision would be when playing dnd,\nand properly understand how likely an action is to suceed when you try it in dnd.\nTechnologies Used\nAngular is used to build website. API calls are made to https://www.dnd5eapi.co/ to get the list of all spells in dnd.\nTailwindCSS and Material are used for styling components, and organizing the layout.\nDocumentation is built with compodoc, and deployed to github pages using github actions.\nDeployment is handled by firebase.\nPages\nServices\n\ndice-calculations.service.ts -- This holds all the functions used in dice calculations\nspells.service.ts -- This holds all the functions used to access DnD API to get spell information\n\nData Types\n\nspell.ts -- This holds all the data types used to organize data gotten from API\ndiceset.ts -- This holds all the data types used to organize data related to dice rolls\nCheck skillCheckCalc function on diceset details main algorithm used to calculate dice rolls\n\n\n\nComponents\n\nskill-check.component.ts -- Skill Check Link.\nIt contains frontend for calculating likelihood of skill check suceeeding.\nattack-rolls.component.ts -- Attack Rolls Link.\nIt contains frontend for calculating spell damage and likelihood.\nstepper.component.ts -- Modified form input (type=\"number\", but with + and - buttons on the sides)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    10 Components\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            mockSpellResponse   (src/.../mockSpells.ts)\n                        \n                        \n                            mockSpellResult0   (src/.../mockSpells.ts)\n                        \n                        \n                            mockSpellResult1   (src/.../mockSpells.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideRouter(routes), provideAnimationsAsync(), provideHttpClient(), provideFirebaseApp(() => initializeApp({\"projectId\":\"test-00-c77de\",\"appId\":\"1:864287131419:web:4b60183cca62591db7b5be\",\"storageBucket\":\"test-00-c77de.firebasestorage.app\",\"apiKey\":\"AIzaSyDP4kd1doMBPfOSirbE7I6DYLjMbbNbTAY\",\"authDomain\":\"test-00-c77de.firebaseapp.com\",\"messagingSenderId\":\"864287131419\"})), provideAuth(() => getAuth())\n  ]\n}\n                    \n                \n\n\n        \n    \n\n    src/mocks/mockSpells.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockSpellResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellResponse\n\n                    \n                \n                \n                    \n                        Default value : {\n    count: 1,\n    results: [mockSpellResult0, mockSpellResult1]\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mockSpellResult0\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellResponseResults\n\n                    \n                \n                \n                    \n                        Default value : {\n    index: '0',\n    name: 'cantrip',\n    level: 0,\n    url: '/api/spells/cantrip'\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mockSpellResult1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellResponseResults\n\n                    \n                \n                \n                    \n                        Default value : {\n    index: '1',\n    name: 'level 1',\n    level: 1,\n    url: '/api/spells/level-1'\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
