var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.344,1,0.905]],["body/components/AppComponent.html",[0,0.605,1,1.523,2,1.637,3,0.356,4,0.356,5,1.121,6,1.121,7,1.121,8,0.307,9,2.654,10,0.777,11,4.308,12,3.573,13,2.44,14,4.308,15,3.09,16,4.308,17,3.573,18,3.573,19,4.308,20,4.308,21,3.573,22,1.121,23,2.122,24,2.122,25,3.573,26,1.51,27,1.51,28,1.51,29,4.87,30,4.308,31,4.308,32,4.04,33,4.04,34,2.486,35,3.493,36,4.04,37,1.51,38,4.308,39,1.51,40,4.308,41,0.307,42,0.479,43,4.87,44,0.356,45,0.036,46,0.935,47,0.853,48,0.639,49,2.728,50,3.573,51,3.573,52,1.024,53,3.2,54,1.262,55,3.2,56,0.935,57,3.2,58,2.654,59,2.654,60,2.654,61,1.634,62,2.295,63,2.654,64,0.356,65,0.356,66,3.573,67,1.182,68,4.308,69,1.074,70,1.654,71,1.559,72,1.814,73,3.09,74,1.121,75,1.51,76,1.51,77,1.121,78,1.826,79,1.121,80,0.775,81,1.121,82,0.935,83,1.121,84,0.935,85,1.121,86,1.121,87,0.935,88,1.024,89,1.121,90,0.935,91,1.024,92,0.705,93,0.027,94,1.121,95,0.935,96,1.121,97,0.935,98,1.121,99,0.935,100,1.121,101,0.935,102,1.121,103,0.935,104,1.121,105,1.121,106,1.121,107,0.024]],["title/components/AttackRollsComponent.html",[0,0.344,82,0.905]],["body/components/AttackRollsComponent.html",[0,0.428,1,0.422,2,0.692,3,0.161,4,0.161,5,0.506,6,0.506,7,0.506,8,0.139,10,0.575,15,1.699,21,1.965,22,0.506,23,1.841,24,1.781,26,0.83,27,0.83,28,0.83,34,1.538,37,0.83,39,0.83,41,0.419,42,0.263,44,0.565,45,0.036,46,1.208,47,1.102,48,1.063,52,1.776,54,1.174,56,0.422,61,0.737,64,0.161,65,0.161,67,0.934,69,0.318,71,1.555,72,1.741,74,0.506,75,0.83,76,0.83,77,0.506,78,1.221,79,0.506,80,0.744,81,0.506,82,1.019,83,0.506,84,0.422,85,0.506,86,0.506,87,1.208,88,0.964,89,0.506,90,0.692,91,0.758,92,0.664,93,0.022,94,0.506,95,0.422,96,0.506,97,0.422,98,0.506,99,0.422,100,0.506,101,0.422,102,0.506,103,0.422,104,0.506,105,0.506,106,0.506,107,0.013,108,4.64,109,4.64,110,1.036,111,2.369,112,1.699,113,1.965,114,1.5,115,2.369,116,2.244,117,1.699,118,2.369,119,1.613,120,0.83,121,2.499,122,2.16,123,2.16,124,1.908,125,2.16,126,3.012,127,1.908,128,2.369,129,2.369,130,1.096,131,2.499,132,3.012,133,4.367,134,3.848,135,2.499,136,4.367,137,3.012,138,3.012,139,2.618,140,2.499,141,0.997,142,3.485,143,3.485,144,3.485,145,2.369,146,2.891,147,2.369,148,2.499,149,3.485,150,1.706,151,1.444,152,1.444,153,2.369,154,3.485,155,4.135,156,3.43,157,1.706,158,1.598,159,1.779,160,3.485,161,3.485,162,2.369,163,2.369,164,2.045,165,1.812,166,2.23,167,1.444,168,2.369,169,2.369,170,1.5,171,2.891,172,1.342,173,1.444,174,2.369,175,1.587,176,1.444,177,1.965,178,2.369,179,2.369,180,1.965,181,1.965,182,1.096,183,0.997,184,3.848,185,1.5,186,2.369,187,1.444,188,1.116,189,2.369,190,1.467,191,3.916,192,1.444,193,1.965,194,1.444,195,1.444,196,2.369,197,0.758,198,1.096,199,1.096,200,1.209,201,0.758,202,2.499,203,1.444,204,1.813,205,2.16,206,2.766,207,2.369,208,1.156,209,2.369,210,2.369,211,1.444,212,0.631,213,2.369,214,1.444,215,1.444,216,2.369,217,1.444,218,1.908,219,1.699,220,1.444,221,1.444,222,1.444,223,1.268,224,1.444,225,2.369,226,1.444,227,1.965,228,1.965,229,2.499,230,1.444,231,0.818,232,0.737,233,1.965,234,1.444,235,1.444,236,1.444,237,1.036,238,2.369,239,1.444,240,0.914,241,0.554,242,0.737,243,1.036,244,1.036,245,1.444,246,0.914,247,1.198,248,0.914,249,0.914,250,1.198,251,0.929,252,1.036,253,0.818,254,1.444,255,1.444,256,1.444,257,1.965,258,1.444,259,1.444,260,1.444,261,1.444,262,1.889,263,2.369,264,1.444,265,1.444,266,1.444,267,2.369,268,2.369,269,1.444,270,2.369,271,1.444,272,2.369,273,1.444,274,2.369,275,1.444,276,2.369,277,1.444,278,1.444,279,3.012,280,1.444,281,1.444,282,1.444,283,1.444,284,1.444,285,1.198,286,0.964,287,2.369,288,1.444,289,0.818,290,1.444,291,1.444,292,1.444,293,1.444,294,3.012,295,3.012,296,1.444,297,1.444,298,1.444,299,1.444,300,1.444,301,1.444,302,1.444,303,1.444,304,1.444,305,1.198,306,1.198,307,1.198,308,1.198,309,1.198,310,2.499,311,1.444,312,1.444,313,2.369,314,1.444,315,1.198,316,1.444,317,2.369,318,1.444,319,2.369,320,1.444,321,1.444,322,1.444,323,1.444,324,1.444,325,1.444,326,1.444,327,1.198,328,1.444,329,1.444,330,1.444,331,1.444,332,1.444,333,1.444,334,1.444,335,1.444,336,1.444,337,2.369,338,2.369,339,1.965,340,2.618,341,2.369,342,2.369,343,2.369,344,1.965]],["title/components/CharacterSheetComponent.html",[0,0.344,84,0.905]],["body/components/CharacterSheetComponent.html",[0,0.593,1,1.126,2,1.421,3,0.428,4,0.428,5,1.35,6,1.35,7,1.35,8,0.37,22,1.35,23,2.18,24,2.18,26,1.704,27,1.704,28,1.35,37,1.704,39,1.704,45,0.035,54,0.849,56,1.126,64,0.428,65,0.428,67,0.935,69,0.849,71,1.233,74,1.35,75,1.704,76,1.704,77,1.35,78,1.961,79,1.35,80,0.875,81,1.35,82,1.126,83,1.35,84,1.635,85,2.141,86,1.35,87,1.126,88,1.233,89,1.35,90,1.126,91,1.233,92,0.849,93,0.03,94,1.35,95,1.126,96,1.35,97,1.126,98,1.35,99,1.126,100,1.35,101,1.126,102,1.35,103,1.126,104,1.35,105,1.35,106,1.35,107,0.027,345,3.196,346,3.196,347,3.196,348,5.596,349,4.863,350,4.863,351,4.863]],["title/interfaces/CharacterStats.html",[352,0.445,353,2.221]],["body/interfaces/CharacterStats.html",[3,0.448,4,0.448,8,0.387,41,0.387,42,0.556,44,0.679,45,0.035,64,0.556,93,0.028,107,0.028,164,2.394,212,1.711,352,0.579,353,3.585,354,1.546,355,2.888,356,5.686,357,5.686,358,5.686,359,5.686,360,5.686,361,5.686,362,5.686,363,3.34,364,3.34,365,3.34,366,3.34,367,3.34,368,3.34,369,3.34,370,3.34,371,3.34,372,3.34,373,3.34,374,3.34,375,3.34,376,3.34]],["title/components/DiceBonusFormComponent.html",[0,0.344,87,0.905]],["body/components/DiceBonusFormComponent.html",[0,0.611,1,0.601,2,0.917,3,0.229,4,0.229,5,0.721,6,0.721,7,0.721,8,0.198,10,0.499,13,1.776,22,0.721,23,1.951,24,1.951,26,1.099,27,1.689,28,1.099,37,1.099,39,1.099,41,0.198,42,0.349,44,0.558,45,0.036,46,0.917,47,1.013,48,0.758,52,1.854,54,0.937,56,0.601,64,0.229,65,0.229,67,1.368,69,0.838,70,1.204,71,1.216,72,1.32,74,0.721,75,1.099,76,1.099,77,0.721,78,1.49,79,0.721,80,0.902,81,0.721,82,0.601,83,0.721,84,0.601,85,0.721,86,0.721,87,1.242,88,2.007,89,0.721,90,0.601,91,0.659,92,0.454,93,0.021,94,0.721,95,0.601,96,0.721,97,0.601,98,0.721,99,0.601,100,0.721,101,0.601,102,0.721,103,1.242,104,0.721,105,0.721,106,0.721,107,0.018,114,1.986,124,2.407,127,2.407,141,1.32,148,3.048,157,2.407,158,1.49,165,1.924,166,2.559,182,2.117,183,1.926,199,2.32,201,1.004,204,1.757,205,2.726,206,3.477,212,1.532,232,1.051,242,1.051,246,3.695,248,1.303,286,1.543,377,4.84,378,1.707,379,3.137,380,2.602,381,3.137,382,2.602,383,3.137,384,3.137,385,3.137,386,2.602,387,3.801,388,3.137,389,4.25,390,3.137,391,3.137,392,3.801,393,4.25,394,2.602,395,3.801,396,3.595,397,3.137,398,3.801,399,2.839,400,2.839,401,2.839,402,2.927,403,2.927,404,1.707,405,2.058,406,2.058,407,2.058,408,2.058,409,2.058,410,2.058,411,2.058,412,2.058,413,2.058,414,2.058,415,2.058,416,4.575,417,2.058,418,2.058,419,2.058,420,2.058,421,2.058,422,2.058,423,2.058,424,2.058,425,2.058,426,2.058,427,2.058,428,2.058,429,2.058,430,2.058,431,2.058,432,2.058,433,1.776,434,2.058,435,2.058,436,2.058,437,5.401,438,2.058,439,2.058,440,2.058,441,2.058,442,2.058,443,2.058,444,2.058,445,2.058,446,2.058,447,2.058,448,2.058,449,2.058,450,2.058,451,2.058,452,2.058,453,2.058,454,3.999,455,1.459,456,2.058,457,2.058,458,2.058,459,2.058]],["title/interfaces/DiceResults.html",[190,1.303,352,0.445]],["body/interfaces/DiceResults.html",[3,0.326,4,0.326,8,0.282,10,0.712,41,0.282,42,0.452,44,0.622,45,0.036,47,0.783,48,0.586,64,0.518,65,0.518,67,1.384,69,0.647,70,1.127,72,2.116,92,1.108,93,0.028,107,0.023,120,1.029,130,1.359,158,1.424,170,2.572,185,2.572,188,1.747,190,1.71,199,1.359,201,1.609,208,1.127,212,1.704,251,1.543,262,2.029,286,0.94,352,0.723,354,1.127,399,2.3,400,2.3,401,2.3,402,2.3,403,2.3,455,1.559,460,1.662,461,1.788,462,1.88,463,1.88,464,2.572,465,3.605,466,3.605,467,3.605,468,4.341,469,2.913,470,2.3,471,2.846,472,2.572,473,3.34,474,2.913,475,3.605,476,3.605,477,2.913,478,2.913,479,2.3,480,2.913,481,2.572,482,2.913,483,2.913,484,2.105,485,2.105,486,2.913,487,1.662,488,2.95,489,2.105,490,2.3,491,2.846,492,2.105,493,1.662,494,2.105,495,2.913,496,2.105,497,1.859,498,2.913,499,1.859,500,1.859,501,1.859,502,1.859,503,1.859,504,1.662,505,2.105,506,2.105,507,2.105,508,2.105,509,2.105,510,2.105,511,2.105,512,2.105,513,1.859]],["title/classes/DiceSet.html",[65,0.344,251,0.825]],["body/classes/DiceSet.html",[3,0.294,4,0.294,8,0.254,10,0.641,41,0.254,42,0.419,44,0.666,45,0.036,46,1.285,47,1.448,48,1.053,52,1.906,64,0.489,65,0.564,67,1.28,69,0.582,70,1.014,72,1.588,80,0.475,92,0.831,93,0.025,107,0.021,120,1.322,130,2.035,141,1.588,150,1.496,158,1.541,165,1.448,170,1.673,182,1.222,183,1.112,185,1.673,188,1.777,190,1.112,199,1.745,201,1.738,208,1.448,212,1.687,251,1.547,262,2.033,286,0.845,352,0.633,399,2.717,400,2.717,401,2.717,402,2.717,403,2.717,455,1.842,460,1.496,461,1.688,462,1.222,463,1.222,464,1.673,465,1.894,466,1.894,467,1.894,468,3.784,469,1.894,470,1.496,471,2.136,472,1.673,473,2.705,474,1.894,475,2.705,476,2.705,477,1.894,478,1.894,479,1.496,480,1.894,481,1.673,482,1.894,483,1.894,484,1.894,485,1.894,486,3.441,487,1.496,488,3.213,489,1.894,490,2.717,491,3.075,492,2.705,493,2.136,494,2.705,495,3.441,496,2.705,497,2.388,498,3.441,499,2.388,500,2.388,501,2.388,502,2.388,503,2.388,504,2.136,505,1.894,506,1.894,507,1.894,508,1.894,509,1.894,510,1.894,511,1.894,512,1.894,513,1.673,514,1.894,515,2.491,516,2.641,517,3.771,518,2.641,519,2.641,520,2.641,521,2.641,522,2.641,523,2.641,524,2.641,525,2.641,526,2.641,527,2.641,528,2.641,529,2.641,530,2.641,531,2.641,532,2.641]],["title/interfaces/DiceSetI.html",[188,0.991,352,0.445]],["body/interfaces/DiceSetI.html",[3,0.304,4,0.304,8,0.263,10,0.664,13,1.55,41,0.263,42,0.43,44,0.666,45,0.036,47,0.729,48,0.772,64,0.499,65,0.499,67,1.402,69,0.852,70,1.484,72,1.628,91,0.876,92,0.852,93,0.025,107,0.022,120,0.959,130,1.266,158,1.572,165,1.05,170,1.733,183,2.483,185,1.733,188,1.708,190,1.152,197,0.876,199,1.266,201,1.756,208,1.05,212,1.703,251,1.494,262,1.997,286,0.876,352,0.701,354,1.05,399,2.912,400,2.912,401,2.912,402,2.912,403,2.912,455,1.974,460,1.55,461,1.721,462,1.266,463,1.266,464,1.733,465,1.962,466,1.962,467,1.962,468,3.828,469,1.962,470,1.55,471,2.19,472,1.733,473,3.216,474,1.962,475,2.773,476,2.773,477,1.962,478,1.962,479,1.55,480,1.962,481,1.733,482,1.962,483,2.773,484,2.773,485,3.216,486,3.688,487,2.54,488,3.474,489,2.773,490,2.912,491,3.227,492,1.962,493,1.55,494,1.962,495,2.773,496,1.962,497,1.733,498,2.773,499,2.449,500,2.449,501,2.449,502,2.449,503,2.449,504,2.19,505,1.962,506,1.962,507,1.962,508,1.962,509,1.962,510,1.962,511,1.962,512,1.962,513,1.733,533,2.736,534,1.152,535,2.736,536,2.736,537,2.736,538,2.736,539,2.736,540,2.736,541,2.736,542,1.733,543,2.736]],["title/components/DieRollResultsTableComponent.html",[0,0.344,90,0.905]],["body/components/DieRollResultsTableComponent.html",[0,0.561,1,0.762,2,1.092,3,0.29,4,0.29,5,0.913,6,0.913,7,0.913,8,0.25,10,0.632,18,3.098,22,0.913,23,2.049,24,2.049,26,1.309,27,1.309,28,1.309,37,1.309,39,1.309,41,0.25,42,0.415,44,0.415,45,0.036,47,1.164,48,1.079,52,1.397,54,1.113,56,0.762,64,0.29,65,0.29,67,1.157,69,0.962,70,1.434,71,1.397,72,2.007,74,0.913,75,1.309,76,1.309,77,0.913,78,1.671,79,0.913,80,0.672,81,0.913,82,0.762,83,0.913,84,0.762,85,0.913,86,0.913,87,0.762,88,0.834,89,0.913,90,1.393,91,1.731,92,1.382,93,0.034,94,0.913,95,0.762,96,0.913,97,0.762,98,0.913,99,0.762,100,0.913,101,0.762,102,0.913,103,0.762,104,0.913,105,0.913,106,0.913,107,0.021,122,3.131,190,2.211,197,1.195,212,0.996,218,1.65,219,2.679,231,1.476,232,1.33,249,3.019,251,1.164,252,1.869,380,3.098,394,3.098,433,2.115,470,2.7,471,3.133,472,2.365,479,2.7,481,3.62,534,1.572,542,2.365,544,3.955,545,2.162,546,3.098,547,4.357,548,2.365,549,3.098,550,3.735,551,3.735,552,3.011,553,4.357,554,3.735,555,3.735,556,3.735,557,3.735,558,3.735,559,3.735,560,4.366,561,3.735,562,3.735,563,4.366,564,4.768,565,3.735,566,2.606,567,2.606,568,4.366,569,4.768,570,2.606,571,2.606,572,2.606,573,3.735,574,3.735,575,3.735,576,3.735,577,2.606]],["title/interfaces/DropdownGroup.html",[352,0.445,578,1.961]],["body/interfaces/DropdownGroup.html",[3,0.508,4,0.508,8,0.439,41,0.439,42,0.6,44,0.6,45,0.035,46,1.734,48,0.912,64,0.6,93,0.03,107,0.03,352,0.776,354,1.754,396,3.278,578,3.418,579,3.278,580,4.256,581,4.923,582,3.758]],["title/interfaces/DropdownItem.html",[352,0.445,582,1.961]],["body/interfaces/DropdownItem.html",[3,0.51,4,0.51,8,0.441,41,0.441,42,0.602,44,0.602,45,0.035,46,1.737,48,1.186,64,0.602,93,0.03,107,0.03,352,0.778,354,1.762,396,4.262,578,2.907,579,3.292,580,3.292,581,3.807,582,3.644]],["title/components/NavbarComponent.html",[0,0.344,95,0.905]],["body/components/NavbarComponent.html",[0,0.536,1,0.917,2,1.243,3,0.349,4,0.349,5,1.1,6,1.1,7,1.1,8,0.301,15,3.05,22,1.1,23,2.116,24,2.116,26,1.49,27,1.49,28,1.49,32,4,33,4,34,2.462,35,3.459,36,4,37,1.49,39,1.49,41,0.301,42,0.473,44,0.349,45,0.036,47,1.133,48,0.849,49,2.693,50,3.527,51,3.527,52,1.361,54,1.309,56,0.917,59,2.603,60,2.603,61,1.602,62,2.251,63,2.603,64,0.349,65,0.349,66,4.288,67,0.762,69,0.692,71,1.005,74,1.1,75,1.49,76,1.49,77,1.1,78,1.812,79,1.1,80,0.765,81,1.1,82,0.917,83,1.1,84,0.917,85,1.1,86,1.1,87,0.917,88,1.005,89,1.1,90,0.917,91,1.005,92,0.692,93,0.027,94,1.1,95,1.511,96,1.1,97,0.917,98,1.1,99,0.917,100,1.1,101,0.917,102,1.1,103,0.917,104,1.1,105,1.1,106,1.1,107,0.024,112,3.994,130,2.232,154,3.459,208,1.632,231,1.777,232,1.602,237,2.251,240,1.988,253,2.408,339,3.527,583,2.603,584,4.823,585,4.252,586,4.252,587,5.169,588,5.402,589,4.252,590,3.139,591,4.252,592,4.252,593,4.252,594,4.252,595,4.823,596,3.139,597,3.139,598,3.139,599,3.139,600,3.05]],["title/components/NotFoundComponent.html",[0,0.344,97,0.905]],["body/components/NotFoundComponent.html",[0,0.597,1,1.142,2,1.434,3,0.435,4,0.435,5,1.37,6,1.37,7,1.37,8,0.375,12,4.071,22,1.37,23,2.185,24,2.185,26,1.72,27,1.72,28,1.37,37,1.72,39,1.72,45,0.035,54,0.862,56,1.142,64,0.435,65,0.435,67,0.949,69,0.862,71,1.251,74,1.37,75,1.72,76,1.72,77,1.37,78,1.971,79,1.37,80,0.883,81,1.37,82,1.142,83,1.37,84,1.142,85,1.37,86,1.37,87,1.142,88,1.251,89,1.37,90,1.142,91,1.251,92,0.862,93,0.03,94,1.37,95,1.142,96,1.37,97,1.644,98,1.37,99,1.142,100,1.37,101,1.142,102,1.37,103,1.142,104,1.37,105,1.37,106,1.37,107,0.028,601,3.242,602,3.242,603,3.242,604,5.626,605,4.907,606,4.907]],["title/components/OverlayComponent.html",[0,0.344,99,0.905]],["body/components/OverlayComponent.html",[0,0.358,1,0.465,2,0.749,3,0.177,4,0.177,5,0.558,6,0.558,7,0.558,8,0.153,22,0.558,23,1.83,24,1.83,26,0.899,27,0.899,28,0.899,34,1.644,37,0.899,39,0.899,41,0.153,42,0.285,44,0.177,45,0.036,47,0.984,48,0.737,52,1.296,54,1.003,56,0.465,61,0.813,64,0.177,65,0.177,67,0.386,69,0.351,71,0.509,74,0.558,75,0.899,76,0.899,77,0.558,78,1.294,79,0.558,80,1.156,81,0.558,82,0.465,83,0.558,84,0.465,85,0.558,86,0.558,87,0.465,88,0.509,89,0.558,90,0.465,91,0.509,92,0.351,93,0.018,94,0.558,95,0.465,96,0.558,97,0.465,98,0.558,99,1.079,100,0.558,101,0.465,102,0.558,103,0.465,104,0.558,105,0.558,106,0.558,107,0.014,123,2.309,124,2.039,125,2.309,127,2.039,130,1.49,141,1.079,165,0.611,166,1.309,197,0.821,204,1.658,232,0.813,242,0.813,243,1.141,244,1.141,248,1.008,340,1.624,404,4.16,513,1.624,607,1.32,608,2.564,609,3.22,610,2.564,611,2.564,612,3.22,613,3.22,614,4.048,615,4.549,616,3.692,617,1.592,618,2.564,619,2.564,620,3.951,621,2.564,622,4.465,623,2.564,624,3.692,625,2.564,626,3.692,627,4.733,628,2.564,629,2.564,630,2.564,631,2.564,632,5.015,633,3.692,634,1.592,635,2.564,636,1.592,637,2.564,638,1.592,639,2.564,640,6.42,641,2.564,642,2.564,643,2.564,644,2.564,645,2.564,646,2.564,647,2.564,648,2.564,649,2.564,650,2.564,651,2.564,652,2.564,653,2.564,654,2.564,655,2.564,656,2.564,657,2.564,658,2.564,659,2.564,660,2.127,661,2.564,662,2.564,663,2.564,664,2.564,665,2.564,666,2.564,667,2.564,668,2.564,669,2.564,670,2.564,671,2.564,672,2.564,673,2.127,674,2.564,675,2.564,676,2.564,677,2.564,678,2.564,679,2.564,680,2.564,681,2.564,682,2.564,683,2.564,684,2.564,685,2.564,686,2.564,687,4.326,688,2.564,689,2.564,690,2.564,691,2.564,692,2.564,693,2.564,694,2.564,695,2.564,696,2.564,697,2.564,698,2.564,699,2.564,700,2.564,701,2.564,702,2.564,703,2.564,704,2.564,705,2.564,706,2.564,707,2.564,708,2.564,709,2.564,710,2.564,711,2.564,712,2.564,713,2.564,714,2.564,715,3.692,716,3.692,717,2.564,718,3.692,719,2.564,720,2.564,721,2.564,722,2.564,723,2.564,724,2.564,725,2.564,726,2.564,727,2.564,728,2.564,729,2.564,730,2.564,731,2.564,732,2.564,733,2.564,734,2.564,735,2.564,736,2.564,737,2.564,738,3.692,739,2.564,740,2.564,741,2.564,742,2.564,743,2.564,744,2.564,745,2.564,746,2.564,747,2.564,748,2.564,749,2.564,750,2.564,751,3.692,752,2.564,753,2.564,754,2.564,755,2.564,756,2.564,757,2.564,758,2.564,759,2.564,760,2.564,761,1.592,762,1.592,763,1.32,764,1.592,765,1.592,766,1.592,767,2.564,768,1.592,769,2.564,770,1.592,771,2.127,772,2.564,773,2.564,774,2.564,775,2.564,776,1.592,777,2.564,778,1.592,779,2.564,780,2.127,781,2.564,782,2.564,783,2.127,784,1.592,785,1.592,786,1.592,787,1.592,788,1.592]],["title/components/SkillCheckComponent.html",[0,0.344,101,0.905]],["body/components/SkillCheckComponent.html",[0,0.453,1,0.472,2,0.758,3,0.18,4,0.18,5,0.566,6,0.566,7,0.566,8,0.155,10,0.392,22,0.566,23,1.838,24,1.838,26,0.909,27,0.909,28,0.909,34,1.66,37,0.909,39,0.909,41,0.312,42,0.288,44,0.484,45,0.036,47,1.372,48,1.123,52,1.786,54,1.156,56,0.472,61,1.324,64,0.18,65,0.18,67,1.111,69,1.082,70,1.565,71,0.517,74,0.566,75,0.909,76,0.909,77,0.566,78,1.304,79,0.566,80,0.906,81,0.566,82,0.472,83,0.566,84,0.472,85,0.566,86,0.566,87,1.088,88,1.04,89,0.566,90,0.758,91,0.83,92,0.717,93,0.026,94,0.566,95,0.472,96,0.566,97,0.472,98,0.566,99,0.472,100,0.566,101,1.088,102,0.566,103,0.472,104,0.566,105,0.566,106,0.566,107,0.015,113,2.696,114,1.642,120,0.909,121,2.696,122,2.331,123,2.331,124,2.059,125,2.331,127,2.059,130,1.2,131,2.696,135,2.696,140,2.696,141,1.092,146,3.088,148,2.669,150,1.841,157,1.841,165,1.565,166,1.9,177,1.339,182,1.504,183,1.092,188,1.04,190,1.567,191,3.382,193,2.151,197,0.83,199,0.747,202,2.696,204,2.026,205,2.924,206,1.022,208,1.826,218,2.059,219,1.86,227,2.151,228,2.151,229,2.696,231,0.914,232,0.824,233,1.339,242,0.824,243,1.158,244,1.158,246,1.022,247,1.339,248,1.022,249,1.022,250,1.339,251,1.161,252,1.158,253,2.108,257,1.339,262,1.604,286,0.83,305,1.339,306,1.339,307,1.339,308,1.339,309,1.339,310,1.339,315,1.339,327,1.339,340,2.357,344,3.088,399,1.469,400,1.469,401,1.469,402,1.469,403,1.469,433,1.469,454,4.35,470,1.841,487,1.469,488,2.357,490,2.108,491,2.915,497,2.757,499,1.642,504,1.469,580,1.158,600,2.669,620,1.86,622,3.088,660,3.796,673,3.611,763,1.339,783,1.339,789,4.668,790,4.668,791,1.158,792,2.594,793,3.722,794,2.594,795,2.151,796,2.594,797,3.251,798,2.594,799,2.594,800,3.251,801,3.251,802,3.251,803,3.251,804,4.077,805,4.077,806,3.251,807,3.251,808,2.594,809,2.594,810,3.722,811,1.614,812,2.594,813,1.614,814,1.614,815,2.594,816,1.614,817,2.594,818,1.339,819,1.614,820,1.614,821,1.614,822,3.722,823,1.614,824,3.722,825,1.614,826,1.614,827,1.614,828,2.151,829,2.151,830,1.614,831,1.614,832,1.614,833,1.614,834,2.594,835,2.594,836,2.594,837,2.594,838,2.594,839,1.614,840,1.614,841,1.614,842,1.614,843,1.614,844,1.614,845,1.614,846,1.614,847,1.614,848,1.614,849,1.614,850,1.614,851,1.614,852,1.614,853,1.614,854,1.614,855,1.614,856,1.614,857,1.614,858,1.614,859,1.614,860,1.614,861,1.614,862,1.614,863,1.614,864,1.614,865,1.614,866,1.614,867,1.614,868,1.614,869,1.614,870,1.614,871,1.614,872,1.614,873,1.614,874,1.614,875,1.614,876,1.614,877,1.614,878,1.614,879,1.614,880,1.614,881,1.614,882,2.594,883,2.594,884,2.151,885,2.594,886,2.594,887,3.722,888,3.722,889,2.594,890,2.594,891,2.594,892,2.594,893,2.594,894,2.594,895,2.594,896,2.594,897,2.594,898,3.722,899,2.594,900,2.594,901,4.758,902,3.946,903,2.594,904,4.758,905,2.594,906,2.594,907,2.594,908,2.594]],["title/classes/Spell.html",[65,0.344,116,1.188]],["body/classes/Spell.html",[3,0.326,4,0.326,8,0.282,10,0.712,41,0.39,42,0.451,44,0.669,45,0.036,46,1.794,52,1.79,54,0.646,64,0.559,65,0.326,80,1.054,93,0.026,107,0.023,116,1.928,119,2.638,120,1.422,141,1.708,150,1.66,158,1.422,159,1.497,164,2.492,165,1.558,166,1.497,172,2.298,175,1.558,182,1.878,183,1.708,188,1.49,197,1.299,198,2.154,200,1.497,201,1.299,204,1.422,212,1.591,223,2.22,241,1.125,251,1.339,286,0.938,289,2.298,352,0.722,455,2.024,461,1.928,462,1.357,463,1.878,514,2.103,515,2.845,534,1.708,552,1.497,909,1.66,910,2.298,911,2.298,912,2.072,913,2.57,914,2.298,915,2.072,916,2.991,917,4.058,918,2.57,919,4.058,920,4.058,921,3.861,922,2.932,923,2.932,924,2.932,925,2.57,926,2.932,927,2.845,928,2.932,929,1.66,930,1.857,931,1.857,932,2.57,933,1.857,934,1.857,935,2.57,936,2.947,937,2.57,938,1.857,939,1.857,940,1.857,941,1.857,942,3.181,943,1.857,944,1.857,945,2.57,946,2.57,947,2.57,948,1.66,949,1.857,950,1.857,951,1.857]],["title/interfaces/SpellI.html",[223,1.303,352,0.445]],["body/interfaces/SpellI.html",[3,0.356,4,0.356,8,0.308,10,0.778,41,0.414,42,0.48,44,0.656,45,0.036,46,1.791,54,0.706,64,0.58,65,0.356,80,1.047,93,0.027,107,0.024,116,2.001,119,2.65,120,1.123,158,1.123,159,1.636,164,2.509,172,1.815,175,1.655,188,1.56,197,1.56,198,1.996,200,1.636,201,1.56,204,1.511,212,1.572,223,2.195,241,1.23,251,1.39,286,1.026,289,2.442,352,0.782,354,1.23,455,1.871,461,1.871,462,1.996,463,1.996,515,1.815,534,2.052,552,1.636,909,1.815,910,1.815,911,1.815,912,1.636,913,2.029,914,1.815,915,1.636,916,3.011,918,2.029,921,3.577,925,2.029,927,2.76,929,2.442,930,2.029,931,2.029,932,2.731,933,2.029,934,2.029,935,2.731,936,3.087,937,2.731,938,2.029,939,2.029,940,2.029,941,2.029,942,3.302,943,2.029,944,2.029,945,2.731,946,2.731,947,2.731,948,1.815,949,2.029,950,2.029,951,2.029]],["title/interfaces/SpellResponse.html",[241,1.188,352,0.445]],["body/interfaces/SpellResponse.html",[3,0.365,4,0.365,8,0.315,10,0.796,41,0.42,42,0.487,44,0.627,45,0.036,46,1.749,54,0.723,64,0.585,65,0.365,80,0.986,93,0.032,107,0.025,116,1.892,119,2.435,120,1.149,158,1.149,159,2.235,164,2.425,172,1.857,175,2.02,188,1.578,197,1.402,198,2.026,200,1.674,201,1.402,204,1.534,212,1.579,223,2.076,241,1.681,251,1.402,286,1.049,289,2.48,352,0.757,354,1.258,455,1.892,461,2.02,462,1.517,463,2.282,515,1.857,534,1.843,552,1.674,909,1.857,910,1.857,911,1.857,912,1.674,913,2.076,914,1.857,915,1.674,916,2.88,918,2.076,925,2.076,927,2.98,929,1.857,930,2.076,931,2.076,932,2.773,933,2.076,934,2.076,935,2.773,936,3.122,937,2.773,938,2.076,939,2.076,940,2.076,941,2.076,942,3.332,943,2.076,944,2.076,945,3.122,946,3.122,947,3.122,948,2.98,949,2.076,950,2.076,951,2.076]],["title/interfaces/SpellResponseResults.html",[175,1.188,352,0.445]],["body/interfaces/SpellResponseResults.html",[3,0.354,4,0.354,8,0.305,10,0.772,41,0.521,42,0.477,44,0.646,45,0.036,46,1.805,54,0.701,64,0.578,65,0.354,80,1.046,93,0.027,107,0.024,116,1.995,119,2.405,120,1.115,158,1.115,159,1.624,164,2.506,172,1.801,175,1.864,188,1.554,197,1.554,198,1.986,200,1.624,201,1.554,204,1.504,212,1.57,223,2.044,241,1.221,251,1.385,286,1.018,289,2.43,352,0.747,354,1.221,455,1.864,461,1.995,462,1.472,463,2.247,515,1.801,534,2.044,552,2.191,909,1.801,910,1.801,911,1.801,912,1.624,913,2.014,914,1.801,915,1.624,916,3.007,918,2.014,925,2.014,927,2.75,929,1.801,930,2.014,931,2.014,932,2.717,933,2.014,934,2.014,935,2.717,936,3.075,937,2.717,938,2.014,939,2.014,940,2.014,941,2.014,942,3.292,943,2.014,944,2.014,945,3.075,946,3.075,947,3.075,948,1.801,949,2.717,950,2.717,951,2.717]],["title/injectables/SpellsService.html",[139,1.961,952,2.221]],["body/injectables/SpellsService.html",[3,0.449,4,0.253,8,0.219,10,1.085,13,1.916,25,1.887,41,0.219,42,0.376,44,0.645,45,0.036,46,1.515,47,1.076,48,0.999,52,1.66,54,0.986,56,0.665,64,0.253,65,0.253,80,0.86,93,0.019,107,0.019,114,2.142,116,2.311,119,1.565,139,2.142,141,1.424,150,1.289,154,4.125,159,1.727,164,2.292,165,2.045,171,2.806,175,1.298,181,2.806,182,1.869,183,1.7,197,1.431,198,2.634,199,2.069,201,1.431,204,1.674,212,1.382,223,2.183,237,1.632,240,1.441,241,1.716,262,1.415,285,3.708,286,1.66,455,2.045,461,1.716,490,1.916,534,1.424,546,2.806,548,2.831,553,3.708,911,1.916,912,1.727,915,2.557,916,2.963,927,1.916,929,1.916,952,2.426,953,1.887,954,1.887,955,3.383,956,5.328,957,2.806,958,4.515,959,4.771,960,3.383,961,3.383,962,3.383,963,2.806,964,4.471,965,5.008,966,4.471,967,4.038,968,4.038,969,3.383,970,5.008,971,2.275,972,3.383,973,2.275,974,3.708,975,4.471,976,3.383,977,3.963,978,4.038,979,5.008,980,3.383,981,3.383,982,2.275,983,3.383,984,3.383,985,2.275,986,3.708,987,3.383,988,4.471,989,3.383,990,3.383,991,3.383,992,3.383,993,3.383,994,2.806,995,3.383,996,3.383,997,3.383,998,2.275,999,2.275,1000,3.383,1001,2.275,1002,2.275,1003,2.275,1004,3.383,1005,2.275,1006,2.275,1007,2.275,1008,3.383,1009,2.275,1010,2.275,1011,2.275,1012,2.275,1013,2.275,1014,4.038,1015,2.275,1016,2.275,1017,2.275,1018,4.038,1019,2.275,1020,1.887,1021,2.275,1022,2.275,1023,2.275]],["title/components/StepperComponent.html",[0,0.344,103,0.905]],["body/components/StepperComponent.html",[0,0.41,1,0.749,2,1.078,3,0.285,4,0.285,5,0.898,6,0.898,7,0.898,8,0.246,10,0.622,22,0.898,23,2.021,24,2.021,26,0.898,27,1.515,28,0.898,34,1.884,35,2.646,37,1.293,39,1.293,41,0.246,42,0.41,44,0.598,45,0.036,46,1.078,47,0.683,48,1.074,49,2.337,52,1.823,54,1.105,56,0.749,61,1.308,62,1.838,64,0.285,65,0.285,67,0.622,69,0.565,71,0.82,74,0.898,75,1.293,76,1.293,77,0.898,78,1.658,79,0.898,80,0.991,81,0.898,82,0.749,83,0.898,84,0.749,85,0.898,86,0.898,87,0.749,88,0.82,89,0.898,90,0.749,91,0.82,92,0.565,93,0.024,94,0.898,95,0.749,96,0.898,97,0.749,98,0.898,99,0.749,100,0.898,101,0.749,102,0.898,103,1.526,104,1.293,105,0.898,106,0.898,107,0.021,120,1.293,141,1.553,156,3.061,157,2.09,165,2.154,166,2.864,182,2.417,183,2.319,206,1.623,208,1.925,212,1.435,242,1.308,262,1.658,382,3.061,386,2.125,433,1.451,548,2.337,620,4.024,771,3.061,818,3.061,1024,2.125,1025,3.69,1026,3.69,1027,4.324,1028,3.69,1029,3.69,1030,3.69,1031,3.69,1032,3.69,1033,3.69,1034,3.69,1035,3.69,1036,3.69,1037,2.562,1038,4.324,1039,2.125,1040,3.69,1041,2.562,1042,3.69,1043,3.69,1044,3.69,1045,3.69,1046,3.69,1047,3.69,1048,4.731,1049,4.731,1050,3.69,1051,4.731,1052,3.69,1053,3.69,1054,3.69,1055,3.69,1056,3.69,1057,2.562,1058,2.562,1059,3.69,1060,2.562,1061,2.562,1062,2.562,1063,2.562,1064,3.69,1065,2.562,1066,2.562,1067,2.562,1068,2.562,1069,2.562,1070,2.562,1071,2.562,1072,2.562,1073,2.562,1074,2.562,1075,2.562,1076,2.562,1077,5.014,1078,3.69,1079,3.69]],["title/coverage.html",[1080,3.495]],["body/coverage.html",[0,0.673,1,1.021,8,0.335,9,2.898,44,0.388,45,0.036,65,0.508,73,2.505,82,1.021,84,1.021,87,1.021,88,1.461,90,1.021,92,1.007,93,0.03,95,1.021,97,1.021,99,1.021,101,1.021,103,1.021,107,0.026,108,2.898,109,2.898,110,2.505,116,1.341,139,2.212,175,1.341,188,1.118,190,1.471,200,2.754,204,1.224,218,2.212,223,1.471,241,1.341,246,2.212,249,2.212,251,0.931,262,2.137,345,2.898,346,2.898,347,2.898,352,0.853,353,2.505,355,2.505,377,3.788,378,2.898,460,2.881,500,2.212,503,2.212,504,2.586,542,2.212,544,2.898,545,2.898,547,2.898,578,2.212,579,3.275,582,2.212,583,2.898,601,2.898,602,2.898,603,2.898,607,2.898,780,2.898,789,2.898,790,2.898,791,2.505,884,2.898,909,3.055,952,3.275,954,2.898,1024,2.898,1080,2.898,1081,3.493,1082,3.493,1083,3.493,1084,3.493,1085,2.898,1086,2.898,1087,5.742,1088,4.566,1089,3.493,1090,3.493,1091,3.493,1092,3.493,1093,3.493,1094,3.493,1095,3.493,1096,3.493,1097,3.493,1098,3.493,1099,3.493,1100,5.087,1101,3.493,1102,3.493,1103,3.493,1104,4.566,1105,3.493,1106,3.493,1107,3.493,1108,3.493,1109,3.493,1110,3.493,1111,4.22,1112,2.898,1113,2.898,1114,2.898,1115,3.493]],["title/dependencies.html",[1116,2.15,1117,3.086]],["body/dependencies.html",[45,0.036,56,1.289,58,3.658,93,0.03,107,0.03,231,2.497,240,2.793,242,2.251,1117,3.658,1118,4.41,1119,6.28,1120,4.41,1121,4.41,1122,4.41,1123,4.41,1124,4.41,1125,5.284,1126,5.284,1127,4.41,1128,4.41,1129,4.41,1130,4.41,1131,3.658,1132,4.41,1133,4.41,1134,4.41,1135,4.41,1136,4.41,1137,4.41,1138,4.41,1139,4.41,1140,4.41]],["title/miscellaneous/enumerations.html",[1141,1.641,1142,3.086]],["body/miscellaneous/enumerations.html",[41,0.43,45,0.034,48,1.176,69,0.986,70,1.718,92,0.986,93,0.03,107,0.03,117,3.209,208,1.718,253,2.534,262,1.568,340,2.834,355,3.209,363,3.712,364,4.421,365,3.712,366,3.712,367,3.712,368,3.712,369,3.712,370,3.712,371,3.712,372,3.712,373,3.712,374,3.712,375,3.712,376,3.712,460,2.534,491,3.338,600,3.209,828,3.712,829,4.421,1141,2.834,1142,3.712,1143,4.474,1144,4.474,1145,4.474,1146,4.474,1147,4.474,1148,4.474]],["title/index.html",[41,0.249,1149,2.592,1150,2.592]],["body/index.html",[2,1.397,13,3.138,17,3.966,45,0.03,49,2.375,67,1.389,69,1.16,70,2.02,71,1.53,72,2.215,73,2.69,93,0.027,107,0.027,110,2.69,112,3.429,116,1.835,117,2.69,119,1.736,157,2.124,158,1.314,180,3.111,197,1.201,198,2.435,201,1.927,251,1,433,2.124,461,2.197,464,3.028,471,2.124,479,2.124,487,2.124,534,1.579,542,2.375,548,2.375,549,3.111,552,1.915,791,2.69,795,3.966,902,3.111,912,2.441,914,2.124,915,2.829,957,3.111,958,3.111,959,3.111,963,3.111,974,3.111,977,3.966,986,3.111,994,3.111,1020,3.111,1131,3.111,1151,3.751,1152,3.751,1153,3.751,1154,3.751,1155,3.751,1156,3.751,1157,5.263,1158,3.751,1159,3.751,1160,3.751,1161,3.751,1162,3.751,1163,3.751,1164,3.751,1165,3.751,1166,3.751,1167,3.751,1168,3.751,1169,3.751,1170,3.751,1171,3.751,1172,3.751,1173,3.751,1174,3.751,1175,3.751,1176,3.751,1177,4.781,1178,3.751,1179,3.751,1180,3.751,1181,3.751,1182,3.751,1183,3.751,1184,5.263,1185,3.751,1186,4.781,1187,3.751,1188,3.751,1189,3.751,1190,3.751,1191,3.751,1192,3.751,1193,3.751,1194,3.751,1195,3.751,1196,3.751,1197,3.751,1198,3.751]],["title/modules.html",[1199,3.495]],["body/modules.html",[45,0.032,93,0.032,107,0.032,1199,4.136]],["title/overview.html",[1200,3.495]],["body/overview.html",[2,1.431,45,0.032,93,0.032,107,0.032,253,3.181,354,1.879,501,3.1,502,3.1,514,3.511,953,4.061,1200,4.061]],["title/properties.html",[42,0.414,1116,2.15]],["body/properties.html",[42,0.551,45,0.033,93,0.032,107,0.032,910,2.804,1201,4.952]],["title/miscellaneous/variables.html",[493,2.107,1141,1.641]],["body/miscellaneous/variables.html",[41,0.528,44,0.638,45,0.036,47,1.529,48,1.145,80,0.913,93,0.031,107,0.028,164,2.314,175,1.949,208,2.26,241,1.585,262,1.779,493,2.338,916,2.592,948,2.338,1039,3.424,1085,3.424,1086,4.211,1111,3.424,1112,4.211,1113,4.56,1114,4.56,1141,2.614,1202,4.128,1203,5.498,1204,4.128,1205,4.128,1206,4.128,1207,4.128,1208,4.128,1209,4.128,1210,5.498,1211,4.128,1212,4.128,1213,4.128,1214,4.128,1215,4.128,1216,4.128,1217,4.128,1218,4.128]]],"invertedIndex":[["",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":262,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["0.0.0",{"_index":1201,"title":{},"body":{"properties.html":{}}}],["0.14.3",{"_index":1140,"title":{},"body":{"dependencies.html":{}}}],["0.26.11",{"_index":1138,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1087,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1100,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1101,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1090,"title":{},"body":{"coverage.html":{}}}],["00",{"_index":1210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":208,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/NavbarComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["1/11",{"_index":1110,"title":{},"body":{"coverage.html":{}}}],["1/15",{"_index":1095,"title":{},"body":{"coverage.html":{}}}],["1/18",{"_index":1102,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1084,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1106,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1099,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":1104,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":1092,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":1103,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":502,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"overview.html":{}}}],["100",{"_index":884,"title":{},"body":{"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["12",{"_index":503,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"coverage.html":{}}}],["13.25.0",{"_index":1133,"title":{},"body":{"dependencies.html":{}}}],["16",{"_index":1091,"title":{},"body":{"coverage.html":{}}}],["18",{"_index":1097,"title":{},"body":{"coverage.html":{}}}],["18.0.1",{"_index":1123,"title":{},"body":{"dependencies.html":{}}}],["18.2.4",{"_index":1119,"title":{},"body":{"dependencies.html":{}}}],["18/22",{"_index":1094,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":253,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["2.3.0",{"_index":1136,"title":{},"body":{"dependencies.html":{}}}],["2/11",{"_index":1098,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":504,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["25",{"_index":1088,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":600,"title":{},"body":{"components/NavbarComponent.html":{},"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{}}}],["3/8",{"_index":1108,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1105,"title":{},"body":{"coverage.html":{}}}],["37",{"_index":1107,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":499,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["5",{"_index":780,"title":{},"body":{"components/OverlayComponent.html":{},"coverage.html":{}}}],["5.2.0",{"_index":1130,"title":{},"body":{"dependencies.html":{}}}],["5/20",{"_index":1089,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":1096,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1083,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":500,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"coverage.html":{}}}],["6th",{"_index":980,"title":{},"body":{"injectables/SpellsService.html":{}}}],["7.8.0",{"_index":1134,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":501,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"overview.html":{}}}],["81",{"_index":1093,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1109,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":882,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["9pdf6ttr0j7hmkk_7t6xtpun",{"_index":1036,"title":{},"body":{"components/StepperComponent.html":{}}}],["abbreviation",{"_index":640,"title":{},"body":{"components/OverlayComponent.html":{}}}],["access",{"_index":1183,"title":{},"body":{"index.html":{}}}],["accessors",{"_index":397,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["action",{"_index":1161,"title":{},"body":{"index.html":{}}}],["actions",{"_index":1178,"title":{},"body":{"index.html":{}}}],["actual_component",{"_index":106,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["add",{"_index":771,"title":{},"body":{"components/OverlayComponent.html":{},"components/StepperComponent.html":{}}}],["added",{"_index":381,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["adding",{"_index":475,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["additional",{"_index":911,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["addobservabletoautocomplete",{"_index":142,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["addobservabletoleveldropdown",{"_index":143,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["address",{"_index":624,"title":{},"body":{"components/OverlayComponent.html":{}}}],["address2",{"_index":625,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform",{"_index":612,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls['address'].haserror('required",{"_index":770,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls['city'].haserror('required",{"_index":776,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls['firstname'].haserror('required",{"_index":766,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls['lastname'].haserror('required",{"_index":768,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls['state'].haserror('required",{"_index":778,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls[\\'address\\'].haserror(\\'required",{"_index":786,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls[\\'city\\'].haserror(\\'required",{"_index":787,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls[\\'firstname\\'].haserror(\\'required",{"_index":784,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls[\\'lastname\\'].haserror(\\'required",{"_index":785,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls[\\'state\\'].haserror(\\'required",{"_index":788,"title":{},"body":{"components/OverlayComponent.html":{}}}],["advantage",{"_index":491,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{}}}],["advantage.advantage",{"_index":822,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantage.disadvantage",{"_index":824,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantage.none",{"_index":497,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["advantageadvantage",{"_index":800,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantagedisadvantage",{"_index":801,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantageenum",{"_index":802,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantagenone",{"_index":803,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantageoptions",{"_index":804,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["ak",{"_index":643,"title":{},"body":{"components/OverlayComponent.html":{}}}],["al",{"_index":641,"title":{},"body":{"components/OverlayComponent.html":{}}}],["alabama",{"_index":639,"title":{},"body":{"components/OverlayComponent.html":{}}}],["alaska",{"_index":642,"title":{},"body":{"components/OverlayComponent.html":{}}}],["alert('thanks",{"_index":765,"title":{},"body":{"components/OverlayComponent.html":{}}}],["algorithm",{"_index":1192,"title":{},"body":{"index.html":{}}}],["allow",{"_index":913,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["allows",{"_index":113,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["american",{"_index":644,"title":{},"body":{"components/OverlayComponent.html":{}}}],["amount",{"_index":118,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["amounts",{"_index":1155,"title":{},"body":{"index.html":{}}}],["angular",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["angular/animations",{"_index":1118,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1120,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/layout",{"_index":598,"title":{},"body":{"components/NavbarComponent.html":{}}}],["angular/common",{"_index":231,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/SkillCheckComponent.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":1002,"title":{},"body":{"injectables/SpellsService.html":{}}}],["angular/compiler",{"_index":1121,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"dependencies.html":{}}}],["angular/fire",{"_index":1122,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":242,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":1124,"title":{},"body":{"dependencies.html":{}}}],["angular/material/autocomplete",{"_index":245,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["angular/material/button",{"_index":61,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["angular/material/card",{"_index":248,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["angular/material/form",{"_index":1076,"title":{},"body":{"components/StepperComponent.html":{}}}],["angular/material/icon",{"_index":62,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{},"components/StepperComponent.html":{}}}],["angular/material/input",{"_index":243,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["angular/material/list",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["angular/material/radio",{"_index":764,"title":{},"body":{"components/OverlayComponent.html":{}}}],["angular/material/select",{"_index":244,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["angular/material/sidenav",{"_index":59,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["angular/material/table",{"_index":571,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["angular/material/toolbar",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["angular/platform",{"_index":1125,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":58,"title":{},"body":{"components/AppComponent.html":{},"dependencies.html":{}}}],["angularbg3cheats",{"_index":1151,"title":{},"body":{"index.html":{}}}],["api",{"_index":198,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["api/spells/cantrip",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/spells/level",{"_index":1218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":24,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["app.component.html",{"_index":38,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":40,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":1086,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appears",{"_index":558,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["applicationconfig",{"_index":1204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apt",{"_index":773,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ar",{"_index":649,"title":{},"body":{"components/OverlayComponent.html":{}}}],["arizona",{"_index":646,"title":{},"body":{"components/OverlayComponent.html":{}}}],["arkansas",{"_index":648,"title":{},"body":{"components/OverlayComponent.html":{}}}],["array",{"_index":162,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["array(6",{"_index":213,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["array(7).keys()].slice(spell.level",{"_index":264,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["arrays",{"_index":535,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["async",{"_index":339,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{}}}],["asyncpipe",{"_index":584,"title":{},"body":{"components/NavbarComponent.html":{}}}],["attack",{"_index":71,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["attackrollscomponent",{"_index":82,"title":{"components/AttackRollsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["attackrollsform",{"_index":132,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["attackrollsformsubmit",{"_index":144,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["attempts",{"_index":490,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{}}}],["attemptsoptions",{"_index":805,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["autocomplete",{"_index":155,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["automatic",{"_index":888,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["automatically",{"_index":383,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["az",{"_index":647,"title":{},"body":{"components/OverlayComponent.html":{}}}],["bar",{"_index":554,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["barbarian",{"_index":365,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["bard",{"_index":366,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["based",{"_index":159,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["bg3",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["block",{"_index":572,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["bonus",{"_index":88,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["boolean",{"_index":818,"title":{},"body":{"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["both",{"_index":380,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{}}}],["breakpointobserver",{"_index":587,"title":{},"body":{"components/NavbarComponent.html":{}}}],["breakpoints",{"_index":597,"title":{},"body":{"components/NavbarComponent.html":{}}}],["browser",{"_index":1126,"title":{},"body":{"dependencies.html":{}}}],["build",{"_index":1164,"title":{},"body":{"index.html":{}}}],["built",{"_index":1174,"title":{},"body":{"index.html":{}}}],["buttons",{"_index":1197,"title":{},"body":{"index.html":{}}}],["c/o",{"_index":772,"title":{},"body":{"components/OverlayComponent.html":{}}}],["c77de\",\"appid\":\"1:864287131419:web:4b60183cca62591db7b5be\",\"storagebucket\":\"test",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["c77de.firebaseapp.com\",\"messagingsenderid\":\"864287131419",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["c77de.firebasestorage.app\",\"apikey\":\"aizasydp4kd1dombpfosirbe7i6dyljmbbnbtay\",\"authdomain\":\"test",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ca",{"_index":651,"title":{},"body":{"components/OverlayComponent.html":{}}}],["calc",{"_index":344,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["calculate",{"_index":117,"title":{},"body":{"components/AttackRollsComponent.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["calculating",{"_index":464,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"index.html":{}}}],["calculations",{"_index":487,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"index.html":{}}}],["calculations.serivce.ts",{"_index":496,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["calculations.service",{"_index":252,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{}}}],["calculations.service.ts",{"_index":542,"title":{},"body":{"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"coverage.html":{},"index.html":{}}}],["calculator",{"_index":68,"title":{},"body":{"components/AppComponent.html":{}}}],["california",{"_index":650,"title":{},"body":{"components/OverlayComponent.html":{}}}],["call",{"_index":975,"title":{},"body":{"injectables/SpellsService.html":{}}}],["calls",{"_index":957,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["cantrip",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["carolina",{"_index":716,"title":{},"body":{"components/OverlayComponent.html":{}}}],["case",{"_index":1030,"title":{},"body":{"components/StepperComponent.html":{}}}],["catch(e",{"_index":1022,"title":{},"body":{"injectables/SpellsService.html":{}}}],["certain",{"_index":1154,"title":{},"body":{"index.html":{}}}],["chance",{"_index":470,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{}}}],["change",{"_index":156,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/StepperComponent.html":{}}}],["changes",{"_index":163,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["character",{"_index":85,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["characterclass",{"_index":364,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["charactersheetcomponent",{"_index":84,"title":{"components/CharacterSheetComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["characterstats",{"_index":353,"title":{"interfaces/CharacterStats.html":{}},"body":{"interfaces/CharacterStats.html":{},"coverage.html":{}}}],["charisma",{"_index":356,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["cheats",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["check",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["check'},{'name",{"_index":102,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["check.component.html",{"_index":798,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.scss",{"_index":799,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts",{"_index":791,"title":{},"body":{"components/SkillCheckComponent.html":{},"coverage.html":{},"index.html":{}}}],["check.component.ts:105",{"_index":819,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:110",{"_index":811,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:30",{"_index":832,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:31",{"_index":840,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:32",{"_index":821,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:33",{"_index":839,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:44",{"_index":833,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:52",{"_index":826,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:53",{"_index":827,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:54",{"_index":823,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:55",{"_index":825,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:56",{"_index":830,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:61",{"_index":831,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:63",{"_index":816,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:67",{"_index":814,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:79",{"_index":813,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:88",{"_index":820,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check/skill",{"_index":790,"title":{},"body":{"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["checking",{"_index":792,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["city",{"_index":626,"title":{},"body":{"components/OverlayComponent.html":{}}}],["class",{"_index":65,"title":{"classes/DiceSet.html":{},"classes/Spell.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["classes",{"_index":514,"title":{},"body":{"classes/DiceSet.html":{},"classes/Spell.html":{},"overview.html":{}}}],["cleric",{"_index":367,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["co",{"_index":653,"title":{},"body":{"components/OverlayComponent.html":{}}}],["colorado",{"_index":652,"title":{},"body":{"components/OverlayComponent.html":{}}}],["columbia",{"_index":659,"title":{},"body":{"components/OverlayComponent.html":{}}}],["commonmodule",{"_index":122,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{}}}],["company",{"_index":619,"title":{},"body":{"components/OverlayComponent.html":{}}}],["compodoc",{"_index":1175,"title":{},"body":{"index.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":79,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["componentref",{"_index":202,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"index.html":{},"overview.html":{}}}],["connecticut",{"_index":654,"title":{},"body":{"components/OverlayComponent.html":{}}}],["console.log('attack",{"_index":336,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["console.log('damage",{"_index":937,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["console.log('pipe",{"_index":1011,"title":{},"body":{"injectables/SpellsService.html":{}}}],["console.log('skill",{"_index":869,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["console.log('submit",{"_index":313,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["console.log('table",{"_index":860,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["console.log(skillchecksuccesschance",{"_index":872,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["const",{"_index":255,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["constitution",{"_index":357,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["construction",{"_index":849,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["constructor",{"_index":150,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/DiceSet.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{}}}],["constructor(http",{"_index":969,"title":{},"body":{"injectables/SpellsService.html":{}}}],["constructor(name",{"_index":918,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["constructor(undefined",{"_index":516,"title":{},"body":{"classes/DiceSet.html":{}}}],["contains",{"_index":977,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["control",{"_index":382,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/StepperComponent.html":{}}}],["controlcontainer",{"_index":387,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["controlkey",{"_index":395,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["controlvalueaccessor",{"_index":1038,"title":{},"body":{"components/StepperComponent.html":{}}}],["converts",{"_index":177,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["count",{"_index":948,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":1080,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":992,"title":{},"body":{"injectables/SpellsService.html":{}}}],["created",{"_index":482,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["creates",{"_index":546,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"injectables/SpellsService.html":{}}}],["createtablecomponent",{"_index":808,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["createtablecomponent(tableinput",{"_index":812,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["ct",{"_index":655,"title":{},"body":{"components/OverlayComponent.html":{}}}],["cum",{"_index":569,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["cumpercentageresults",{"_index":465,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["current",{"_index":185,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["currentadvantagevalue",{"_index":817,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["currentspellrange",{"_index":133,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["custom",{"_index":1026,"title":{},"body":{"components/StepperComponent.html":{}}}],["d10",{"_index":402,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["d10(dicenum",{"_index":448,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["d10num",{"_index":539,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["d12",{"_index":403,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["d12(dicenum",{"_index":451,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["d12num",{"_index":540,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["d20",{"_index":486,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["d20num",{"_index":541,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["d4",{"_index":399,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["d4(dicenum",{"_index":439,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["d4num",{"_index":536,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["d6",{"_index":400,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["d6(dicenum",{"_index":442,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["d6num",{"_index":537,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["d8",{"_index":401,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["d8(dicenum",{"_index":445,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["d8num",{"_index":538,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["dakota",{"_index":718,"title":{},"body":{"components/OverlayComponent.html":{}}}],["damage",{"_index":119,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["damage={0",{"_index":931,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["data",{"_index":461,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["day",{"_index":782,"title":{},"body":{"components/OverlayComponent.html":{}}}],["dc",{"_index":660,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["de",{"_index":657,"title":{},"body":{"components/OverlayComponent.html":{}}}],["decimals",{"_index":894,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["decision",{"_index":1158,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":215,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["decrement",{"_index":1048,"title":{},"body":{"components/StepperComponent.html":{}}}],["default",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["delaware",{"_index":656,"title":{},"body":{"components/OverlayComponent.html":{}}}],["dependencies",{"_index":1117,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["deployed",{"_index":1176,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1179,"title":{},"body":{"index.html":{}}}],["described",{"_index":480,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["description",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["designed",{"_index":1153,"title":{},"body":{"index.html":{}}}],["details",{"_index":1191,"title":{},"body":{"index.html":{}}}],["determine",{"_index":1156,"title":{},"body":{"index.html":{}}}],["dexterity",{"_index":358,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["dice",{"_index":67,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["dicebonuscomponent",{"_index":134,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["dicebonusformcomponent",{"_index":87,"title":{"components/DiceBonusFormComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["dicecalcresults",{"_index":326,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["dicecalcservice",{"_index":135,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["dicecalculations",{"_index":563,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["dicecalculationsservice",{"_index":218,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["dicenum",{"_index":416,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["diceresults",{"_index":190,"title":{"interfaces/DiceResults.html":{}},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["dicerollresults",{"_index":868,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["dicerolls",{"_index":170,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["diceset",{"_index":251,"title":{"classes/DiceSet.html":{}},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"coverage.html":{},"index.html":{}}}],["diceset(diedict",{"_index":858,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diceset(json.parse",{"_index":311,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["diceset.target.tostring",{"_index":877,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diceset.ts",{"_index":1188,"title":{},"body":{"index.html":{}}}],["diceseti",{"_index":188,"title":{"interfaces/DiceSetI.html":{}},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"coverage.html":{}}}],["dicestring",{"_index":517,"title":{},"body":{"classes/DiceSet.html":{}}}],["dict",{"_index":847,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["die",{"_index":91,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["diebonuses",{"_index":846,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diebonusform",{"_index":806,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diedict",{"_index":310,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["diedict['advantage",{"_index":854,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diedict['attempts",{"_index":856,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diedict['d20",{"_index":851,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diedict['target",{"_index":852,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["dierollresultstablecomponent",{"_index":90,"title":{"components/DieRollResultsTableComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["different",{"_index":543,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["directive",{"_index":77,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["directives",{"_index":105,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["disadvantage",{"_index":829,"title":{},"body":{"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{}}}],["display",{"_index":796,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["displayedcolumns",{"_index":564,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["displayspellautocompletevalue",{"_index":145,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["displayspellautocompletevalue(selectedvalue",{"_index":174,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["district",{"_index":658,"title":{},"body":{"components/OverlayComponent.html":{}}}],["dnd",{"_index":915,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["dnd5eapi",{"_index":976,"title":{},"body":{"injectables/SpellsService.html":{}}}],["document.getelementbyid('damage",{"_index":317,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["document.getelementbyid('success",{"_index":865,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["document.getelementbyid('target",{"_index":867,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["documentation",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{},"index.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["done",{"_index":1172,"title":{},"body":{"index.html":{}}}],["dropdown",{"_index":168,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["dropdowngroup",{"_index":578,"title":{"interfaces/DropdownGroup.html":{}},"body":{"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"coverage.html":{}}}],["dropdownitem",{"_index":582,"title":{"interfaces/DropdownItem.html":{}},"body":{"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"coverage.html":{}}}],["druid",{"_index":368,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["dynamic",{"_index":1127,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":534,"title":{},"body":{"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["easier",{"_index":914,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"index.html":{}}}],["easy",{"_index":848,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["edit",{"_index":379,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["element",{"_index":76,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["element.cumpercentageresults",{"_index":575,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["element.numresults",{"_index":574,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["element.percentageresults",{"_index":576,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["element.rollresult",{"_index":573,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["empty",{"_index":186,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["enum",{"_index":363,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":1142,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":473,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["export",{"_index":64,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["extends",{"_index":484,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["fail",{"_index":890,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["false",{"_index":637,"title":{},"body":{"components/OverlayComponent.html":{}}}],["fb",{"_index":613,"title":{},"body":{"components/OverlayComponent.html":{}}}],["federated",{"_index":661,"title":{},"body":{"components/OverlayComponent.html":{}}}],["field",{"_index":1027,"title":{},"body":{"components/StepperComponent.html":{}}}],["fighter",{"_index":369,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["filter",{"_index":983,"title":{},"body":{"injectables/SpellsService.html":{}}}],["filter(spelllist",{"_index":303,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["filteredgroupspelllist",{"_index":136,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["firebase",{"_index":1131,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["first",{"_index":767,"title":{},"body":{"components/OverlayComponent.html":{}}}],["firstname",{"_index":621,"title":{},"body":{"components/OverlayComponent.html":{}}}],["fl",{"_index":665,"title":{},"body":{"components/OverlayComponent.html":{}}}],["flat",{"_index":1147,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["florida",{"_index":664,"title":{},"body":{"components/OverlayComponent.html":{}}}],["flowicon",{"_index":908,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["fm",{"_index":663,"title":{},"body":{"components/OverlayComponent.html":{}}}],["fn",{"_index":1064,"title":{},"body":{"components/StepperComponent.html":{}}}],["for(item",{"_index":899,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["for(let",{"_index":289,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["for(spell",{"_index":341,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["for(spellgroup",{"_index":338,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["forkjoin",{"_index":236,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["forkjoin(spellsgroups).pipe",{"_index":298,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["form",{"_index":157,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["form'},{'name",{"_index":89,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["form.component",{"_index":247,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["form.component.html",{"_index":384,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.scss",{"_index":391,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts",{"_index":378,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"coverage.html":{}}}],["form.component.ts:25",{"_index":409,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:26",{"_index":405,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:27",{"_index":406,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:29",{"_index":411,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:33",{"_index":413,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:37",{"_index":415,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:41",{"_index":418,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:45",{"_index":420,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:49",{"_index":422,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:53",{"_index":424,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:57",{"_index":426,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:61",{"_index":428,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:65",{"_index":430,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:69",{"_index":432,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:73",{"_index":408,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:86",{"_index":407,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form/dice",{"_index":246,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["formbuilder",{"_index":762,"title":{},"body":{"components/OverlayComponent.html":{}}}],["formcontrol",{"_index":206,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["formcontrol(0",{"_index":454,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{}}}],["formcontrol(1",{"_index":837,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["formcontrol(advantage.none",{"_index":836,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["formcontrol(this.selectedspell?.level",{"_index":207,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["formgroup",{"_index":205,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{}}}],["forms",{"_index":559,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["formsmodule",{"_index":1044,"title":{},"body":{"components/StepperComponent.html":{}}}],["forwardref",{"_index":1042,"title":{},"body":{"components/StepperComponent.html":{}}}],["found",{"_index":604,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found'},{'name",{"_index":98,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["found.component.html",{"_index":605,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found.component.scss",{"_index":606,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found.component.ts",{"_index":603,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["found/not",{"_index":602,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["free",{"_index":633,"title":{},"body":{"components/OverlayComponent.html":{}}}],["freepik",{"_index":903,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["frontend",{"_index":795,"title":{},"body":{"components/SkillCheckComponent.html":{},"index.html":{}}}],["function",{"_index":986,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["functions",{"_index":912,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["ga",{"_index":667,"title":{},"body":{"components/OverlayComponent.html":{}}}],["generated",{"_index":463,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["generatediceset",{"_index":146,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["generates",{"_index":794,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["generatetable",{"_index":147,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["generatetable(tableinput",{"_index":189,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["georgia",{"_index":666,"title":{},"body":{"components/OverlayComponent.html":{}}}],["getallspells",{"_index":965,"title":{},"body":{"injectables/SpellsService.html":{}}}],["getallspellsoflevel",{"_index":964,"title":{},"body":{"injectables/SpellsService.html":{}}}],["getallspellsoflevel(level",{"_index":981,"title":{},"body":{"injectables/SpellsService.html":{}}}],["getauth",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getd10",{"_index":425,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["getd12",{"_index":429,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["getd4",{"_index":412,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["getd6",{"_index":417,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["getd8",{"_index":421,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["getparentformgroup",{"_index":410,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["gets",{"_index":196,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["getspell",{"_index":966,"title":{},"body":{"injectables/SpellsService.html":{}}}],["getspell(url",{"_index":984,"title":{},"body":{"injectables/SpellsService.html":{}}}],["getting",{"_index":1149,"title":{"index.html":{}},"body":{}}],["github",{"_index":1177,"title":{},"body":{"index.html":{}}}],["give",{"_index":997,"title":{},"body":{"injectables/SpellsService.html":{}}}],["given",{"_index":989,"title":{},"body":{"injectables/SpellsService.html":{}}}],["gotten",{"_index":1187,"title":{},"body":{"index.html":{}}}],["group",{"_index":580,"title":{},"body":{"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/SkillCheckComponent.html":{}}}],["groupname",{"_index":581,"title":{},"body":{"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{}}}],["gu",{"_index":669,"title":{},"body":{"components/OverlayComponent.html":{}}}],["guam",{"_index":668,"title":{},"body":{"components/OverlayComponent.html":{}}}],["guide",{"_index":1028,"title":{},"body":{"components/StepperComponent.html":{}}}],["hampshire",{"_index":707,"title":{},"body":{"components/OverlayComponent.html":{}}}],["handled",{"_index":1180,"title":{},"body":{"index.html":{}}}],["hardcodedautocomplete",{"_index":210,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["hasunitnumber",{"_index":614,"title":{},"body":{"components/OverlayComponent.html":{}}}],["hawaii",{"_index":670,"title":{},"body":{"components/OverlayComponent.html":{}}}],["here",{"_index":1029,"title":{},"body":{"components/StepperComponent.html":{}}}],["hi",{"_index":671,"title":{},"body":{"components/OverlayComponent.html":{}}}],["higher",{"_index":472,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{}}}],["hold",{"_index":462,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["holds",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceSetI.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["home",{"_index":11,"title":{},"body":{"components/AppComponent.html":{}}}],["html",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["http",{"_index":956,"title":{},"body":{"injectables/SpellsService.html":{}}}],["httpclient",{"_index":970,"title":{},"body":{"injectables/SpellsService.html":{}}}],["https://flowbite.com/docs/forms/number",{"_index":1037,"title":{},"body":{"components/StepperComponent.html":{}}}],["https://jsonplaceholder.typicode.com",{"_index":962,"title":{},"body":{"injectables/SpellsService.html":{}}}],["https://transform.tools/json",{"_index":945,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["https://v5.material.angular.io/guide/creating",{"_index":1025,"title":{},"body":{"components/StepperComponent.html":{}}}],["https://www.dnd5eapi.co",{"_index":1166,"title":{},"body":{"index.html":{}}}],["https://www.dnd5eapi.co/api",{"_index":960,"title":{},"body":{"injectables/SpellsService.html":{}}}],["https://www.dnd5eapi.co/api/spells",{"_index":947,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["https://www.youtube.com/watch?v=xtcjqawij2c&list=plw5h0dij",{"_index":1035,"title":{},"body":{"components/StepperComponent.html":{}}}],["ia",{"_index":678,"title":{},"body":{"components/OverlayComponent.html":{}}}],["icons",{"_index":901,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["id",{"_index":673,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["idaho",{"_index":672,"title":{},"body":{"components/OverlayComponent.html":{}}}],["identifier",{"_index":1081,"title":{},"body":{"coverage.html":{}}}],["if(minelement",{"_index":321,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["if(spell.level",{"_index":261,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["if(spelllevel",{"_index":1017,"title":{},"body":{"injectables/SpellsService.html":{}}}],["if(successelement",{"_index":871,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["if(tableinput",{"_index":308,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["if(targetdcelement",{"_index":875,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["il",{"_index":675,"title":{},"body":{"components/OverlayComponent.html":{}}}],["illinois",{"_index":674,"title":{},"body":{"components/OverlayComponent.html":{}}}],["implement",{"_index":494,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["implementation",{"_index":492,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["implements",{"_index":120,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"components/StepperComponent.html":{}}}],["import",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["imports",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["impossible",{"_index":885,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["increment",{"_index":1049,"title":{},"body":{"components/StepperComponent.html":{}}}],["index",{"_index":41,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["indiana",{"_index":676,"title":{},"body":{"components/OverlayComponent.html":{}}}],["individual",{"_index":950,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["information",{"_index":197,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["initialize",{"_index":153,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["initializeapp({\"projectid\":\"test",{"_index":1209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":232,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["inject(breakpointobserver",{"_index":589,"title":{},"body":{"components/NavbarComponent.html":{}}}],["inject(controlcontainer",{"_index":389,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["inject(dicecalculationsservice",{"_index":219,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{}}}],["inject(formbuilder",{"_index":635,"title":{},"body":{"components/OverlayComponent.html":{}}}],["inject(spellsservice",{"_index":225,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["injectable",{"_index":952,"title":{"injectables/SpellsService.html":{}},"body":{"injectables/SpellsService.html":{},"coverage.html":{}}}],["injectables",{"_index":953,"title":{},"body":{"injectables/SpellsService.html":{},"overview.html":{}}}],["injection",{"_index":972,"title":{},"body":{"injectables/SpellsService.html":{}}}],["input",{"_index":433,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["input({required",{"_index":435,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["inputs",{"_index":394,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{}}}],["inputted",{"_index":996,"title":{},"body":{"injectables/SpellsService.html":{}}}],["intelligence",{"_index":359,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["interface",{"_index":352,"title":{"interfaces/CharacterStats.html":{},"interfaces/DiceResults.html":{},"interfaces/DiceSetI.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}},"body":{"interfaces/CharacterStats.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"coverage.html":{}}}],["interfaces",{"_index":354,"title":{},"body":{"interfaces/CharacterStats.html":{},"interfaces/DiceResults.html":{},"interfaces/DiceSetI.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"overview.html":{}}}],["iowa",{"_index":677,"title":{},"body":{"components/OverlayComponent.html":{}}}],["isadvantagenone",{"_index":809,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["isadvantagenone(currentadvantagevalue",{"_index":815,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["isdisabled",{"_index":1069,"title":{},"body":{"components/StepperComponent.html":{}}}],["ishandset",{"_index":588,"title":{},"body":{"components/NavbarComponent.html":{}}}],["island",{"_index":736,"title":{},"body":{"components/OverlayComponent.html":{}}}],["islands",{"_index":687,"title":{},"body":{"components/OverlayComponent.html":{}}}],["item",{"_index":900,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["iterable",{"_index":485,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["iterator",{"_index":495,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["jersey",{"_index":709,"title":{},"body":{"components/OverlayComponent.html":{}}}],["json",{"_index":1129,"title":{},"body":{"dependencies.html":{}}}],["json.parse",{"_index":842,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["json.stringify(this.attackrollsform.value))['diebonuses",{"_index":312,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["json.stringify(this.skillcheckform.value))['diebonuses",{"_index":843,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["kansas",{"_index":679,"title":{},"body":{"components/OverlayComponent.html":{}}}],["karma",{"_index":1173,"title":{},"body":{"index.html":{}}}],["kentucky",{"_index":681,"title":{},"body":{"components/OverlayComponent.html":{}}}],["key",{"_index":936,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["keys",{"_index":498,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["ks",{"_index":680,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ky",{"_index":682,"title":{},"body":{"components/OverlayComponent.html":{}}}],["la",{"_index":684,"title":{},"body":{"components/OverlayComponent.html":{}}}],["label",{"_index":396,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{}}}],["last",{"_index":769,"title":{},"body":{"components/OverlayComponent.html":{}}}],["lastname",{"_index":623,"title":{},"body":{"components/OverlayComponent.html":{}}}],["layout",{"_index":1170,"title":{},"body":{"index.html":{}}}],["legend",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["level",{"_index":164,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/CharacterStats.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"miscellaneous/variables.html":{}}}],["level=1",{"_index":930,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["levelnum",{"_index":279,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["likelihood",{"_index":1157,"title":{},"body":{"index.html":{}}}],["line",{"_index":845,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["link",{"_index":112,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"index.html":{}}}],["linked",{"_index":111,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["links",{"_index":16,"title":{},"body":{"components/AppComponent.html":{}}}],["list",{"_index":958,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["literal",{"_index":921,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{}}}],["looks",{"_index":557,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["louisiana",{"_index":683,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ma",{"_index":692,"title":{},"body":{"components/OverlayComponent.html":{}}}],["made",{"_index":902,"title":{},"body":{"components/SkillCheckComponent.html":{},"index.html":{}}}],["main",{"_index":963,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["maine",{"_index":685,"title":{},"body":{"components/OverlayComponent.html":{}}}],["make",{"_index":1033,"title":{},"body":{"components/StepperComponent.html":{}}}],["makes",{"_index":974,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["making",{"_index":987,"title":{},"body":{"injectables/SpellsService.html":{}}}],["many",{"_index":533,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["map",{"_index":237,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"injectables/SpellsService.html":{}}}],["map(result",{"_index":593,"title":{},"body":{"components/NavbarComponent.html":{}}}],["map(spellgroup",{"_index":299,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["mariana",{"_index":721,"title":{},"body":{"components/OverlayComponent.html":{}}}],["marshall",{"_index":686,"title":{},"body":{"components/OverlayComponent.html":{}}}],["maryland",{"_index":689,"title":{},"body":{"components/OverlayComponent.html":{}}}],["massachusetts",{"_index":691,"title":{},"body":{"components/OverlayComponent.html":{}}}],["matautocompletemodule",{"_index":126,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["matbuttonmodule",{"_index":34,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["matbuttontogglemodule",{"_index":797,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["matcardmodule",{"_index":127,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["matching",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":549,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"index.html":{}}}],["matformfieldmodule",{"_index":1045,"title":{},"body":{"components/StepperComponent.html":{}}}],["maticonmodule",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{},"components/StepperComponent.html":{}}}],["matinputmodule",{"_index":123,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["matlistmodule",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["matradiomodule",{"_index":609,"title":{},"body":{"components/OverlayComponent.html":{}}}],["matselectmodule",{"_index":125,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["matsidenavmodule",{"_index":32,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["mattablemodule",{"_index":560,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["mattoolbarmodule",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["max",{"_index":320,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["maxelement",{"_index":319,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["maxelement.innertext",{"_index":324,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["md",{"_index":690,"title":{},"body":{"components/OverlayComponent.html":{}}}],["menu",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["metadata",{"_index":22,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["methods",{"_index":141,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["mexico",{"_index":711,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mh",{"_index":688,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mi",{"_index":694,"title":{},"body":{"components/OverlayComponent.html":{}}}],["michigan",{"_index":693,"title":{},"body":{"components/OverlayComponent.html":{}}}],["micronesia",{"_index":662,"title":{},"body":{"components/OverlayComponent.html":{}}}],["min",{"_index":318,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["mind",{"_index":1032,"title":{},"body":{"components/StepperComponent.html":{}}}],["minelement",{"_index":316,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["minelement.innertext",{"_index":322,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["minlevel",{"_index":266,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["minnesota",{"_index":695,"title":{},"body":{"components/OverlayComponent.html":{}}}],["miscellaneous",{"_index":1141,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mississippi",{"_index":697,"title":{},"body":{"components/OverlayComponent.html":{}}}],["missouri",{"_index":699,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mn",{"_index":696,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mo",{"_index":700,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mockspellresponse",{"_index":1112,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockspellresult0",{"_index":1113,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockspellresult1",{"_index":1114,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["modified",{"_index":1195,"title":{},"body":{"index.html":{}}}],["modifier",{"_index":455,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["modifier=0",{"_index":1007,"title":{},"body":{"injectables/SpellsService.html":{}}}],["modules",{"_index":1199,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monk",{"_index":370,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["montana",{"_index":701,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mp",{"_index":722,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ms",{"_index":698,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mt",{"_index":702,"title":{},"body":{"components/OverlayComponent.html":{}}}],["multi",{"_index":1043,"title":{},"body":{"components/StepperComponent.html":{}}}],["nadiinko",{"_index":907,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["name",{"_index":80,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":179,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["natural",{"_index":887,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["navbar",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{}}}],["navbar'},{'name",{"_index":96,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["navbar.component.html",{"_index":585,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbar.component.scss",{"_index":586,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbarcomponent",{"_index":95,"title":{"components/NavbarComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["nbsp",{"_index":577,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["nbsp;d4",{"_index":457,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["nbsp;d6",{"_index":458,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["nbsp;d8",{"_index":459,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["nc",{"_index":717,"title":{},"body":{"components/OverlayComponent.html":{}}}],["nd",{"_index":719,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ne",{"_index":704,"title":{},"body":{"components/OverlayComponent.html":{}}}],["nebraska",{"_index":703,"title":{},"body":{"components/OverlayComponent.html":{}}}],["necessary",{"_index":929,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["needs",{"_index":995,"title":{},"body":{"injectables/SpellsService.html":{}}}],["nevada",{"_index":705,"title":{},"body":{"components/OverlayComponent.html":{}}}],["new",{"_index":204,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"coverage.html":{}}}],["newvalue",{"_index":1072,"title":{},"body":{"components/StepperComponent.html":{}}}],["next",{"_index":513,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/OverlayComponent.html":{}}}],["ng_value_accessor",{"_index":1040,"title":{},"body":{"components/StepperComponent.html":{}}}],["ngondestroy",{"_index":393,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["ngoninit",{"_index":148,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{}}}],["nh",{"_index":708,"title":{},"body":{"components/OverlayComponent.html":{}}}],["nj",{"_index":710,"title":{},"body":{"components/OverlayComponent.html":{}}}],["nm",{"_index":712,"title":{},"body":{"components/OverlayComponent.html":{}}}],["none",{"_index":828,"title":{},"body":{"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{}}}],["north",{"_index":715,"title":{},"body":{"components/OverlayComponent.html":{}}}],["northern",{"_index":720,"title":{},"body":{"components/OverlayComponent.html":{}}}],["note",{"_index":883,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["notfoundcomponent",{"_index":97,"title":{"components/NotFoundComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["npmcli/package",{"_index":1128,"title":{},"body":{"dependencies.html":{}}}],["null",{"_index":620,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["num",{"_index":568,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["number",{"_index":212,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["numresults",{"_index":466,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["nv",{"_index":706,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ny",{"_index":714,"title":{},"body":{"components/OverlayComponent.html":{}}}],["object",{"_index":919,"title":{},"body":{"classes/Spell.html":{}}}],["observable",{"_index":154,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"injectables/SpellsService.html":{}}}],["oh",{"_index":724,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ohio",{"_index":723,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ok",{"_index":726,"title":{},"body":{"components/OverlayComponent.html":{}}}],["oklahoma",{"_index":725,"title":{},"body":{"components/OverlayComponent.html":{}}}],["once",{"_index":850,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["onchange",{"_index":1050,"title":{},"body":{"components/StepperComponent.html":{}}}],["onchange(value",{"_index":1059,"title":{},"body":{"components/StepperComponent.html":{}}}],["one",{"_index":1034,"title":{},"body":{"components/StepperComponent.html":{}}}],["oninit",{"_index":121,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["onsubmit",{"_index":616,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ontouch",{"_index":1051,"title":{},"body":{"components/StepperComponent.html":{}}}],["option",{"_index":895,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["option.id",{"_index":896,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["option.name",{"_index":898,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["option.value",{"_index":897,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["optional",{"_index":183,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["order",{"_index":993,"title":{},"body":{"injectables/SpellsService.html":{}}}],["oregon",{"_index":727,"title":{},"body":{"components/OverlayComponent.html":{}}}],["organize",{"_index":1186,"title":{},"body":{"index.html":{}}}],["organizes",{"_index":18,"title":{},"body":{"components/AppComponent.html":{},"components/DieRollResultsTableComponent.html":{}}}],["organizing",{"_index":1169,"title":{},"body":{"index.html":{}}}],["outlet",{"_index":20,"title":{},"body":{"components/AppComponent.html":{}}}],["overlay",{"_index":608,"title":{},"body":{"components/OverlayComponent.html":{}}}],["overlay'},{'name",{"_index":100,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["overlay.component.html",{"_index":610,"title":{},"body":{"components/OverlayComponent.html":{}}}],["overlay.component.scss",{"_index":611,"title":{},"body":{"components/OverlayComponent.html":{}}}],["overlaycomponent",{"_index":99,"title":{"components/OverlayComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["overview",{"_index":1200,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["pa",{"_index":731,"title":{},"body":{"components/OverlayComponent.html":{}}}],["package",{"_index":1116,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"components/NotFoundComponent.html":{}}}],["pages",{"_index":17,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["paladin",{"_index":371,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["palau",{"_index":728,"title":{},"body":{"components/OverlayComponent.html":{}}}],["param",{"_index":285,"title":{},"body":{"components/AttackRollsComponent.html":{},"injectables/SpellsService.html":{}}}],["parameters",{"_index":182,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["parentcontainer",{"_index":392,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["parentformgroup",{"_index":398,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["parseint(key",{"_index":938,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["pennsylvania",{"_index":730,"title":{},"body":{"components/OverlayComponent.html":{}}}],["percent",{"_index":469,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["percentage",{"_index":481,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{}}}],["percentageresults",{"_index":467,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["percentages",{"_index":891,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["perfect",{"_index":906,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["pipe",{"_index":592,"title":{},"body":{"components/NavbarComponent.html":{}}}],["pipe(map((response",{"_index":1010,"title":{},"body":{"injectables/SpellsService.html":{}}}],["pixel",{"_index":905,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["playing",{"_index":1159,"title":{},"body":{"index.html":{}}}],["possibility",{"_index":1146,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["possible",{"_index":479,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"index.html":{}}}],["postalcode",{"_index":628,"title":{},"body":{"components/OverlayComponent.html":{}}}],["postalcode.value.length",{"_index":779,"title":{},"body":{"components/OverlayComponent.html":{}}}],["pr",{"_index":734,"title":{},"body":{"components/OverlayComponent.html":{}}}],["previous",{"_index":844,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["priority",{"_index":781,"title":{},"body":{"components/OverlayComponent.html":{}}}],["private",{"_index":130,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["proficiency",{"_index":360,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["properly",{"_index":994,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["properties",{"_index":42,"title":{"properties.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"properties.html":{}}}],["protected",{"_index":967,"title":{},"body":{"injectables/SpellsService.html":{}}}],["provide",{"_index":386,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/StepperComponent.html":{}}}],["provideanimationsasync",{"_index":1206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideauth",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providedin",{"_index":1003,"title":{},"body":{"injectables/SpellsService.html":{}}}],["providefirebaseapp",{"_index":1208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providehttpclient",{"_index":1207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":1205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":1039,"title":{},"body":{"components/StepperComponent.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":437,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["puerto",{"_index":732,"title":{},"body":{"components/OverlayComponent.html":{}}}],["pw",{"_index":729,"title":{},"body":{"components/OverlayComponent.html":{}}}],["range:0",{"_index":337,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["ranger",{"_index":372,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["rawspelllist",{"_index":137,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["reactiveformsmodule",{"_index":124,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["read",{"_index":228,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["received",{"_index":314,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["recreated",{"_index":861,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["regardless",{"_index":886,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["registeronchange",{"_index":1052,"title":{},"body":{"components/StepperComponent.html":{}}}],["registeronchange(fn",{"_index":1062,"title":{},"body":{"components/StepperComponent.html":{}}}],["registerontouched",{"_index":1053,"title":{},"body":{"components/StepperComponent.html":{}}}],["registerontouched(fn",{"_index":1065,"title":{},"body":{"components/StepperComponent.html":{}}}],["related",{"_index":1189,"title":{},"body":{"index.html":{}}}],["remove",{"_index":1079,"title":{},"body":{"components/StepperComponent.html":{}}}],["represents",{"_index":555,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["request",{"_index":988,"title":{},"body":{"injectables/SpellsService.html":{}}}],["required",{"_index":404,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{}}}],["response",{"_index":927,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["response.results",{"_index":290,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["response['damage']['damage_at_character_level']['1",{"_index":1019,"title":{},"body":{"injectables/SpellsService.html":{}}}],["response['damage']['damage_at_slot_level",{"_index":1021,"title":{},"body":{"injectables/SpellsService.html":{}}}],["response['heal_at_slot_level",{"_index":1023,"title":{},"body":{"injectables/SpellsService.html":{}}}],["response['level",{"_index":1015,"title":{},"body":{"injectables/SpellsService.html":{}}}],["response['name",{"_index":1013,"title":{},"body":{"injectables/SpellsService.html":{}}}],["response[key",{"_index":940,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["result",{"_index":552,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"index.html":{}}}],["result.matches",{"_index":594,"title":{},"body":{"components/NavbarComponent.html":{}}}],["resulted",{"_index":477,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["results",{"_index":93,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retstring",{"_index":942,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["return",{"_index":286,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["returned",{"_index":951,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["returns",{"_index":165,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["rhode",{"_index":735,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ri",{"_index":737,"title":{},"body":{"components/OverlayComponent.html":{}}}],["rico",{"_index":733,"title":{},"body":{"components/OverlayComponent.html":{}}}],["rogue",{"_index":373,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["roll",{"_index":92,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["rolled",{"_index":483,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["rolling",{"_index":471,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"index.html":{}}}],["rollresult",{"_index":468,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["rolls",{"_index":72,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"index.html":{}}}],["rolls'},{'name",{"_index":83,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["rolls.component.html",{"_index":128,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.scss",{"_index":129,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts",{"_index":110,"title":{},"body":{"components/AttackRollsComponent.html":{},"coverage.html":{},"index.html":{}}}],["rolls.component.ts:105",{"_index":195,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:131",{"_index":192,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:139",{"_index":187,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:146",{"_index":173,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:158",{"_index":151,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:162",{"_index":194,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:33",{"_index":226,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:34",{"_index":220,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:35",{"_index":222,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:36",{"_index":214,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:37",{"_index":224,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:38",{"_index":211,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:44",{"_index":221,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:45",{"_index":217,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:46",{"_index":230,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:47",{"_index":203,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:54",{"_index":152,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:79",{"_index":167,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:98",{"_index":176,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls/attack",{"_index":109,"title":{},"body":{"components/AttackRollsComponent.html":{},"coverage.html":{}}}],["root",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"injectables/SpellsService.html":{}}}],["root'},{'name",{"_index":81,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["rounded",{"_index":892,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["router",{"_index":19,"title":{},"body":{"components/AppComponent.html":{}}}],["routerlink",{"_index":30,"title":{},"body":{"components/AppComponent.html":{}}}],["routerlink,routermodule",{"_index":57,"title":{},"body":{"components/AppComponent.html":{}}}],["routermodule",{"_index":31,"title":{},"body":{"components/AppComponent.html":{}}}],["routeroutlet",{"_index":29,"title":{},"body":{"components/AppComponent.html":{}}}],["row",{"_index":551,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["rxjs",{"_index":240,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"injectables/SpellsService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":599,"title":{},"body":{"components/NavbarComponent.html":{}}}],["samoa",{"_index":645,"title":{},"body":{"components/OverlayComponent.html":{}}}],["savageattacker",{"_index":1148,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sc",{"_index":739,"title":{},"body":{"components/OverlayComponent.html":{}}}],["sd",{"_index":740,"title":{},"body":{"components/OverlayComponent.html":{}}}],["search",{"_index":115,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["searching",{"_index":990,"title":{},"body":{"injectables/SpellsService.html":{}}}],["selected",{"_index":160,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selectedspell",{"_index":138,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selectedvalue",{"_index":184,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selectedvalue.name",{"_index":287,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selectedvalue?.url",{"_index":258,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selectedvalueasstring",{"_index":256,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selector",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["separate",{"_index":991,"title":{},"body":{"injectables/SpellsService.html":{}}}],["service",{"_index":955,"title":{},"body":{"injectables/SpellsService.html":{}}}],["services",{"_index":1181,"title":{},"body":{"index.html":{}}}],["set",{"_index":199,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{}}}],["setd10(dicenum",{"_index":427,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["setd12(dicenum",{"_index":431,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["setd4(dicenum",{"_index":414,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["setd6(dicenum",{"_index":419,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["setd8(dicenum",{"_index":423,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["setdamagefromapi",{"_index":917,"title":{},"body":{"classes/Spell.html":{}}}],["setdamagefromapi(response",{"_index":925,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["setdisabledstate",{"_index":1054,"title":{},"body":{"components/StepperComponent.html":{}}}],["setdisabledstate(isdisabled",{"_index":1067,"title":{},"body":{"components/StepperComponent.html":{}}}],["setgroupedspelllist",{"_index":149,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["setting",{"_index":172,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["sharereplay",{"_index":595,"title":{},"body":{"components/NavbarComponent.html":{}}}],["sheet",{"_index":348,"title":{},"body":{"components/CharacterSheetComponent.html":{}}}],["sheet'},{'name",{"_index":86,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["sheet.component.html",{"_index":349,"title":{},"body":{"components/CharacterSheetComponent.html":{}}}],["sheet.component.scss",{"_index":350,"title":{},"body":{"components/CharacterSheetComponent.html":{}}}],["sheet.component.ts",{"_index":347,"title":{},"body":{"components/CharacterSheetComponent.html":{},"coverage.html":{}}}],["sheet/character",{"_index":346,"title":{},"body":{"components/CharacterSheetComponent.html":{},"coverage.html":{}}}],["shipping",{"_index":632,"title":{},"body":{"components/OverlayComponent.html":{}}}],["show",{"_index":180,"title":{},"body":{"components/AttackRollsComponent.html":{},"index.html":{}}}],["shown",{"_index":21,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{}}}],["side",{"_index":14,"title":{},"body":{"components/AppComponent.html":{}}}],["sides",{"_index":1198,"title":{},"body":{"index.html":{}}}],["skill",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["skillcheckcalc",{"_index":1190,"title":{},"body":{"index.html":{}}}],["skillcheckcomponent",{"_index":101,"title":{"components/SkillCheckComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["skillcheckform",{"_index":807,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["skillchecksubmit",{"_index":810,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["skillchecksuccesschance",{"_index":862,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["skillchecksuccesschance).tostring",{"_index":874,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["skipself",{"_index":390,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["sorcerer",{"_index":374,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["south",{"_index":738,"title":{},"body":{"components/OverlayComponent.html":{}}}],["specific",{"_index":553,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"injectables/SpellsService.html":{}}}],["spell",{"_index":116,"title":{"classes/Spell.html":{}},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"coverage.html":{},"index.html":{}}}],["spell(spellname",{"_index":1016,"title":{},"body":{"injectables/SpellsService.html":{}}}],["spell.damage[minlevel].d10",{"_index":275,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.damage[minlevel].d12",{"_index":277,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.damage[minlevel].d4",{"_index":269,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.damage[minlevel].d6",{"_index":271,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.damage[minlevel].d8",{"_index":273,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.name",{"_index":343,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.name.tolowercase().startswith(spellstring",{"_index":302,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.setdamagefromapi",{"_index":1018,"title":{},"body":{"injectables/SpellsService.html":{}}}],["spell.ts",{"_index":1185,"title":{},"body":{"index.html":{}}}],["spellgroup",{"_index":342,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellgroup.map(spelllist",{"_index":300,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spelli",{"_index":223,"title":{"interfaces/SpellI.html":{}},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"coverage.html":{}}}],["spelllevel",{"_index":171,"title":{},"body":{"components/AttackRollsComponent.html":{},"injectables/SpellsService.html":{}}}],["spelllist.filter(spell",{"_index":301,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spelllist.length",{"_index":304,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellname",{"_index":1012,"title":{},"body":{"injectables/SpellsService.html":{}}}],["spellresponse",{"_index":241,"title":{"interfaces/SpellResponse.html":{}},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["spellresponse.results",{"_index":978,"title":{},"body":{"injectables/SpellsService.html":{}}}],["spellresponseresults",{"_index":175,"title":{"interfaces/SpellResponseResults.html":{}},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["spells",{"_index":959,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["spells.service",{"_index":235,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spells.service.ts",{"_index":1182,"title":{},"body":{"index.html":{}}}],["spellsearchinput",{"_index":295,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellsearchinput?.name",{"_index":296,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellsgroups",{"_index":288,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellslist",{"_index":968,"title":{},"body":{"injectables/SpellsService.html":{}}}],["spellsservice",{"_index":139,"title":{"injectables/SpellsService.html":{}},"body":{"components/AttackRollsComponent.html":{},"injectables/SpellsService.html":{},"coverage.html":{}}}],["spellstring",{"_index":294,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellstring?.tolowercase",{"_index":297,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["src/.../app.config.ts",{"_index":1202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../characterstats.ts",{"_index":1144,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../diceset.ts",{"_index":1143,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../mockspells.ts",{"_index":1203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app.component.ts",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:24",{"_index":53,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":1085,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/attack",{"_index":108,"title":{},"body":{"components/AttackRollsComponent.html":{},"coverage.html":{}}}],["src/app/character",{"_index":345,"title":{},"body":{"components/CharacterSheetComponent.html":{},"coverage.html":{}}}],["src/app/characterstats.ts",{"_index":355,"title":{},"body":{"interfaces/CharacterStats.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/app/dice",{"_index":377,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"coverage.html":{}}}],["src/app/diceset.ts",{"_index":460,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/app/diceset.ts:112",{"_index":531,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:41",{"_index":525,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:42",{"_index":526,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:43",{"_index":527,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:44",{"_index":522,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:45",{"_index":523,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:46",{"_index":524,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:47",{"_index":529,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:48",{"_index":530,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:49",{"_index":521,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:50",{"_index":520,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:51",{"_index":528,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:53",{"_index":532,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:70",{"_index":518,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/die",{"_index":544,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"coverage.html":{}}}],["src/app/dropdown.ts",{"_index":579,"title":{},"body":{"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"coverage.html":{}}}],["src/app/navbar/navbar.component.ts",{"_index":583,"title":{},"body":{"components/NavbarComponent.html":{},"coverage.html":{}}}],["src/app/navbar/navbar.component.ts:27",{"_index":590,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/navbar/navbar.component.ts:29",{"_index":596,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/not",{"_index":601,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["src/app/overlay/overlay.component.ts",{"_index":607,"title":{},"body":{"components/OverlayComponent.html":{},"coverage.html":{}}}],["src/app/overlay/overlay.component.ts:106",{"_index":617,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/overlay/overlay.component.ts:27",{"_index":636,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/overlay/overlay.component.ts:28",{"_index":634,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/overlay/overlay.component.ts:42",{"_index":638,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/overlay/overlay.component.ts:44",{"_index":761,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/skill",{"_index":789,"title":{},"body":{"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["src/app/spell.ts",{"_index":909,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"coverage.html":{}}}],["src/app/spell.ts:17",{"_index":923,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spell.ts:18",{"_index":924,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spell.ts:19",{"_index":922,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spell.ts:20",{"_index":920,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spell.ts:29",{"_index":926,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spell.ts:39",{"_index":928,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spells.service.ts",{"_index":954,"title":{},"body":{"injectables/SpellsService.html":{},"coverage.html":{}}}],["src/app/spells.service.ts:19",{"_index":998,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:20",{"_index":1001,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:21",{"_index":999,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:28",{"_index":973,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:39",{"_index":982,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:53",{"_index":985,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:82",{"_index":971,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/stepper/stepper.component.ts",{"_index":1024,"title":{},"body":{"components/StepperComponent.html":{},"coverage.html":{}}}],["src/app/stepper/stepper.component.ts:29",{"_index":1075,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:30",{"_index":1060,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:33",{"_index":1061,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:34",{"_index":1058,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:37",{"_index":1057,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:44",{"_index":1074,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:47",{"_index":1063,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:50",{"_index":1066,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:53",{"_index":1071,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:60",{"_index":1068,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/mocks/mockspells.ts",{"_index":1111,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["standalone",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["started",{"_index":1150,"title":{"index.html":{}},"body":{}}],["startwith",{"_index":238,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["state",{"_index":627,"title":{},"body":{"components/OverlayComponent.html":{}}}],["state.name",{"_index":777,"title":{},"body":{"components/OverlayComponent.html":{}}}],["statements",{"_index":1082,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":615,"title":{},"body":{"components/OverlayComponent.html":{}}}],["stepper",{"_index":104,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["stepper.component.html",{"_index":1046,"title":{},"body":{"components/StepperComponent.html":{}}}],["stepper.component.scss",{"_index":1047,"title":{},"body":{"components/StepperComponent.html":{}}}],["stepper.component.ts",{"_index":1194,"title":{},"body":{"index.html":{}}}],["stepper/stepper.component",{"_index":434,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["steppercomponent",{"_index":103,"title":{"components/StepperComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["store",{"_index":949,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["stored",{"_index":178,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["strength",{"_index":361,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["string",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["styleurl",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["styling",{"_index":1168,"title":{},"body":{"index.html":{}}}],["submit",{"_index":783,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["subscribe",{"_index":260,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["subscribed",{"_index":979,"title":{},"body":{"injectables/SpellsService.html":{}}}],["succeed",{"_index":793,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["success",{"_index":889,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["successelement",{"_index":864,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["successelement.innerhtml",{"_index":873,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["suceed",{"_index":1162,"title":{},"body":{"index.html":{}}}],["suceeeding",{"_index":1193,"title":{},"body":{"index.html":{}}}],["suite",{"_index":774,"title":{},"body":{"components/OverlayComponent.html":{}}}],["supposed",{"_index":489,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["switchmap",{"_index":239,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["switchmap(spellsearchinput",{"_index":293,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["symbol.iterator",{"_index":505,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["table",{"_index":547,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"coverage.html":{}}}],["table'},{'name",{"_index":94,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["table.component",{"_index":250,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["table.component.html",{"_index":561,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["table.component.scss",{"_index":562,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["table.component.ts",{"_index":545,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"coverage.html":{}}}],["table.component.ts:24",{"_index":567,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["table.component.ts:25",{"_index":566,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["table.component.ts:29",{"_index":570,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["table/die",{"_index":249,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["tableinput",{"_index":193,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["tableref",{"_index":131,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1115,"title":{},"body":{"coverage.html":{}}}],["tailwindcss",{"_index":1167,"title":{},"body":{"index.html":{}}}],["target",{"_index":488,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["targetdc",{"_index":834,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["targetdcelement",{"_index":866,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["targetdcelement.innerhtml",{"_index":876,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["technologies",{"_index":1163,"title":{},"body":{"index.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["templateurl",{"_index":37,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["tennessee",{"_index":741,"title":{},"body":{"components/OverlayComponent.html":{}}}],["test",{"_index":961,"title":{},"body":{"injectables/SpellsService.html":{}}}],["testautocomplete",{"_index":209,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["testing",{"_index":1171,"title":{},"body":{"index.html":{}}}],["texas",{"_index":743,"title":{},"body":{"components/OverlayComponent.html":{}}}],["this.#tableref",{"_index":306,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["this.#tableref?.setinput('diceresults",{"_index":309,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["this.addobservabletoautocomplete",{"_index":331,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.addobservabletoleveldropdown",{"_index":332,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.attackrollsform.get('spell')!.valuechanges.pipe",{"_index":292,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.attackrollsform.get('spell')!.valuechanges.subscribe",{"_index":254,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.attackrollsform.get('spelllevel')!.valuechanges.subscribe",{"_index":278,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.attackrollsform.valuechanges.subscribe(value",{"_index":335,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.breakpointobserver.observe(breakpoints.handset",{"_index":591,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this.createtablecomponent",{"_index":879,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.createtablecomponent(dicerollresults",{"_index":878,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.currentspellrange",{"_index":263,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.currentspellrange[0",{"_index":267,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.d10",{"_index":510,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.d12",{"_index":511,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.d20",{"_index":512,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.d4",{"_index":507,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.d6",{"_index":508,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.d8",{"_index":509,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.damage",{"_index":935,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.damage[1",{"_index":941,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.damage[key]}\\n",{"_index":944,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.damage[parseint(key",{"_index":939,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.dicebonuscomponent.d10",{"_index":274,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicebonuscomponent.d12",{"_index":276,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicebonuscomponent.d4",{"_index":268,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicebonuscomponent.d6",{"_index":270,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicebonuscomponent.d8",{"_index":272,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicecalcservice.dicecalcresults(diceset",{"_index":327,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["this.dicecalcservice.maxroll(diceset).tostring",{"_index":325,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicecalcservice.minroll(diceset).tostring",{"_index":323,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicecalcservice.skillcheckcalc(diceset",{"_index":863,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.dicecalculations.defaultd20rollresults",{"_index":565,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["this.fb.group",{"_index":618,"title":{},"body":{"components/OverlayComponent.html":{}}}],["this.filteredgroupspelllist",{"_index":291,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.generatediceset",{"_index":315,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["this.generatetable(dicecalcresults",{"_index":328,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.generatetable(undefined",{"_index":334,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.http",{"_index":1008,"title":{},"body":{"injectables/SpellsService.html":{}}}],["this.http.get",{"_index":1004,"title":{},"body":{"injectables/SpellsService.html":{}}}],["this.keys",{"_index":506,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.level",{"_index":934,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.name",{"_index":932,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.parentcontainer.control",{"_index":436,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.addcontrol(this.controlkey",{"_index":453,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d10",{"_index":447,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d10')?.setvalue(dicenum",{"_index":449,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d12",{"_index":450,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d12')?.setvalue(dicenum",{"_index":452,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d4",{"_index":438,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d4')?.setvalue(dicenum",{"_index":440,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d6",{"_index":441,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d6')?.setvalue(dicenum",{"_index":443,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d8",{"_index":444,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d8')?.setvalue(dicenum",{"_index":446,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.removecontrol(this.controlkey",{"_index":456,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.rawspelllist",{"_index":329,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell",{"_index":265,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell?.damage[levelnum].d10",{"_index":283,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell?.damage[levelnum].d12",{"_index":284,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell?.damage[levelnum].d4",{"_index":280,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell?.damage[levelnum].d6",{"_index":281,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell?.damage[levelnum].d8",{"_index":282,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.setgroupedspelllist",{"_index":333,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.skillcheckform.value",{"_index":870,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.skillcheckform.value.advantage",{"_index":855,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.skillcheckform.value.attempts",{"_index":857,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.skillcheckform.value.targetdc",{"_index":853,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.skillcheckform.valuechanges.subscribe",{"_index":880,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.skillchecksubmit",{"_index":881,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.spellsservice.getallspells",{"_index":330,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.spellsservice.getspell(selectedvalueasstring",{"_index":259,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.updatevalue(this.value",{"_index":1078,"title":{},"body":{"components/StepperComponent.html":{}}}],["this.url",{"_index":933,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.url.href}/spells?level=${level",{"_index":1006,"title":{},"body":{"injectables/SpellsService.html":{}}}],["this.url.href}/spells?level=0&level=1&level=2&level=3&level=4&level=5&level=6",{"_index":1005,"title":{},"body":{"injectables/SpellsService.html":{}}}],["this.url.origin}${url",{"_index":1009,"title":{},"body":{"injectables/SpellsService.html":{}}}],["this.url}\\n",{"_index":943,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.value",{"_index":1077,"title":{},"body":{"components/StepperComponent.html":{}}}],["this.vcr()?.clear",{"_index":305,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["this.vcr()?.createcomponent(dierollresultstablecomponent",{"_index":307,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["times",{"_index":474,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["title",{"_index":43,"title":{},"body":{"components/AppComponent.html":{}}}],["tn",{"_index":742,"title":{},"body":{"components/OverlayComponent.html":{}}}],["together",{"_index":476,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["toggle",{"_index":841,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["tools",{"_index":1132,"title":{},"body":{"dependencies.html":{}}}],["tostring",{"_index":515,"title":{},"body":{"classes/DiceSet.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["total",{"_index":478,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["track",{"_index":340,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["true",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["try",{"_index":1020,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["tslib",{"_index":1135,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":893,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["tx",{"_index":744,"title":{},"body":{"components/OverlayComponent.html":{}}}],["type",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type=\"number",{"_index":1196,"title":{},"body":{"index.html":{}}}],["typedoc",{"_index":1137,"title":{},"body":{"dependencies.html":{}}}],["typeof",{"_index":257,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["types",{"_index":1184,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":946,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["ui",{"_index":550,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["undefined",{"_index":191,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["undefined=undefined",{"_index":859,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["understand",{"_index":1160,"title":{},"body":{"index.html":{}}}],["unit",{"_index":775,"title":{},"body":{"components/OverlayComponent.html":{}}}],["unknown",{"_index":1014,"title":{},"body":{"injectables/SpellsService.html":{}}}],["up",{"_index":181,"title":{},"body":{"components/AttackRollsComponent.html":{},"injectables/SpellsService.html":{}}}],["update",{"_index":169,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["updatevalue",{"_index":1055,"title":{},"body":{"components/StepperComponent.html":{}}}],["updatevalue(newvalue",{"_index":1070,"title":{},"body":{"components/StepperComponent.html":{}}}],["url",{"_index":916,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"miscellaneous/variables.html":{}}}],["url('https://www.dnd5eapi.co/api",{"_index":1000,"title":{},"body":{"injectables/SpellsService.html":{}}}],["use",{"_index":161,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["used",{"_index":201,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["useexisting",{"_index":1041,"title":{},"body":{"components/StepperComponent.html":{}}}],["usefactory",{"_index":388,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["user",{"_index":114,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{}}}],["using",{"_index":548,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["ut",{"_index":746,"title":{},"body":{"components/OverlayComponent.html":{}}}],["utah",{"_index":745,"title":{},"body":{"components/OverlayComponent.html":{}}}],["va",{"_index":752,"title":{},"body":{"components/OverlayComponent.html":{}}}],["validators",{"_index":763,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["validators.compose",{"_index":629,"title":{},"body":{"components/OverlayComponent.html":{}}}],["validators.maxlength(5",{"_index":631,"title":{},"body":{"components/OverlayComponent.html":{}}}],["validators.min(0",{"_index":835,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["validators.min(1",{"_index":838,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["validators.minlength(5",{"_index":630,"title":{},"body":{"components/OverlayComponent.html":{}}}],["validators.required",{"_index":622,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["value",{"_index":48,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":158,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"index.html":{}}}],["var",{"_index":78,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["variable",{"_index":200,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"coverage.html":{}}}],["variables",{"_index":493,"title":{"miscellaneous/variables.html":{}},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"miscellaneous/variables.html":{}}}],["vcr",{"_index":140,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["vermont",{"_index":747,"title":{},"body":{"components/OverlayComponent.html":{}}}],["version",{"_index":910,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"properties.html":{}}}],["vi",{"_index":750,"title":{},"body":{"components/OverlayComponent.html":{}}}],["viewchild",{"_index":233,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["viewchild('dieform",{"_index":216,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["viewchild('tablecontainer",{"_index":227,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["viewchildren",{"_index":234,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["viewcontainerref",{"_index":229,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["viewencapsulation",{"_index":55,"title":{},"body":{"components/AppComponent.html":{}}}],["viewproviders",{"_index":385,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["virgin",{"_index":749,"title":{},"body":{"components/OverlayComponent.html":{}}}],["virginia",{"_index":751,"title":{},"body":{"components/OverlayComponent.html":{}}}],["visually",{"_index":556,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["void",{"_index":166,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"components/StepperComponent.html":{}}}],["vt",{"_index":748,"title":{},"body":{"components/OverlayComponent.html":{}}}],["wa",{"_index":754,"title":{},"body":{"components/OverlayComponent.html":{}}}],["want",{"_index":1031,"title":{},"body":{"components/StepperComponent.html":{}}}],["warlock",{"_index":375,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["washington",{"_index":753,"title":{},"body":{"components/OverlayComponent.html":{}}}],["webpage",{"_index":1152,"title":{},"body":{"index.html":{}}}],["website",{"_index":1165,"title":{},"body":{"index.html":{}}}],["west",{"_index":755,"title":{},"body":{"components/OverlayComponent.html":{}}}],["whether",{"_index":1145,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["wi",{"_index":758,"title":{},"body":{"components/OverlayComponent.html":{}}}],["wisconsin",{"_index":757,"title":{},"body":{"components/OverlayComponent.html":{}}}],["wisdom",{"_index":362,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["wizard",{"_index":376,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["works",{"_index":351,"title":{},"body":{"components/CharacterSheetComponent.html":{}}}],["writevalue",{"_index":1056,"title":{},"body":{"components/StepperComponent.html":{}}}],["writevalue(value",{"_index":1073,"title":{},"body":{"components/StepperComponent.html":{}}}],["wv",{"_index":756,"title":{},"body":{"components/OverlayComponent.html":{}}}],["www.flaticon.com",{"_index":904,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["wy",{"_index":760,"title":{},"body":{"components/OverlayComponent.html":{}}}],["wyoming",{"_index":759,"title":{},"body":{"components/OverlayComponent.html":{}}}],["yes",{"_index":519,"title":{},"body":{"classes/DiceSet.html":{}}}],["york",{"_index":713,"title":{},"body":{"components/OverlayComponent.html":{}}}],["zone.js",{"_index":1139,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n    \n        Description\n    \n    \n        Home page component -- holds side navbar with links to components of other pages, and organizes router-outlet where the other components are shown\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                            RouterLink\n                            RouterModule\n                            MatSidenavModule\n                            MatToolbarModule\n                            MatButtonModule\n                            MatIconModule\n                            MatListModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'angular-bg3-cheats'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, ViewEncapsulation } from '@angular/core';\nimport { RouterLink,RouterModule, RouterOutlet } from '@angular/router';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\n\n/**\n * Home page component -- holds side navbar with links to components of other pages, and organizes router-outlet where the other components are shown\n */\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [\n    RouterOutlet, RouterLink,\n    RouterModule, MatSidenavModule,\n    MatToolbarModule, MatButtonModule, MatIconModule, MatListModule\n  ],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss'\n})\nexport class AppComponent {\n  title = 'angular-bg3-cheats';\n}\n\n    \n\n    \n         -->\n -->\n -->\n\n  \n    menu\n  \n  Dice Calculator\n\n\n  \n    \n      \n        Skill Check\n      \n      \n        Attack Rolls\n      \n      \n        Documentation\n      \n    \n  \n  \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ' --> --> -->      menu    Dice Calculator                    Skill Check                    Attack Rolls                    Documentation                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AttackRollsComponent.html":{"url":"components/AttackRollsComponent.html","title":"component - AttackRollsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AttackRollsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/attack-rolls/attack-rolls.component.ts\n\n\n\n    \n        Description\n    \n    \n        This is the component linked to with attack-rolls link in the navbar\nIt allows the user to search a spell and calculate the amount of damage that the spell can do\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-attack-rolls\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            MatInputModule\n                            ReactiveFormsModule\n                            MatSelectModule\n                            MatAutocompleteModule\n                            MatCardModule\n                                DiceBonusFormComponent\n                            MatButtonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./attack-rolls.component.html\n            \n\n\n\n            \n                styleUrl\n                ./attack-rolls.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                #tableRef\n                            \n                            \n                                attackRollsForm\n                            \n                            \n                                currentSpellRange\n                            \n                            \n                                    \n                                diceBonusComponent\n                            \n                            \n                                diceCalcService\n                            \n                            \n                                filteredGroupSpellList\n                            \n                            \n                                rawSpellList$\n                            \n                            \n                                selectedSpell\n                            \n                            \n                                spellsService\n                            \n                            \n                                vcr\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addObservableToAutocomplete\n                            \n                            \n                                addObservableToLevelDropdown\n                            \n                            \n                                attackRollsFormSubmit\n                            \n                            \n                                displaySpellAutocompleteValue\n                            \n                            \n                                generateDiceSet\n                            \n                            \n                                generateTable\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                setGroupedSpellList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:158\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addObservableToAutocomplete\n                        \n                    \n                \n            \n            \n                \naddObservableToAutocomplete()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:54\n                        \n                    \n\n\n            \n                \n                        initialize observable to autocomplete to change form values based on selected spell\n\nuse spell value to change currentSpellRange array (this changes values shown in level selector)\nuse spell value to change diceBonusComponent dice values\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addObservableToLevelDropdown\n                        \n                    \n                \n            \n            \n                \naddObservableToLevelDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:79\n                        \n                    \n\n\n            \n                \n                        The level dropdown observable will update the value of the dicerolls based on the spellLevel setting\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attackRollsFormSubmit\n                        \n                    \n                \n            \n            \n                \nattackRollsFormSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:146\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        displaySpellAutocompleteValue\n                        \n                    \n                \n            \n            \n                \ndisplaySpellAutocompleteValue(selectedValue: SpellResponseResults)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Converts the SpellResponseResults type that the autocomplete values\nare stored as into the spell names that they show up as\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selectedValue\n                                            \n                                                            SpellResponseResults\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    current selected spell value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                spell name or empty string\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateDiceSet\n                        \n                    \n                \n            \n            \n                \ngenerateDiceSet()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:139\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         DiceSetI\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateTable\n                        \n                    \n                \n            \n            \n                \ngenerateTable(tableInput: DiceResults[] | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tableInput\n                                            \n                                                            DiceResults[] | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:162\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setGroupedSpellList\n                        \n                    \n                \n            \n            \n                \nsetGroupedSpellList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:105\n                        \n                    \n\n\n            \n                \n                        Gets spell information from API to set filteredGroupSpellList variable that is used in spell autocomplete\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        #tableRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attackRollsForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    spell: new FormControl(''),\n    spellLevel: new FormControl(this.selectedSpell?.level || 1),\n    testAutocomplete: new FormControl(''),\n    hardCodedAutocomplete: new FormControl('')\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentSpellRange\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Default value : new Array(6)\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        diceBonusComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DiceBonusFormComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('dieForm')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        diceCalcService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DiceCalculationsService\n\n                    \n                \n                \n                    \n                        Default value : inject(DiceCalculationsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filteredGroupSpellList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rawSpellList$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedSpell\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellI | undefined\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        spellsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellsService\n\n                    \n                \n                \n                    \n                        Default value : inject(SpellsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        vcr\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('tableContainer', {read: ViewContainerRef})\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, ComponentRef, inject, OnInit, ViewChild, viewChild, viewChildren, ViewContainerRef } from '@angular/core';\nimport { SpellsService } from '../spells.service';\nimport { forkJoin, map, Observable, startWith, switchMap } from 'rxjs';\nimport { Spell, SpellI, SpellResponse, SpellResponseResults } from '../spell';\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { DiceBonusFormComponent } from '../dice-bonus-form/dice-bonus-form.component';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { DieRollResultsTableComponent } from '../die-roll-results-table/die-roll-results-table.component';\nimport { DiceResults, DiceSet, DiceSetI } from '../diceset';\nimport { DiceCalculationsService } from '../dice-calculations.service';\n\n/**\n * This is the component linked to with attack-rolls link in the navbar\n * It allows the user to search a spell and calculate the amount of damage that the spell can do\n */\n@Component({\n  selector: 'app-attack-rolls',\n  standalone: true,\n  imports: [\n    CommonModule, MatInputModule, ReactiveFormsModule,\n    MatSelectModule, MatAutocompleteModule, MatCardModule,\n    DiceBonusFormComponent, MatButtonModule\n],\n  templateUrl: './attack-rolls.component.html',\n  styleUrl: './attack-rolls.component.scss'\n})\nexport class AttackRollsComponent implements OnInit{\n  spellsService: SpellsService = inject(SpellsService);\n  diceCalcService: DiceCalculationsService = inject(DiceCalculationsService);\n  rawSpellList$!: Observable;\n  currentSpellRange: number[] = new Array(6);\n  selectedSpell: SpellI | undefined = undefined;\n  attackRollsForm = new FormGroup({\n    spell: new FormControl(''),\n    spellLevel: new FormControl(this.selectedSpell?.level || 1),\n    testAutocomplete: new FormControl(''),\n    hardCodedAutocomplete: new FormControl('')\n  });\n  filteredGroupSpellList!: Observable;\n  @ViewChild('dieForm') diceBonusComponent!: DiceBonusFormComponent;\n  vcr = viewChild('tableContainer', {read: ViewContainerRef});\n  #tableRef!: ComponentRef | undefined;\n\n  /**\n   * initialize observable to autocomplete to change form values based on selected spell\n   * 1. use spell value to change currentSpellRange array (this changes values shown in level selector)\n   * 2. use spell value to change diceBonusComponent dice values\n   */\n  addObservableToAutocomplete() {\n    this.attackRollsForm.get('spell')!.valueChanges.subscribe(\n      (selectedValue) => {\n        const selectedValueAsString = typeof selectedValue === 'string' ? '' : selectedValue?.url;\n        this.spellsService.getSpell(selectedValueAsString || '').subscribe(\n          (spell) => {\n            if(spell.level == 0) this.currentSpellRange = [0];\n            else this.currentSpellRange = [...Array(7).keys()].slice(spell.level);\n            this.selectedSpell = spell;\n\n            let minLevel = this.currentSpellRange[0];\n            this.diceBonusComponent.d4 = spell.damage[minLevel].d4 || 0;\n            this.diceBonusComponent.d6 = spell.damage[minLevel].d6 || 0;\n            this.diceBonusComponent.d8 = spell.damage[minLevel].d8 || 0;\n            this.diceBonusComponent.d10 = spell.damage[minLevel].d10 || 0;\n            this.diceBonusComponent.d12 = spell.damage[minLevel].d12 || 0;\n          }\n        )\n      }\n    )\n  }\n\n  /**\n   * The level dropdown observable will update the value of the dicerolls based on the spellLevel setting\n   */\n  addObservableToLevelDropdown() {\n    this.attackRollsForm.get('spellLevel')!.valueChanges.subscribe(\n      (levelNum) => {\n        levelNum = levelNum ?? this.currentSpellRange[0];\n        this.diceBonusComponent.d4 = this.selectedSpell?.damage[levelNum].d4 || 0;\n        this.diceBonusComponent.d6 = this.selectedSpell?.damage[levelNum].d6 || 0;\n        this.diceBonusComponent.d8 = this.selectedSpell?.damage[levelNum].d8 || 0;\n        this.diceBonusComponent.d10 = this.selectedSpell?.damage[levelNum].d10 || 0;\n        this.diceBonusComponent.d12 = this.selectedSpell?.damage[levelNum].d12 || 0;\n      }\n    )\n  }\n\n  /**\n   * Converts the SpellResponseResults type that the autocomplete values\n   * are stored as into the spell names that they show up as\n   * @param selectedValue current selected spell value\n   * @returns spell name or empty string\n   */\n  displaySpellAutocompleteValue(selectedValue: SpellResponseResults): string {\n    return selectedValue && selectedValue.name ? selectedValue.name : '';\n  }\n\n  /**\n   * Gets spell information from API to set filteredGroupSpellList variable that is used in spell autocomplete\n   */\n  setGroupedSpellList() {\n    let spellsGroups: Observable[] = [];\n    for(let i = 0; i  response.results)\n      ))\n    }\n    this.filteredGroupSpellList = this.attackRollsForm.get('spell')!.valueChanges.pipe(\n      startWith(''),\n      switchMap(spellSearchInput => {\n        let spellString = typeof spellSearchInput === 'string' ? spellSearchInput : spellSearchInput?.name;\n        // let spellString = spellSearchInput;\n        spellString = spellString?.toLowerCase() || '';\n        return forkJoin(spellsGroups).pipe(\n          map(spellGroup => \n            spellGroup.map(spellList => \n              spellList.filter(spell =>\n                spell.name.toLowerCase().startsWith(spellString || '')\n              )\n            ).filter(spellList => spellList.length > 0)\n          )\n        )\n      })\n    )\n  }\n\n  generateTable(tableInput: DiceResults[] | undefined) {\n    this.vcr()?.clear();\n    this.#tableRef = this.vcr()?.createComponent(DieRollResultsTableComponent);\n    if(tableInput) {\n      this.#tableRef?.setInput('diceResults', tableInput);\n    }\n  }\n\n  generateDiceSet(): DiceSetI {\n    let dieDict: DiceSetI = new DiceSet(JSON.parse(\n      JSON.stringify(this.attackRollsForm.value))['dieBonuses']);\n    console.log('submit received (attack-rolls)', dieDict);\n    return dieDict;\n  }\n\n  attackRollsFormSubmit() {\n    let diceSet = this.generateDiceSet();\n    // console.log('submit', diceSet);\n    let minElement = document.getElementById('damage-min');\n    let maxElement = document.getElementById('damage-max');\n    if(minElement && maxElement) {\n      minElement.innerText = this.diceCalcService.minRoll(diceSet).toString();\n      maxElement.innerText = this.diceCalcService.maxRoll(diceSet).toString();\n    }\n\n    let diceCalcResults = this.diceCalcService.diceCalcResults(diceSet);\n    this.generateTable(diceCalcResults);\n  }\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.rawSpellList$ = this.spellsService.getAllSpells();\n    this.addObservableToAutocomplete();\n    this.addObservableToLevelDropdown();\n    this.setGroupedSpellList();\n    // this.generateTable(undefined);\n    this.attackRollsForm.valueChanges.subscribe(value => \n      console.log('attack rolls form', value));\n  }\n\n}\n\n    \n\n    \n        \n  \n    \n      Damage Range:0-0\n    \n  \n  \n    \n      \n        \n          Spell\n          \n           -->\n          \n            @for(spellGroup of filteredGroupSpellList | async; track $index) {\n              \n                @for(spell of spellGroup; track $index) {\n                  {{spell.name}}\n                }\n              \n            }\n          \n        \n        \n          Level\n          \n            @for (level of currentSpellRange; track $index) {\n              {{level}}\n            }\n          \n        \n      \n      \n      \n        Calc!\n      \n    \n  \n\n\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Damage Range:0-0                                    Spell                     -->                      @for(spellGroup of filteredGroupSpellList | async; track $index) {                              @for(spell of spellGroup; track $index) {                  {{spell.name}}                }                          }                                    Level                      @for (level of currentSpellRange; track $index) {              {{level}}            }                                            Calc!            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AttackRollsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CharacterSheetComponent.html":{"url":"components/CharacterSheetComponent.html","title":"component - CharacterSheetComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CharacterSheetComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/character-sheet/character-sheet.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-character-sheet\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./character-sheet.component.html\n            \n\n\n\n            \n                styleUrl\n                ./character-sheet.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-character-sheet',\n  standalone: true,\n  imports: [],\n  templateUrl: './character-sheet.component.html',\n  styleUrl: './character-sheet.component.scss'\n})\nexport class CharacterSheetComponent {\n\n}\n\n    \n\n    \n        character-sheet works!\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'character-sheet works!'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CharacterSheetComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CharacterStats.html":{"url":"interfaces/CharacterStats.html","title":"interface - CharacterStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CharacterStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/characterstats.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            charisma\n                                        \n                                \n                                \n                                        \n                                            constitution\n                                        \n                                \n                                \n                                        \n                                            dexterity\n                                        \n                                \n                                \n                                        \n                                            intelligence\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            proficiency\n                                        \n                                \n                                \n                                        \n                                            strength\n                                        \n                                \n                                \n                                        \n                                            wisdom\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        charisma\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        charisma:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        constitution\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        constitution:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dexterity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dexterity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        intelligence\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        intelligence:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        proficiency\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        proficiency:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strength\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        strength:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wisdom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        wisdom:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CharacterStats {\n    strength: number,\n    dexterity: number,\n    constitution: number,\n    intelligence: number,\n    wisdom: number,\n    charisma: number,\n    proficiency: number,\n    level: number\n}\n\n\nexport enum CharacterClass {\n    Barbarian,\n    Bard,\n    Cleric,\n    Druid,\n    Fighter,\n    Monk,\n    Paladin,\n    Ranger,\n    Rogue,\n    Sorcerer,\n    Warlock,\n    Wizard\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DiceBonusFormComponent.html":{"url":"components/DiceBonusFormComponent.html","title":"component - DiceBonusFormComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DiceBonusFormComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dice-bonus-form/dice-bonus-form.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component holds all the dice values that the user is able to set and edit.\nThis component is used on both skill check component and attack rolls component\nThe dice values are added to the form control automatically\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-dice-bonus-form\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            ReactiveFormsModule\n                                StepperComponent\n                            MatCardModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./dice-bonus-form.component.html\n            \n\n            \n                viewProviders\n                \n                    \n                            {\n    provide: ControlContainer, useFactory: () => inject(ControlContainer, { skipSelf: true })\n}\n                    \n                \n            \n\n\n            \n                styleUrl\n                ./dice-bonus-form.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                parentContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                controlKey\n                            \n                            \n                                label\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    parentFormGroup\n                                \n                                \n                                    d4\n                                \n                                \n                                    d6\n                                \n                                \n                                    d8\n                                \n                                \n                                    d10\n                                \n                                \n                                    d12\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        controlKey\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                        \n                            \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Bonus Dice'\n                    \n                \n                        \n                            \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:27\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:86\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:73\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        parentContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ControlContainer)\n                    \n                \n                    \n                        \n                                Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:25\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        parentFormGroup\n                    \n                \n\n                \n                    \n                        getparentFormGroup()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:29\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        d4\n                    \n                \n\n                \n                    \n                        getd4()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:33\n                                \n                            \n\n                \n                    \n                        setd4(diceNum: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:37\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            diceNum\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        d6\n                    \n                \n\n                \n                    \n                        getd6()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:41\n                                \n                            \n\n                \n                    \n                        setd6(diceNum: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:45\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            diceNum\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        d8\n                    \n                \n\n                \n                    \n                        getd8()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:49\n                                \n                            \n\n                \n                    \n                        setd8(diceNum: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:53\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            diceNum\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        d10\n                    \n                \n\n                \n                    \n                        getd10()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:57\n                                \n                            \n\n                \n                    \n                        setd10(diceNum: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:61\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            diceNum\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        d12\n                    \n                \n\n                \n                    \n                        getd12()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:65\n                                \n                            \n\n                \n                    \n                        setd12(diceNum: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:69\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            diceNum\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, inject, Input } from '@angular/core';\nimport { ControlContainer, FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { StepperComponent } from '../stepper/stepper.component';\nimport { MatCardModule } from '@angular/material/card';\n\n/**\n * This component holds all the dice values that the user is able to set and edit.\n * This component is used on both skill check component and attack rolls component\n * The dice values are added to the form control automatically\n */\n@Component({\n  selector: 'app-dice-bonus-form',\n  standalone: true,\n  viewProviders: [\n    {\n      provide: ControlContainer,\n      useFactory: () => inject(ControlContainer, {skipSelf: true})\n    }\n  ],\n  imports: [ReactiveFormsModule, StepperComponent, MatCardModule],\n  templateUrl: './dice-bonus-form.component.html',\n  styleUrl: './dice-bonus-form.component.scss'\n})\nexport class DiceBonusFormComponent {\n  parentContainer = inject(ControlContainer);\n  @Input({required: true}) controlKey = '';\n  @Input() label = 'Bonus Dice';\n\n  get parentFormGroup() {\n    return this.parentContainer.control as FormGroup;\n  }\n\n  public get d4(): FormControl {\n    return this.parentFormGroup.get(this.controlKey)?.get('d4') as FormControl\n  }\n\n  public set d4(diceNum: number) {\n    this.parentFormGroup.get(this.controlKey)?.get('d4')?.setValue(diceNum);\n  }\n\n  public get d6(): FormControl {\n    return this.parentFormGroup.get(this.controlKey)?.get('d6') as FormControl\n  }\n\n  public set d6(diceNum: number) {\n    this.parentFormGroup.get(this.controlKey)?.get('d6')?.setValue(diceNum);\n  }\n\n  public get d8(): FormControl {\n    return this.parentFormGroup.get(this.controlKey)?.get('d8') as FormControl\n  }\n\n  public set d8(diceNum: number) {\n    this.parentFormGroup.get(this.controlKey)?.get('d8')?.setValue(diceNum);\n  }\n  \n  public get d10(): FormControl {\n    return this.parentFormGroup.get(this.controlKey)?.get('d10') as FormControl\n  }\n\n  public set d10(diceNum: number) {\n    this.parentFormGroup.get(this.controlKey)?.get('d10')?.setValue(diceNum);\n  }\n  \n  public get d12(): FormControl {\n    return this.parentFormGroup.get(this.controlKey)?.get('d12') as FormControl\n  }\n\n  public set d12(diceNum: number) {\n    this.parentFormGroup.get(this.controlKey)?.get('d12')?.setValue(diceNum);\n  }\n\n  ngOnInit() {\n    this.parentFormGroup.addControl(this.controlKey,\n      new FormGroup({\n        d4: new FormControl(0),\n        d6: new FormControl(0),\n        d8: new FormControl(0),\n        d10: new FormControl(0),\n        d12: new FormControl(0),\n        modifier: new FormControl(0),\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.parentFormGroup.removeControl(this.controlKey);\n  }\n}\n\n    \n\n    \n        \n  {{label}}\n  \n  d4:\n  \n  \n  d6:\n  \n  \n  d8:\n  \n  \n  d10:\n  \n  \n  d12:\n  \n -->\n\n\n  \n    {{label}}\n    \n      \n       -->\n        &nbsp;d4:\n        \n        \n      \n      \n        &nbsp;d6:\n        \n        \n      \n      \n        &nbsp;d8:\n        \n        \n      \n      \n        d10:\n        \n        \n      \n      \n        d12:\n        \n        \n      \n      \n        modifier:\n        \n      \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  {{label}}    d4:      d6:      d8:      d10:      d12:   -->      {{label}}                 -->         d4:                                     d6:                                     d8:                                    d10:                                    d12:                                    modifier:                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DiceBonusFormComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DiceResults.html":{"url":"interfaces/DiceResults.html","title":"interface - DiceResults","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DiceResults\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/diceset.ts\n        \n\n\n            \n                Description\n            \n            \n                This interface is a data type to hold the number generated from calculating the dice roll results.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cumPercentageResults\n                                        \n                                \n                                \n                                        \n                                            numResults\n                                        \n                                \n                                \n                                        \n                                            percentageResults\n                                        \n                                \n                                \n                                        \n                                            rollResult\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cumPercentageResults\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cumPercentageResults:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the percent chance when rolling a diceset that you would get a rollResult higher than or equal to the current rollResult\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        numResults\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        numResults:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the number of times adding the dice together resulted in the rollResult\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        percentageResults\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        percentageResults:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    number of rolls with rollResult / total number of rolls possible from all the diceRolls. Can also be described as the percentage when rolling a diceset, that you would get rollResult as the roll.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rollResult\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rollResult:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the number created by adding together all the dice rolled in a DiceSetI\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface DiceSetI extends Iterable {\n    d4?: number;\n    d6?: number;\n    d8?: number;\n    d10?: number;\n    d12?: number;\n    d20?: number;\n    modifier: number;\n    /** Used in skill check dice calculations for the target value that the diceset is supposed to be equal */\n    target: number;\n    attempts: number;\n    advantage: Advantage;\n}\n\n/**\n * This interface is a data type to hold the number generated from calculating the dice roll results.\n */\nexport interface DiceResults {\n    /** the number created by adding together all the dice rolled in a DiceSetI */\n    rollResult: number;\n    /** the number of times adding the dice together resulted in the rollResult */\n    numResults: number;\n    /** number of rolls with rollResult / total number of rolls possible from all the diceRolls. Can also be described as the percentage when rolling a diceset, that you would get rollResult as the roll. */\n    percentageResults: number;\n    /** the percent chance when rolling a diceset that you would get a rollResult higher than or equal to the current rollResult */\n    cumPercentageResults: number;\n}\n\n/**\n * DiceSet data type implementation of DiceSetI\n * DiceSet class is used to set default values for variables in DiceSetI\n * DiceSet class is also used to implement iterator used in dice-calculations.serivce.ts\n */\nexport class DiceSet implements DiceSetI {\n    d4!: number;\n    d6!: number;\n    d8!: number;\n    d10!: number;\n    d12!: number;\n    d20!: number;\n    modifier: number = 0;\n    target: number = 0;\n    attempts: number = 1;\n    advantage: Advantage = Advantage.None;\n    private keys = [4, 6, 8, 10, 12, 20];\n\n    [Symbol.iterator](): Iterator {\n        let i = 0;\n        let keys = this.keys;\n        let values = [\n            this.d4 ?? 0, this.d6 ?? 0, this.d8 ?? 0, \n            this.d10 ?? 0, this.d12 ?? 0, this.d20 ?? 0\n        ]\n\n        return {\n            next() {\n                if (i \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DiceSet.html":{"url":"classes/DiceSet.html","title":"class - DiceSet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DiceSet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/diceset.ts\n        \n\n\n            \n                Description\n            \n            \n                DiceSet data type implementation of DiceSetI\nDiceSet class is used to set default values for variables in DiceSetI\nDiceSet class is also used to implement iterator used in dice-calculations.serivce.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                            DiceSetI\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                advantage\n                            \n                            \n                                attempts\n                            \n                            \n                                d10\n                            \n                            \n                                d12\n                            \n                            \n                                d20\n                            \n                            \n                                d4\n                            \n                            \n                                d6\n                            \n                            \n                                d8\n                            \n                            \n                                    Private\n                                keys\n                            \n                            \n                                modifier\n                            \n                            \n                                target\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                            \n                                \n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined, dicestring?: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/diceset.ts:70\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dicestring\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        advantage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Advantage\n\n                    \n                \n                \n                    \n                        Default value : Advantage.None\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attempts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d10\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d12\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d20\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d4\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d6\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d8\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [4, 6, 8, 10, 12, 20]\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        modifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:48\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/diceset.ts:112\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n            \n                \n()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/diceset.ts:53\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Iterator\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export interface DiceSetI extends Iterable {\n    d4?: number;\n    d6?: number;\n    d8?: number;\n    d10?: number;\n    d12?: number;\n    d20?: number;\n    modifier: number;\n    /** Used in skill check dice calculations for the target value that the diceset is supposed to be equal */\n    target: number;\n    attempts: number;\n    advantage: Advantage;\n}\n\n/**\n * This interface is a data type to hold the number generated from calculating the dice roll results.\n */\nexport interface DiceResults {\n    /** the number created by adding together all the dice rolled in a DiceSetI */\n    rollResult: number;\n    /** the number of times adding the dice together resulted in the rollResult */\n    numResults: number;\n    /** number of rolls with rollResult / total number of rolls possible from all the diceRolls. Can also be described as the percentage when rolling a diceset, that you would get rollResult as the roll. */\n    percentageResults: number;\n    /** the percent chance when rolling a diceset that you would get a rollResult higher than or equal to the current rollResult */\n    cumPercentageResults: number;\n}\n\n/**\n * DiceSet data type implementation of DiceSetI\n * DiceSet class is used to set default values for variables in DiceSetI\n * DiceSet class is also used to implement iterator used in dice-calculations.serivce.ts\n */\nexport class DiceSet implements DiceSetI {\n    d4!: number;\n    d6!: number;\n    d8!: number;\n    d10!: number;\n    d12!: number;\n    d20!: number;\n    modifier: number = 0;\n    target: number = 0;\n    attempts: number = 1;\n    advantage: Advantage = Advantage.None;\n    private keys = [4, 6, 8, 10, 12, 20];\n\n    [Symbol.iterator](): Iterator {\n        let i = 0;\n        let keys = this.keys;\n        let values = [\n            this.d4 ?? 0, this.d6 ?? 0, this.d8 ?? 0, \n            this.d10 ?? 0, this.d12 ?? 0, this.d20 ?? 0\n        ]\n\n        return {\n            next() {\n                if (i \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DiceSetI.html":{"url":"interfaces/DiceSetI.html","title":"interface - DiceSetI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DiceSetI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/diceset.ts\n        \n\n\n            \n                Description\n            \n            \n                This interface holds how many dice are rolled for each type of die\nIterable: returns arrays of all the dice values:\n[4, d4num], [6, d6num], [8, d8num], [10, d10num], [12, d12num], [20, d20num]\nThis data type is used in dice-calculations.service.ts where the dice information is used in different calculations.\n\n            \n\n            \n                Extends\n            \n            \n                        Iterable\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            advantage\n                                        \n                                \n                                \n                                        \n                                            attempts\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d10\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d12\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d20\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d4\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d6\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d8\n                                        \n                                \n                                \n                                        \n                                            modifier\n                                        \n                                \n                                \n                                        \n                                            target\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        advantage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        advantage:         Advantage\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Advantage\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        attempts\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        attempts:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d10\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d10:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d12\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d12:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d20\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d20:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d4\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d4:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d6\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d6:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d8\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d8:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        modifier\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        modifier:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        target:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Used in skill check dice calculations for the target value that the diceset is supposed to be equal\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface DiceSetI extends Iterable {\n    d4?: number;\n    d6?: number;\n    d8?: number;\n    d10?: number;\n    d12?: number;\n    d20?: number;\n    modifier: number;\n    /** Used in skill check dice calculations for the target value that the diceset is supposed to be equal */\n    target: number;\n    attempts: number;\n    advantage: Advantage;\n}\n\n/**\n * This interface is a data type to hold the number generated from calculating the dice roll results.\n */\nexport interface DiceResults {\n    /** the number created by adding together all the dice rolled in a DiceSetI */\n    rollResult: number;\n    /** the number of times adding the dice together resulted in the rollResult */\n    numResults: number;\n    /** number of rolls with rollResult / total number of rolls possible from all the diceRolls. Can also be described as the percentage when rolling a diceset, that you would get rollResult as the roll. */\n    percentageResults: number;\n    /** the percent chance when rolling a diceset that you would get a rollResult higher than or equal to the current rollResult */\n    cumPercentageResults: number;\n}\n\n/**\n * DiceSet data type implementation of DiceSetI\n * DiceSet class is used to set default values for variables in DiceSetI\n * DiceSet class is also used to implement iterator used in dice-calculations.serivce.ts\n */\nexport class DiceSet implements DiceSetI {\n    d4!: number;\n    d6!: number;\n    d8!: number;\n    d10!: number;\n    d12!: number;\n    d20!: number;\n    modifier: number = 0;\n    target: number = 0;\n    attempts: number = 1;\n    advantage: Advantage = Advantage.None;\n    private keys = [4, 6, 8, 10, 12, 20];\n\n    [Symbol.iterator](): Iterator {\n        let i = 0;\n        let keys = this.keys;\n        let values = [\n            this.d4 ?? 0, this.d6 ?? 0, this.d8 ?? 0, \n            this.d10 ?? 0, this.d12 ?? 0, this.d20 ?? 0\n        ]\n\n        return {\n            next() {\n                if (i \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DieRollResultsTableComponent.html":{"url":"components/DieRollResultsTableComponent.html","title":"component - DieRollResultsTableComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DieRollResultsTableComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/die-roll-results-table/die-roll-results-table.component.ts\n\n\n\n    \n        Description\n    \n    \n        This creates a table using Material UI that organizes information from dice-calculations.service.ts.\nEach row of the table has the possible roll value from rolling the diceset,\nthe number of possible rolls that result in said roll value,\nthe percentage chance of rolling higher than that specific roll,\nthe percentage chance of rolling that specific roll,\nand a bar that represents how rolling that specific roll visually looks.\nThis component appears on both skill-check and attack-rolls forms.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-die-roll-results-table\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            MatTableModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./die-roll-results-table.component.html\n            \n\n\n\n            \n                styleUrl\n                ./die-roll-results-table.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                diceCalculations\n                            \n                            \n                                displayedColumns\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                diceResults\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        diceResults\n                    \n                \n                \n                    \n                        Type :         DiceResults[]\n\n                    \n                \n                \n                    \n                        Default value : this.diceCalculations.defaultD20RollResults()\n                    \n                \n                        \n                            \n                                    Defined in src/app/die-roll-results-table/die-roll-results-table.component.ts:25\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        diceCalculations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DiceCalculationsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/die-roll-results-table/die-roll-results-table.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        displayedColumns\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    'roll-result', 'num-result', 'percentage-cum-result', 'percentage-result'\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/die-roll-results-table/die-roll-results-table.component.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject, Input } from '@angular/core';\nimport { MatTableModule } from '@angular/material/table';\nimport { DiceResults } from '../diceset';\nimport { CommonModule } from '@angular/common';\nimport { DiceCalculationsService } from '../dice-calculations.service';\n\n/**\n * This creates a table using Material UI that organizes information from dice-calculations.service.ts.\n * Each row of the table has the possible roll value from rolling the diceset,\n * the number of possible rolls that result in said roll value,\n * the percentage chance of rolling higher than that specific roll,\n * the percentage chance of rolling that specific roll,\n * and a bar that represents how rolling that specific roll visually looks.\n * This component appears on both skill-check and attack-rolls forms.\n */\n@Component({\n  selector: 'app-die-roll-results-table',\n  standalone: true,\n  imports: [CommonModule, MatTableModule],\n  templateUrl: './die-roll-results-table.component.html',\n  styleUrl: './die-roll-results-table.component.scss'\n})\nexport class DieRollResultsTableComponent {\n  diceCalculations = inject(DiceCalculationsService);\n  @Input() diceResults: DiceResults[] = this.diceCalculations.defaultD20RollResults();\n  // displayedColumns = [\n  //   'roll-result', 'num-result', 'percentage-result', 'percentage-block'\n  // ];\n  displayedColumns = [\n    'roll-result', 'num-result', 'percentage-cum-result', 'percentage-result'\n  ];\n}\n\n    \n\n    \n        \n  \n    Roll\n    {{element.rollResult}}\n  \n  \n    #\n    {{element.numResults}}\n  \n  \n    % cum\n    \n      {{element.cumPercentageResults}}%\n    \n  \n  \n    %\n    \n      {{element.percentageResults}}%\n      \n      \n        &nbsp;\n      \n    \n  \n  \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Roll    {{element.rollResult}}        #    {{element.numResults}}        % cum          {{element.cumPercentageResults}}%            %          {{element.percentageResults}}%                                     '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DieRollResultsTableComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropdownGroup.html":{"url":"interfaces/DropdownGroup.html","title":"interface - DropdownGroup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DropdownGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/dropdown.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            group\n                                        \n                                \n                                \n                                        \n                                            groupName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        group\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        group:         DropdownItem[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DropdownItem[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        groupName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        groupName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface DropdownGroup {\n    groupName: string;\n    group: DropdownItem[];\n}\nexport interface DropdownItem {\n    label: string;\n    value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropdownItem.html":{"url":"interfaces/DropdownItem.html","title":"interface - DropdownItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DropdownItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/dropdown.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface DropdownGroup {\n    groupName: string;\n    group: DropdownItem[];\n}\nexport interface DropdownItem {\n    label: string;\n    value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavbarComponent.html":{"url":"components/NavbarComponent.html","title":"component - NavbarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NavbarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/navbar/navbar.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-navbar\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatToolbarModule\n                            MatButtonModule\n                            MatSidenavModule\n                            MatListModule\n                            MatIconModule\n                            AsyncPipe\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./navbar.component.html\n            \n\n\n\n            \n                styleUrl\n                ./navbar.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                breakpointObserver\n                            \n                            \n                                isHandset$\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        breakpointObserver\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(BreakpointObserver)\n                    \n                \n                    \n                        \n                                Defined in src/app/navbar/navbar.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isHandset$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    )\n                    \n                \n                    \n                        \n                                Defined in src/app/navbar/navbar.component.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { AsyncPipe } from '@angular/common';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrl: './navbar.component.scss',\n  standalone: true,\n  imports: [\n    MatToolbarModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatListModule,\n    MatIconModule,\n    AsyncPipe,\n  ]\n})\nexport class NavbarComponent {\n  private breakpointObserver = inject(BreakpointObserver);\n\n  isHandset$: Observable = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    );\n}\n\n    \n\n    \n        \n  \n    Menu\n    \n      Link 1\n      Link 2\n      Link 3\n    \n  \n  \n    \n      @if (isHandset$ | async) {\n        \n          menu\n        \n      }\n      angular-bg3-cheats\n    \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Menu          Link 1      Link 2      Link 3                  @if (isHandset$ | async) {                  menu              }      angular-bg3-cheats          '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NavbarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NotFoundComponent.html":{"url":"components/NotFoundComponent.html","title":"component - NotFoundComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NotFoundComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/not-found/not-found.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-not-found\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./not-found.component.html\n            \n\n\n\n            \n                styleUrl\n                ./not-found.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  standalone: true,\n  imports: [],\n  templateUrl: './not-found.component.html',\n  styleUrl: './not-found.component.scss'\n})\nexport class NotFoundComponent {\n\n}\n\n    \n\n    \n        page not found\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'page not found'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NotFoundComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OverlayComponent.html":{"url":"components/OverlayComponent.html","title":"component - OverlayComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  OverlayComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/overlay/overlay.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-overlay\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatInputModule\n                            MatButtonModule\n                            MatSelectModule\n                            MatRadioModule\n                            MatCardModule\n                            ReactiveFormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./overlay.component.html\n            \n\n\n\n            \n                styleUrl\n                ./overlay.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                addressForm\n                            \n                            \n                                    Private\n                                fb\n                            \n                            \n                                hasUnitNumber\n                            \n                            \n                                states\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/overlay/overlay.component.ts:106\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        addressForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.fb.group({\n    company: null,\n    firstName: [null, Validators.required],\n    lastName: [null, Validators.required],\n    address: [null, Validators.required],\n    address2: null,\n    city: [null, Validators.required],\n    state: [null, Validators.required],\n    postalCode: [null, Validators.compose([\n      Validators.required, Validators.minLength(5), Validators.maxLength(5)])\n    ],\n    shipping: ['free', Validators.required]\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/overlay/overlay.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fb\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(FormBuilder)\n                    \n                \n                    \n                        \n                                Defined in src/app/overlay/overlay.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasUnitNumber\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/overlay/overlay.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        states\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {name: 'Alabama', abbreviation: 'AL'},\n    {name: 'Alaska', abbreviation: 'AK'},\n    {name: 'American Samoa', abbreviation: 'AS'},\n    {name: 'Arizona', abbreviation: 'AZ'},\n    {name: 'Arkansas', abbreviation: 'AR'},\n    {name: 'California', abbreviation: 'CA'},\n    {name: 'Colorado', abbreviation: 'CO'},\n    {name: 'Connecticut', abbreviation: 'CT'},\n    {name: 'Delaware', abbreviation: 'DE'},\n    {name: 'District Of Columbia', abbreviation: 'DC'},\n    {name: 'Federated States Of Micronesia', abbreviation: 'FM'},\n    {name: 'Florida', abbreviation: 'FL'},\n    {name: 'Georgia', abbreviation: 'GA'},\n    {name: 'Guam', abbreviation: 'GU'},\n    {name: 'Hawaii', abbreviation: 'HI'},\n    {name: 'Idaho', abbreviation: 'ID'},\n    {name: 'Illinois', abbreviation: 'IL'},\n    {name: 'Indiana', abbreviation: 'IN'},\n    {name: 'Iowa', abbreviation: 'IA'},\n    {name: 'Kansas', abbreviation: 'KS'},\n    {name: 'Kentucky', abbreviation: 'KY'},\n    {name: 'Louisiana', abbreviation: 'LA'},\n    {name: 'Maine', abbreviation: 'ME'},\n    {name: 'Marshall Islands', abbreviation: 'MH'},\n    {name: 'Maryland', abbreviation: 'MD'},\n    {name: 'Massachusetts', abbreviation: 'MA'},\n    {name: 'Michigan', abbreviation: 'MI'},\n    {name: 'Minnesota', abbreviation: 'MN'},\n    {name: 'Mississippi', abbreviation: 'MS'},\n    {name: 'Missouri', abbreviation: 'MO'},\n    {name: 'Montana', abbreviation: 'MT'},\n    {name: 'Nebraska', abbreviation: 'NE'},\n    {name: 'Nevada', abbreviation: 'NV'},\n    {name: 'New Hampshire', abbreviation: 'NH'},\n    {name: 'New Jersey', abbreviation: 'NJ'},\n    {name: 'New Mexico', abbreviation: 'NM'},\n    {name: 'New York', abbreviation: 'NY'},\n    {name: 'North Carolina', abbreviation: 'NC'},\n    {name: 'North Dakota', abbreviation: 'ND'},\n    {name: 'Northern Mariana Islands', abbreviation: 'MP'},\n    {name: 'Ohio', abbreviation: 'OH'},\n    {name: 'Oklahoma', abbreviation: 'OK'},\n    {name: 'Oregon', abbreviation: 'OR'},\n    {name: 'Palau', abbreviation: 'PW'},\n    {name: 'Pennsylvania', abbreviation: 'PA'},\n    {name: 'Puerto Rico', abbreviation: 'PR'},\n    {name: 'Rhode Island', abbreviation: 'RI'},\n    {name: 'South Carolina', abbreviation: 'SC'},\n    {name: 'South Dakota', abbreviation: 'SD'},\n    {name: 'Tennessee', abbreviation: 'TN'},\n    {name: 'Texas', abbreviation: 'TX'},\n    {name: 'Utah', abbreviation: 'UT'},\n    {name: 'Vermont', abbreviation: 'VT'},\n    {name: 'Virgin Islands', abbreviation: 'VI'},\n    {name: 'Virginia', abbreviation: 'VA'},\n    {name: 'Washington', abbreviation: 'WA'},\n    {name: 'West Virginia', abbreviation: 'WV'},\n    {name: 'Wisconsin', abbreviation: 'WI'},\n    {name: 'Wyoming', abbreviation: 'WY'}\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/overlay/overlay.component.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\n\nimport { ReactiveFormsModule, FormBuilder, Validators } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatCardModule } from '@angular/material/card';\n\n\n@Component({\n  selector: 'app-overlay',\n  templateUrl: './overlay.component.html',\n  styleUrl: './overlay.component.scss',\n  standalone: true,\n  imports: [\n    MatInputModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatCardModule,\n    ReactiveFormsModule\n  ]\n})\nexport class OverlayComponent {\n  private fb = inject(FormBuilder);\n  addressForm = this.fb.group({\n    company: null,\n    firstName: [null, Validators.required],\n    lastName: [null, Validators.required],\n    address: [null, Validators.required],\n    address2: null,\n    city: [null, Validators.required],\n    state: [null, Validators.required],\n    postalCode: [null, Validators.compose([\n      Validators.required, Validators.minLength(5), Validators.maxLength(5)])\n    ],\n    shipping: ['free', Validators.required]\n  });\n\n  hasUnitNumber = false;\n\n  states = [\n    {name: 'Alabama', abbreviation: 'AL'},\n    {name: 'Alaska', abbreviation: 'AK'},\n    {name: 'American Samoa', abbreviation: 'AS'},\n    {name: 'Arizona', abbreviation: 'AZ'},\n    {name: 'Arkansas', abbreviation: 'AR'},\n    {name: 'California', abbreviation: 'CA'},\n    {name: 'Colorado', abbreviation: 'CO'},\n    {name: 'Connecticut', abbreviation: 'CT'},\n    {name: 'Delaware', abbreviation: 'DE'},\n    {name: 'District Of Columbia', abbreviation: 'DC'},\n    {name: 'Federated States Of Micronesia', abbreviation: 'FM'},\n    {name: 'Florida', abbreviation: 'FL'},\n    {name: 'Georgia', abbreviation: 'GA'},\n    {name: 'Guam', abbreviation: 'GU'},\n    {name: 'Hawaii', abbreviation: 'HI'},\n    {name: 'Idaho', abbreviation: 'ID'},\n    {name: 'Illinois', abbreviation: 'IL'},\n    {name: 'Indiana', abbreviation: 'IN'},\n    {name: 'Iowa', abbreviation: 'IA'},\n    {name: 'Kansas', abbreviation: 'KS'},\n    {name: 'Kentucky', abbreviation: 'KY'},\n    {name: 'Louisiana', abbreviation: 'LA'},\n    {name: 'Maine', abbreviation: 'ME'},\n    {name: 'Marshall Islands', abbreviation: 'MH'},\n    {name: 'Maryland', abbreviation: 'MD'},\n    {name: 'Massachusetts', abbreviation: 'MA'},\n    {name: 'Michigan', abbreviation: 'MI'},\n    {name: 'Minnesota', abbreviation: 'MN'},\n    {name: 'Mississippi', abbreviation: 'MS'},\n    {name: 'Missouri', abbreviation: 'MO'},\n    {name: 'Montana', abbreviation: 'MT'},\n    {name: 'Nebraska', abbreviation: 'NE'},\n    {name: 'Nevada', abbreviation: 'NV'},\n    {name: 'New Hampshire', abbreviation: 'NH'},\n    {name: 'New Jersey', abbreviation: 'NJ'},\n    {name: 'New Mexico', abbreviation: 'NM'},\n    {name: 'New York', abbreviation: 'NY'},\n    {name: 'North Carolina', abbreviation: 'NC'},\n    {name: 'North Dakota', abbreviation: 'ND'},\n    {name: 'Northern Mariana Islands', abbreviation: 'MP'},\n    {name: 'Ohio', abbreviation: 'OH'},\n    {name: 'Oklahoma', abbreviation: 'OK'},\n    {name: 'Oregon', abbreviation: 'OR'},\n    {name: 'Palau', abbreviation: 'PW'},\n    {name: 'Pennsylvania', abbreviation: 'PA'},\n    {name: 'Puerto Rico', abbreviation: 'PR'},\n    {name: 'Rhode Island', abbreviation: 'RI'},\n    {name: 'South Carolina', abbreviation: 'SC'},\n    {name: 'South Dakota', abbreviation: 'SD'},\n    {name: 'Tennessee', abbreviation: 'TN'},\n    {name: 'Texas', abbreviation: 'TX'},\n    {name: 'Utah', abbreviation: 'UT'},\n    {name: 'Vermont', abbreviation: 'VT'},\n    {name: 'Virgin Islands', abbreviation: 'VI'},\n    {name: 'Virginia', abbreviation: 'VA'},\n    {name: 'Washington', abbreviation: 'WA'},\n    {name: 'West Virginia', abbreviation: 'WV'},\n    {name: 'Wisconsin', abbreviation: 'WI'},\n    {name: 'Wyoming', abbreviation: 'WY'}\n  ];\n\n  onSubmit(): void {\n    alert('Thanks!');\n  }\n}\n\n    \n\n    \n        \n\n  \n    \n      Shipping Information\n    \n    \n      \n        \n          \n            \n          \n        \n      \n      \n        \n          \n            \n            @if (addressForm.controls['firstName'].hasError('required')) {\n              First name is required\n            }\n          \n        \n        \n          \n            \n            @if (addressForm.controls['lastName'].hasError('required')) {\n              Last name is required\n            }\n          \n        \n      \n      \n        \n          \n            \n            @if (addressForm.controls['address'].hasError('required')) {\n              Address is required\n            }\n          \n        \n      \n      \n        \n          @if (hasUnitNumber) {\n            \n              \n            \n          } @else {\n            \n              + Add C/O, Apt, Suite, Unit\n            \n          }\n        \n      \n      \n        \n          \n            \n            @if (addressForm.controls['city'].hasError('required')) {\n              City is required\n            }\n          \n        \n        \n          \n            \n              @for (state of states; track state) {\n                {{ state.name }}\n              }\n            \n            @if (addressForm.controls['state'].hasError('required')) {\n              State is required\n            }\n          \n        \n      \n      \n        \n          \n            \n            {{postalCode.value.length}} / 5\n          \n        \n      \n      \n        \n          \n            Free Shipping\n            Priority Shipping\n            Next Day Shipping\n          \n        \n      \n    \n    \n      Submit\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Shipping Information                                                                                                                    @if (addressForm.controls[\\'firstName\\'].hasError(\\'required\\')) {              First name is required            }                                                            @if (addressForm.controls[\\'lastName\\'].hasError(\\'required\\')) {              Last name is required            }                                                                        @if (addressForm.controls[\\'address\\'].hasError(\\'required\\')) {              Address is required            }                                                @if (hasUnitNumber) {                                                } @else {                          + Add C/O, Apt, Suite, Unit                      }                                                              @if (addressForm.controls[\\'city\\'].hasError(\\'required\\')) {              City is required            }                                                              @for (state of states; track state) {                {{ state.name }}              }                        @if (addressForm.controls[\\'state\\'].hasError(\\'required\\')) {              State is required            }                                                                        {{postalCode.value.length}} / 5                                                            Free Shipping            Priority Shipping            Next Day Shipping                                      Submit      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'OverlayComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SkillCheckComponent.html":{"url":"components/SkillCheckComponent.html","title":"component - SkillCheckComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SkillCheckComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/skill-check/skill-check.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component allows for the checking of how likely a skill check is to succeed.\nIt generates a frontend to display results from dice calculations, and a form for the user to input their dice calc information\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-skill-check\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            ReactiveFormsModule\n                            CommonModule\n                            MatCardModule\n                            MatSelectModule\n                                DiceBonusFormComponent\n                            MatButtonModule\n                            MatButtonToggleModule\n                            MatInputModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./skill-check.component.html\n            \n\n\n\n            \n                styleUrl\n                ./skill-check.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                #tableRef\n                            \n                            \n                                advantageAdvantage\n                            \n                            \n                                advantageDisadvantage\n                            \n                            \n                                advantageEnum\n                            \n                            \n                                advantageNone\n                            \n                            \n                                advantageOptions\n                            \n                            \n                                attemptsOptions\n                            \n                            \n                                diceCalcService\n                            \n                            \n                                dieBonusForm\n                            \n                            \n                                skillCheckForm\n                            \n                            \n                                vcr\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTableComponent\n                            \n                            \n                                generateDiceSet\n                            \n                            \n                                isAdvantageNone\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                skillCheckSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/skill-check/skill-check.component.ts:110\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createTableComponent\n                        \n                    \n                \n            \n            \n                \ncreateTableComponent(tableInput: DiceResults[] | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/skill-check/skill-check.component.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                tableInput\n                                            \n                                                            DiceResults[] | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    undefined\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateDiceSet\n                        \n                    \n                \n            \n            \n                \ngenerateDiceSet()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/skill-check/skill-check.component.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         DiceSetI\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isAdvantageNone\n                        \n                    \n                \n            \n            \n                \nisAdvantageNone(currentAdvantageValue: Advantage)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/skill-check/skill-check.component.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                currentAdvantageValue\n                                            \n                                                            Advantage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/skill-check/skill-check.component.ts:105\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skillCheckSubmit\n                        \n                    \n                \n            \n            \n                \nskillCheckSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/skill-check/skill-check.component.ts:88\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        #tableRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        advantageAdvantage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Advantage.Advantage\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        advantageDisadvantage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Advantage.Disadvantage\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        advantageEnum\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Advantage\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        advantageNone\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Advantage.None\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        advantageOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {id: 1, name: 'None', value: Advantage.None},\n    {id: 2, name: 'Advantage', value: Advantage.Advantage},\n    {id: 3, name: 'Disadvantage', value: Advantage.Disadvantage},\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attemptsOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [1, 2, 3, 4]\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        diceCalcService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DiceCalculationsService\n\n                    \n                \n                \n                    \n                        Default value : inject(DiceCalculationsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dieBonusForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    ' d4': new FormControl(0),\n    ' d6': new FormControl(0),\n    ' d8': new FormControl(0),\n    'd10': new FormControl(0),\n    'd12': new FormControl(0),\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skillCheckForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    targetDC: new FormControl(0, [\n      Validators.required,\n      Validators.min(0)\n    ]),\n    advantage: new FormControl(Advantage.None),\n    attempts: new FormControl(1, [\n      Validators.required,\n      Validators.min(1)\n    ])\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        vcr\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('tableContainer', {read: ViewContainerRef})\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, ComponentRef, inject, OnInit, viewChild, ViewContainerRef } from '@angular/core';\nimport { FormControl, ReactiveFormsModule, FormGroup, Validators } from '@angular/forms';\nimport { DiceSet, DiceSetI, Advantage, DiceResults } from '../diceset';\nimport { DiceCalculationsService } from '../dice-calculations.service';\nimport { DiceBonusFormComponent } from '../dice-bonus-form/dice-bonus-form.component';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle'\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { DieRollResultsTableComponent } from '../die-roll-results-table/die-roll-results-table.component';\n\n/**\n * This component allows for the checking of how likely a skill check is to succeed.\n * It generates a frontend to display results from dice calculations, and a form for the user to input their dice calc information\n */\n@Component({\n  selector: 'app-skill-check',\n  standalone: true,\n  imports: [\n    ReactiveFormsModule, CommonModule, MatCardModule, MatSelectModule,\n    DiceBonusFormComponent, MatButtonModule,\n    MatButtonToggleModule, MatInputModule\n  ],\n  templateUrl: './skill-check.component.html',\n  styleUrl: './skill-check.component.scss'\n})\nexport class SkillCheckComponent implements OnInit {\n  diceCalcService: DiceCalculationsService = inject(DiceCalculationsService);\n  vcr = viewChild('tableContainer', {read: ViewContainerRef});\n  #tableRef!: ComponentRef | undefined;\n  skillCheckForm = new FormGroup({\n    targetDC: new FormControl(0, [\n      Validators.required,\n      Validators.min(0)\n    ]),\n    advantage: new FormControl(Advantage.None),\n    attempts: new FormControl(1, [\n      Validators.required,\n      Validators.min(1)\n    ])\n  });\n  dieBonusForm = new FormGroup({\n    ' d4': new FormControl(0),\n    ' d6': new FormControl(0),\n    ' d8': new FormControl(0),\n    'd10': new FormControl(0),\n    'd12': new FormControl(0),\n  });\n  // diceSet!: DiceSet;\n  advantageEnum: typeof Advantage = Advantage;\n  advantageNone = Advantage.None;\n  advantageAdvantage = Advantage.Advantage\n  advantageDisadvantage = Advantage.Disadvantage;\n  advantageOptions = [\n    {id: 1, name: 'None', value: Advantage.None},\n    {id: 2, name: 'Advantage', value: Advantage.Advantage},\n    {id: 3, name: 'Disadvantage', value: Advantage.Disadvantage},\n  ];\n  attemptsOptions = [1, 2, 3, 4];\n\n  isAdvantageNone(currentAdvantageValue: Advantage) {\n    return currentAdvantageValue === Advantage.None;\n  }\n\n  generateDiceSet(): DiceSetI {\n    let dieDict = JSON.parse(\n      JSON.stringify(this.skillCheckForm.value))['dieBonuses'];\n    // previous line converts diebonuses form group into dict,\n    // this allows easy construction of new DiceSet once other parameters are set\n    dieDict['d20'] = 1;\n    dieDict['target'] = this.skillCheckForm.value.targetDC ?? 0;\n    dieDict['advantage'] = this.skillCheckForm.value.advantage ?? Advantage.None;\n    dieDict['attempts'] = this.skillCheckForm.value.attempts ?? 1;\n    return new DiceSet(dieDict);\n  }\n\n  createTableComponent(tableInput: DiceResults[] | undefined=undefined) {\n    this.vcr()?.clear();\n    this.#tableRef = this.vcr()?.createComponent(DieRollResultsTableComponent);\n    if(tableInput) {\n      console.log('table recreated');\n      this.#tableRef?.setInput('diceResults', tableInput);\n    }\n  }\n\n  skillCheckSubmit() {\n    let diceset = this.generateDiceSet();\n    let skillCheckSuccessChance = this.diceCalcService.skillCheckCalc(diceset);\n    let successElement = document.getElementById('success-chance');\n    let targetDCElement = document.getElementById('target-dc-value');\n    let diceRollResults = this.diceCalcService.diceCalcResults(diceset);\n    console.log('skill check submit', this.skillCheckForm.value);\n    if(successElement !== null) {\n      console.log(skillCheckSuccessChance);\n      successElement.innerHTML = (skillCheckSuccessChance).toString();\n    }\n    if(targetDCElement !== null) {\n      targetDCElement.innerHTML = diceset.target.toString();\n    }\n    this.createTableComponent(diceRollResults);\n  }\n\n  ngOnInit(): void {\n    this.createTableComponent();\n    this.skillCheckForm.valueChanges.subscribe(\n      () => this.skillCheckSubmit()\n    );\n  }\n\n  constructor() {}\n}\n\n    \n\n    \n        \n  \n    \n      95% chance to succeed with target DC 0\n    \n    \n      Note: 100% and 0% are impossible since regardless of DC, a natural 20 is an automatic success, and a natural 1 is an automatic fail. Percentages are rounded to two decimals.\n    \n  \n  \n    \n      \n        \n          Target DC\n          \n        \n      \n      \n        \n        @for (option of advantageOptions; track option.id) {\n          @if (option.value == '0') {\n            \n              {{option.name}}\n            \n          } @else {\n            \n              {{option.name}}\n            \n          }\n        }\n        \n      \n      \n        \n          Attempts\n          \n            @for(item of attemptsOptions; track $index) {\n              {{item}}\n            }\n          \n        \n      \n    \n    \n    \n      Calc!\n    \n  \n\n\n\n\n\n  Icons made by Freepik from www.flaticon.com\n  Icons made by Pixel perfect from\n    www.flaticon.com\n  Icons made by Nadiinko from www.flaticon.com\n  Icons made by Flowicon from www.flaticon.com\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            95% chance to succeed with target DC 0              Note: 100% and 0% are impossible since regardless of DC, a natural 20 is an automatic success, and a natural 1 is an automatic fail. Percentages are rounded to two decimals.                                    Target DC                                              @for (option of advantageOptions; track option.id) {          @if (option.value == \\'0\\') {                          {{option.name}}                      } @else {                          {{option.name}}                      }        }                                      Attempts                      @for(item of attemptsOptions; track $index) {              {{item}}            }                                          Calc!        Icons made by Freepik from www.flaticon.com  Icons made by Pixel perfect from    www.flaticon.com  Icons made by Nadiinko from www.flaticon.com  Icons made by Flowicon from www.flaticon.com'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SkillCheckComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Spell.html":{"url":"classes/Spell.html","title":"class - Spell","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Spell\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/spell.ts\n        \n\n\n            \n                Description\n            \n            \n                The data type version of SpellI, which has additional functions to allow easier setting of values from DnD API\n\n            \n\n\n            \n                Implements\n            \n            \n                            SpellI\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                damage\n                            \n                            \n                                level\n                            \n                            \n                                name\n                            \n                            \n                                url\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setDamageFromAPI\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, url: string, level: number, damage: object)\n                    \n                \n                        \n                            \n                                Defined in src/app/spell.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        level\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        damage\n                                                  \n                                                        \n                                                                        object\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        damage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/app/spell.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/spell.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/spell.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/spell.ts:18\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setDamageFromAPI\n                        \n                    \n                \n            \n            \n                \nsetDamageFromAPI(response: literal type, modifier: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/spell.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                modifier\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/spell.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DiceSetI, DiceSet } from \"./diceset\";\n\n/**\n * Interface used to hold all necessary information about each spell\n */\nexport interface SpellI {\n    name: string\n    url: string\n    level: number\n    damage: { [level: number]: DiceSetI }\n}\n\n/**\n * The data type version of SpellI, which has additional functions to allow easier setting of values from DnD API\n */\nexport class Spell implements SpellI {\n    name: string;\n    url: string;\n    level: number;\n    damage: { [level: number]: DiceSetI; };\n    \n    constructor(name='', url='', level=1, damage={0: new DiceSet({})}) {\n        this.name = name;\n        this.url = url;\n        this.level = level;\n        this.damage = damage;\n    }\n\n    setDamageFromAPI(response: {[level: string]: string}, modifier: number) {\n        for(let key in response) {\n            console.log('damage from api', parseInt(key), response);\n            this.damage[parseInt(key)] = new DiceSet(\n                {modifier: modifier}, response[key]\n            );\n            console.log('damage variable', this.damage[1]);\n        }\n    }\n\n    toString(): string {\n        let retString = `name: ${this.name}, url: ${this.url}\\n`;\n        retString += `damage: `\n        for(let key in this.damage) {\n            retString += `{${key}: ${this.damage[key]}\\n`\n        }\n        return retString;\n    }\n\n}\n\n/**\n * data type generated from: https://transform.tools/json-to-typescript\n * Based on response from https://www.dnd5eapi.co/api/spells\n */\nexport interface SpellResponse {\n    count: number\n    results: SpellResponseResults[]\n}\n\n/**\n * Used to store individual information about each spell returned as a result from https://www.dnd5eapi.co/api/spells\n * data type generated from: https://transform.tools/json-to-typescript\n */\nexport interface SpellResponseResults {\n    index: string\n    name: string\n    level: number\n    url: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpellI.html":{"url":"interfaces/SpellI.html","title":"interface - SpellI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpellI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/spell.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface used to hold all necessary information about each spell\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            damage\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        damage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        damage:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DiceSetI, DiceSet } from \"./diceset\";\n\n/**\n * Interface used to hold all necessary information about each spell\n */\nexport interface SpellI {\n    name: string\n    url: string\n    level: number\n    damage: { [level: number]: DiceSetI }\n}\n\n/**\n * The data type version of SpellI, which has additional functions to allow easier setting of values from DnD API\n */\nexport class Spell implements SpellI {\n    name: string;\n    url: string;\n    level: number;\n    damage: { [level: number]: DiceSetI; };\n    \n    constructor(name='', url='', level=1, damage={0: new DiceSet({})}) {\n        this.name = name;\n        this.url = url;\n        this.level = level;\n        this.damage = damage;\n    }\n\n    setDamageFromAPI(response: {[level: string]: string}, modifier: number) {\n        for(let key in response) {\n            console.log('damage from api', parseInt(key), response);\n            this.damage[parseInt(key)] = new DiceSet(\n                {modifier: modifier}, response[key]\n            );\n            console.log('damage variable', this.damage[1]);\n        }\n    }\n\n    toString(): string {\n        let retString = `name: ${this.name}, url: ${this.url}\\n`;\n        retString += `damage: `\n        for(let key in this.damage) {\n            retString += `{${key}: ${this.damage[key]}\\n`\n        }\n        return retString;\n    }\n\n}\n\n/**\n * data type generated from: https://transform.tools/json-to-typescript\n * Based on response from https://www.dnd5eapi.co/api/spells\n */\nexport interface SpellResponse {\n    count: number\n    results: SpellResponseResults[]\n}\n\n/**\n * Used to store individual information about each spell returned as a result from https://www.dnd5eapi.co/api/spells\n * data type generated from: https://transform.tools/json-to-typescript\n */\nexport interface SpellResponseResults {\n    index: string\n    name: string\n    level: number\n    url: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpellResponse.html":{"url":"interfaces/SpellResponse.html","title":"interface - SpellResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpellResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/spell.ts\n        \n\n\n            \n                Description\n            \n            \n                data type generated from: https://transform.tools/json-to-typescript\nBased on response from https://www.dnd5eapi.co/api/spells\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            results\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        results\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        results:         SpellResponseResults[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SpellResponseResults[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DiceSetI, DiceSet } from \"./diceset\";\n\n/**\n * Interface used to hold all necessary information about each spell\n */\nexport interface SpellI {\n    name: string\n    url: string\n    level: number\n    damage: { [level: number]: DiceSetI }\n}\n\n/**\n * The data type version of SpellI, which has additional functions to allow easier setting of values from DnD API\n */\nexport class Spell implements SpellI {\n    name: string;\n    url: string;\n    level: number;\n    damage: { [level: number]: DiceSetI; };\n    \n    constructor(name='', url='', level=1, damage={0: new DiceSet({})}) {\n        this.name = name;\n        this.url = url;\n        this.level = level;\n        this.damage = damage;\n    }\n\n    setDamageFromAPI(response: {[level: string]: string}, modifier: number) {\n        for(let key in response) {\n            console.log('damage from api', parseInt(key), response);\n            this.damage[parseInt(key)] = new DiceSet(\n                {modifier: modifier}, response[key]\n            );\n            console.log('damage variable', this.damage[1]);\n        }\n    }\n\n    toString(): string {\n        let retString = `name: ${this.name}, url: ${this.url}\\n`;\n        retString += `damage: `\n        for(let key in this.damage) {\n            retString += `{${key}: ${this.damage[key]}\\n`\n        }\n        return retString;\n    }\n\n}\n\n/**\n * data type generated from: https://transform.tools/json-to-typescript\n * Based on response from https://www.dnd5eapi.co/api/spells\n */\nexport interface SpellResponse {\n    count: number\n    results: SpellResponseResults[]\n}\n\n/**\n * Used to store individual information about each spell returned as a result from https://www.dnd5eapi.co/api/spells\n * data type generated from: https://transform.tools/json-to-typescript\n */\nexport interface SpellResponseResults {\n    index: string\n    name: string\n    level: number\n    url: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpellResponseResults.html":{"url":"interfaces/SpellResponseResults.html","title":"interface - SpellResponseResults","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpellResponseResults\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/spell.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to store individual information about each spell returned as a result from https://www.dnd5eapi.co/api/spells\ndata type generated from: https://transform.tools/json-to-typescript\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            index\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        index\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        index:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DiceSetI, DiceSet } from \"./diceset\";\n\n/**\n * Interface used to hold all necessary information about each spell\n */\nexport interface SpellI {\n    name: string\n    url: string\n    level: number\n    damage: { [level: number]: DiceSetI }\n}\n\n/**\n * The data type version of SpellI, which has additional functions to allow easier setting of values from DnD API\n */\nexport class Spell implements SpellI {\n    name: string;\n    url: string;\n    level: number;\n    damage: { [level: number]: DiceSetI; };\n    \n    constructor(name='', url='', level=1, damage={0: new DiceSet({})}) {\n        this.name = name;\n        this.url = url;\n        this.level = level;\n        this.damage = damage;\n    }\n\n    setDamageFromAPI(response: {[level: string]: string}, modifier: number) {\n        for(let key in response) {\n            console.log('damage from api', parseInt(key), response);\n            this.damage[parseInt(key)] = new DiceSet(\n                {modifier: modifier}, response[key]\n            );\n            console.log('damage variable', this.damage[1]);\n        }\n    }\n\n    toString(): string {\n        let retString = `name: ${this.name}, url: ${this.url}\\n`;\n        retString += `damage: `\n        for(let key in this.damage) {\n            retString += `{${key}: ${this.damage[key]}\\n`\n        }\n        return retString;\n    }\n\n}\n\n/**\n * data type generated from: https://transform.tools/json-to-typescript\n * Based on response from https://www.dnd5eapi.co/api/spells\n */\nexport interface SpellResponse {\n    count: number\n    results: SpellResponseResults[]\n}\n\n/**\n * Used to store individual information about each spell returned as a result from https://www.dnd5eapi.co/api/spells\n * data type generated from: https://transform.tools/json-to-typescript\n */\nexport interface SpellResponseResults {\n    index: string\n    name: string\n    level: number\n    url: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SpellsService.html":{"url":"injectables/SpellsService.html","title":"injectable - SpellsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SpellsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/spells.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This service is for http calls to get a list of all the dnd spells\napi used: https://www.dnd5eapi.co/api\napi used to test: https://jsonplaceholder.typicode.com/\nMain functions: getAllSpellsOfLevel, getAllSpells, getSpell\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                http\n                            \n                            \n                                    Protected\n                                spellsList\n                            \n                            \n                                url\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllSpells\n                            \n                            \n                                getAllSpellsOfLevel\n                            \n                            \n                                getSpell\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/spells.service.ts:82\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                injection\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllSpells\n                        \n                    \n                \n            \n            \n                \ngetAllSpells()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/spells.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Makes call to dnd5eapi to get spell list\nThe return value is a SpellResponse type which contains a list of the spells in SpellResponse.results\n\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable that when subscribed to will get all the spells in dnd up to 6th level\nThe return value is a SpellResponse type which contains a list of the spells in SpellResponse.results\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllSpellsOfLevel\n                        \n                    \n                \n            \n            \n                \ngetAllSpellsOfLevel(level: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/spells.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                level\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    spell level to filter spells\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable that when subscribed to will get a list of all spells of said level\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSpell\n                        \n                    \n                \n            \n            \n                \ngetSpell(url: string, modifier: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/spells.service.ts:53\n                        \n                    \n\n\n            \n                \n                        This function creates a SpellI by making an API request given a specific url.\nDnD API returns a specific url with each spell name when searching all spells that contains additional information about the spell.\nThis function makes a separate API call using that new url, and attempts to create a SpellI data type using the info from the API request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    url from SpellResponseResults type\n\n                                            \n                                        \n                                        \n                                                modifier\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    0\n                                            \n\n                                            \n                                                    In order to properly set spell damage, the spell modifier needs to be set based on what the user had inputted\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable that when subscribed to will give a Spell data type that holds all necessary information about the spell\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        http\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpClient\n\n                    \n                \n                    \n                        \n                                Defined in src/app/spells.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        spellsList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellI[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/spells.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new URL('https://www.dnd5eapi.co/api')\n                    \n                \n                    \n                        \n                                Defined in src/app/spells.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { SpellI, SpellResponse, Spell } from './spell';\nimport { map, Observable } from 'rxjs';\n\n/**\n * This service is for http calls to get a list of all the dnd spells\n * \n * api used: https://www.dnd5eapi.co/api\n * api used to test: https://jsonplaceholder.typicode.com/\n * \n * Main functions: getAllSpellsOfLevel, getAllSpells, getSpell\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SpellsService {\n\n  http!: HttpClient;\n  url = new URL('https://www.dnd5eapi.co/api');\n  protected spellsList: SpellI[] = [];\n\n  /**\n   * Makes call to dnd5eapi to get spell list\n   * @returns Observable that when subscribed to will get all the spells in dnd up to 6th level\n   * The return value is a SpellResponse type which contains a list of the spells in SpellResponse.results\n   */\n  getAllSpells(): Observable {\n    return this.http.get(\n      `${this.url.href}/spells?level=0&level=1&level=2&level=3&level=4&level=5&level=6`,\n      );\n  }\n\n  /**\n   * \n   * @param level spell level to filter spells\n   * @returns Observable that when subscribed to will get a list of all spells of said level\n   */\n  getAllSpellsOfLevel(level: number): Observable {\n    return this.http.get(\n      `${this.url.href}/spells?level=${level}`,\n      );\n  }\n\n  /**\n   * This function creates a SpellI by making an API request given a specific url.\n   * DnD API returns a specific url with each spell name when searching all spells that contains additional information about the spell.\n   * This function makes a separate API call using that new url, and attempts to create a SpellI data type using the info from the API request\n   * @param url url from SpellResponseResults type\n   * @param modifier In order to properly set spell damage, the spell modifier needs to be set based on what the user had inputted\n   * @returns Observable that when subscribed to will give a Spell data type that holds all necessary information about the spell\n   */\n  getSpell(url: string, modifier=0): Observable {\n    return this.http.\n      get(\n        `${this.url.origin}${url}`\n      ).pipe(map((response) => {\n        console.log('pipe response', response)\n        let spellName: string = response['name'] as unknown as string;\n        let spellLevel: number = response['level'] as unknown as number;\n        let spell = new Spell(spellName, url, spellLevel);\n        if(spellLevel == 0) {\n          spell.setDamageFromAPI(\n            {'0': response['damage']['damage_at_character_level']['1']},\n            modifier\n          )\n        } else {\n          try {\n            spell.setDamageFromAPI(\n              response['damage']['damage_at_slot_level'], \n              modifier\n            );\n          } catch(e) {\n            spell.setDamageFromAPI(\n              response['heal_at_slot_level'] as unknown as {[level: string]: string}, modifier\n            )\n          }\n        }\n        return spell;\n    }));\n  }\n\n  /**\n   * \n   * @param http injection\n   */\n  constructor(http: HttpClient) { \n    this.http = http;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/StepperComponent.html":{"url":"components/StepperComponent.html","title":"component - StepperComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  StepperComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/stepper/stepper.component.ts\n\n\n\n    \n        Description\n    \n    \n        https://v5.material.angular.io/guide/creating-a-custom-form-field-control\nguide here in case I want to change my mind and just make one using angular\nhttps://www.youtube.com/watch?v=xTcJQaWiJ2c&list=PLw5h0DiJ-9PDF6TTr0J7HmKK_7t6XTPuN https://flowbite.com/docs/forms/number-input/\n\n    \n\n\n    \n        Implements\n    \n    \n                ControlValueAccessor\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                {\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => StepperComponent), multi: true,\n}\n                \n            \n\n\n            \n                selector\n                app-stepper\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            FormsModule\n                            MatButtonModule\n                            MatIconModule\n                            MatFormFieldModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./stepper.component.html\n            \n\n\n\n            \n                styleUrl\n                ./stepper.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                decrement\n                            \n                            \n                                increment\n                            \n                            \n                                onChange\n                            \n                            \n                                onTouch\n                            \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                    Optional\n                                setDisabledState\n                            \n                            \n                                updateValue\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        decrement\n                        \n                    \n                \n            \n            \n                \ndecrement()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        increment\n                        \n                    \n                \n            \n            \n                \nincrement()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onChange\n                        \n                    \n                \n            \n            \n                \nonChange(value: number | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        number | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onTouch\n                        \n                    \n                \n            \n            \n                \nonTouch()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerOnChange\n                        \n                    \n                \n            \n            \n                \nregisterOnChange(fn: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerOnTouched\n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(fn: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        setDisabledState\n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                isDisabled\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateValue\n                        \n                    \n                \n            \n            \n                \nupdateValue(newValue: number | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newValue\n                                            \n                                                        number | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        writeValue\n                        \n                    \n                \n            \n            \n                \nwriteValue(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/stepper/stepper.component.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\n\n/**\n * https://v5.material.angular.io/guide/creating-a-custom-form-field-control\n * guide here in case I want to change my mind and just make one using angular\n * https://www.youtube.com/watch?v=xTcJQaWiJ2c&list=PLw5h0DiJ-9PDF6TTr0J7HmKK_7t6XTPuN  StepperComponent),\n      multi: true,\n    }\n  ],\n  templateUrl: './stepper.component.html',\n  styleUrl: './stepper.component.scss'\n})\nexport class StepperComponent implements ControlValueAccessor {\n  value: number | null = 0;\n  onChange(value: number | null) {\n    this.value = value;\n  }\n  onTouch() {}\n  increment() {\n    this.updateValue(this.value !== null ? this.value + 1 : 1);\n  }\n  decrement() {\n    if (this.value ?? 0 >= 1) {\n      this.updateValue(this.value != null ? this.value - 1 : 0);\n    } else if (this.value ?? 1 \n    \n\n    \n        \n\n  -\n  \n  +\n -->\n\n\n\n  \n    remove\n  \n  \n  \n    add\n  \n -->\n\n\n\n  \n    -\n     -->\n  \n  \n  \n    +\n     -->\n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  -    + -->      remove          add   -->      -     -->          +     -->  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'StepperComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/attack-rolls/attack-rolls.component.ts\n            \n            component\n            AttackRollsComponent\n            \n                25 %\n                (5/20)\n            \n        \n        \n            \n                \n                src/app/character-sheet/character-sheet.component.ts\n            \n            component\n            CharacterSheetComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/characterstats.ts\n            \n            interface\n            CharacterStats\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/dice-bonus-form/dice-bonus-form.component.ts\n            \n            component\n            DiceBonusFormComponent\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/dice-calculations.service.ts\n            \n            injectable\n            DiceCalculationsService\n            \n                81 %\n                (18/22)\n            \n        \n        \n            \n                \n                src/app/diceset.ts\n            \n            class\n            DiceSet\n            \n                6 %\n                (1/15)\n            \n        \n        \n            \n                \n                src/app/diceset.ts\n            \n            interface\n            DiceResults\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/diceset.ts\n            \n            interface\n            DiceSetI\n            \n                18 %\n                (2/11)\n            \n        \n        \n            \n                \n                src/app/die-roll-results-table/die-roll-results-table.component.ts\n            \n            component\n            DieRollResultsTableComponent\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/dropdown.ts\n            \n            interface\n            DropdownGroup\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/dropdown.ts\n            \n            interface\n            DropdownItem\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/navbar/navbar.component.ts\n            \n            component\n            NavbarComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/not-found/not-found.component.ts\n            \n            component\n            NotFoundComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/overlay/overlay.component.ts\n            \n            component\n            OverlayComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/skill-check/skill-check.component.ts\n            \n            component\n            SkillCheckComponent\n            \n                5 %\n                (1/18)\n            \n        \n        \n            \n                \n                src/app/spell.ts\n            \n            class\n            Spell\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/app/spell.ts\n            \n            interface\n            SpellI\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/spell.ts\n            \n            interface\n            SpellResponse\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/spell.ts\n            \n            interface\n            SpellResponseResults\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/spells.service.ts\n            \n            injectable\n            SpellsService\n            \n                37 %\n                (3/8)\n            \n        \n        \n            \n                \n                src/app/stepper/stepper.component.ts\n            \n            component\n            StepperComponent\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                        src/mocks/mockSpells.ts\n            \n            variable\n            mockSpellResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/mocks/mockSpells.ts\n            \n            variable\n            mockSpellResult0\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/mocks/mockSpells.ts\n            \n            variable\n            mockSpellResult1\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^18.2.4\n        \n            @angular/cdk : ^18.2.4\n        \n            @angular/common : ^18.2.4\n        \n            @angular/compiler : ^18.2.4\n        \n            @angular/core : ^18.2.4\n        \n            @angular/fire : ^18.0.1\n        \n            @angular/forms : ^18.2.4\n        \n            @angular/material : ^18.2.4\n        \n            @angular/platform-browser : ^18.2.4\n        \n            @angular/platform-browser-dynamic : ^18.2.4\n        \n            @angular/router : ^18.2.4\n        \n            @npmcli/package-json : ^5.2.0\n        \n            firebase-tools : ^13.25.0\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            typedoc : ^0.26.11\n        \n            zone.js : ~0.14.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Advantage   (src/.../diceset.ts)\n                        \n                        \n                            CharacterClass   (src/.../characterstats.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/diceset.ts\n    \n        \n            \n                \n                    \n                        \n                        Advantage\n                    \n                \n                    \n                        \n                            Enum to track whether to calculate skill check possibility with advantage, disadvantage, or no just a flat roll\n\n                        \n                    \n                        \n                            \n                                 None\n                            \n                        \n                        \n                            \n                                Value : 0\n                            \n                        \n                        \n                            \n                                 Advantage\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 Disadvantage\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n                        \n                            \n                                 SavageAttacker\n                            \n                        \n                        \n                            \n                                Value : 3\n                            \n                        \n            \n        \n\n    src/app/characterstats.ts\n    \n        \n            \n                \n                    \n                        \n                        CharacterClass\n                    \n                \n                        \n                            \n                                 Barbarian\n                            \n                        \n                        \n                            \n                                 Bard\n                            \n                        \n                        \n                            \n                                 Cleric\n                            \n                        \n                        \n                            \n                                 Druid\n                            \n                        \n                        \n                            \n                                 Fighter\n                            \n                        \n                        \n                            \n                                 Monk\n                            \n                        \n                        \n                            \n                                 Paladin\n                            \n                        \n                        \n                            \n                                 Ranger\n                            \n                        \n                        \n                            \n                                 Rogue\n                            \n                        \n                        \n                            \n                                 Sorcerer\n                            \n                        \n                        \n                            \n                                 Warlock\n                            \n                        \n                        \n                            \n                                 Wizard\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAngularBg3Cheats\nThis webpage is designed to show all possible values that could result in rolling certain amounts of dice.\nThis makes it easier to determine what the likelihood of each decision would be when playing dnd,\nand properly understand how likely an action is to suceed when you try it in dnd.\nTechnologies Used\nAngular is used to build website. API calls are made to https://www.dnd5eapi.co/ to get the list of all spells in dnd.\nTailwindCSS and Material are used for styling components, and organizing the layout.\nTesting is done with Karma.\nDocumentation is built with compodoc, and deployed to github pages using github actions.\nDeployment is handled by firebase.\nPages\nServices\n\ndice-calculations.service.ts -- This holds all the functions used in dice calculations\nspells.service.ts -- This holds all the functions used to access DnD API to get spell information\n\nData Types\n\nspell.ts -- This holds all the data types used to organize data gotten from API\ndiceset.ts -- This holds all the data types used to organize data related to dice rolls\nCheck skillCheckCalc function on diceset details main algorithm used to calculate dice rolls\n\n\n\nComponents\n\nskill-check.component.ts -- Skill Check Link.\nIt contains frontend for calculating likelihood of skill check suceeeding.\nattack-rolls.component.ts -- Attack Rolls Link.\nIt contains frontend for calculating spell damage and likelihood.\nstepper.component.ts -- Modified form input (type=\"number\", but with + and - buttons on the sides)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    10 Components\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            mockSpellResponse   (src/.../mockSpells.ts)\n                        \n                        \n                            mockSpellResult0   (src/.../mockSpells.ts)\n                        \n                        \n                            mockSpellResult1   (src/.../mockSpells.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideRouter(routes), provideAnimationsAsync(), provideHttpClient(), provideFirebaseApp(() => initializeApp({\"projectId\":\"test-00-c77de\",\"appId\":\"1:864287131419:web:4b60183cca62591db7b5be\",\"storageBucket\":\"test-00-c77de.firebasestorage.app\",\"apiKey\":\"AIzaSyDP4kd1doMBPfOSirbE7I6DYLjMbbNbTAY\",\"authDomain\":\"test-00-c77de.firebaseapp.com\",\"messagingSenderId\":\"864287131419\"})), provideAuth(() => getAuth())\n  ]\n}\n                    \n                \n\n\n        \n    \n\n    src/mocks/mockSpells.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockSpellResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellResponse\n\n                    \n                \n                \n                    \n                        Default value : {\n    count: 1,\n    results: [mockSpellResult0, mockSpellResult1]\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mockSpellResult0\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellResponseResults\n\n                    \n                \n                \n                    \n                        Default value : {\n    index: '0',\n    name: 'cantrip',\n    level: 0,\n    url: '/api/spells/cantrip'\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mockSpellResult1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellResponseResults\n\n                    \n                \n                \n                    \n                        Default value : {\n    index: '1',\n    name: 'level 1',\n    level: 1,\n    url: '/api/spells/level-1'\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
