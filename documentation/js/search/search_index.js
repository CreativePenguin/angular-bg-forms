var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.344,1,0.905]],["body/components/AppComponent.html",[0,0.593,1,1.487,2,1.609,3,0.336,4,0.336,5,1.059,6,1.059,7,1.059,8,0.29,9,2.507,10,0.734,11,4.144,12,3.438,13,2.347,14,4.144,15,2.972,16,4.144,17,3.438,18,3.438,19,4.144,20,4.144,21,3.438,22,1.059,23,2.103,24,2.103,25,3.438,26,1.452,27,1.452,28,1.452,29,4.73,30,1.487,31,2.995,32,4.73,33,4.73,34,1.487,35,4.73,36,1.487,37,3.923,38,3.923,39,2.415,40,3.392,41,3.923,42,1.452,43,4.144,44,1.452,45,4.144,46,0.29,47,0.461,48,4.73,49,0.336,50,0.036,51,0.883,52,0.806,53,0.603,54,2.972,55,3.438,56,3.438,57,0.967,58,3.023,59,1.323,60,0.883,61,2.507,62,1.122,63,2.168,64,3.023,65,3.023,66,3.023,67,1.211,68,1.629,69,2.168,70,3.023,71,1.543,72,2.507,73,2.507,74,1.543,75,2.168,76,2.507,77,0.336,78,0.336,79,3.438,80,1.148,81,4.144,82,1.591,83,1.745,84,3.438,85,1.059,86,1.452,87,1.452,88,1.059,89,1.783,90,1.059,91,0.746,92,1.059,93,1.059,94,0.883,95,1.059,96,1.059,97,0.883,98,0.967,99,1.059,100,0.883,101,0.967,102,0.666,103,0.027,104,1.059,105,1.059,106,0.883,107,1.059,108,1.059,109,1.059,110,0.883,111,1.059,112,1.059,113,1.059,114,0.023]],["title/components/AttackRollsComponent.html",[0,0.344,67,0.905]],["body/components/AttackRollsComponent.html",[0,0.427,1,0.421,2,0.691,3,0.16,4,0.16,5,0.505,6,0.505,7,0.505,8,0.138,10,0.574,15,1.695,21,1.961,22,0.505,23,1.84,24,1.779,26,0.828,27,0.828,28,0.828,30,0.421,31,1.904,34,0.421,36,0.421,39,1.535,42,0.828,44,0.828,46,0.419,47,0.263,49,0.565,50,0.036,51,1.207,52,1.101,53,1.062,57,1.775,59,1.173,60,0.421,62,0.317,67,1.017,68,1.554,69,4.009,71,0.735,74,0.735,77,0.16,78,0.16,80,0.932,83,1.738,85,0.505,86,0.828,87,0.828,88,0.505,89,1.219,90,0.505,91,0.743,92,0.505,93,0.505,94,0.421,95,0.505,96,0.505,97,1.207,98,0.962,99,0.505,100,0.691,101,0.757,102,0.663,103,0.022,104,0.505,105,0.505,106,0.421,107,0.505,108,0.505,109,0.505,110,0.421,111,0.505,112,0.505,113,0.505,114,0.013,115,4.637,116,1.033,117,2.364,118,1.695,119,1.961,120,1.497,121,2.364,122,2.243,123,1.961,124,2.364,125,1.61,126,0.828,127,2.494,128,2.156,129,1.904,130,2.156,131,3.006,132,1.904,133,2.364,134,2.364,135,1.094,136,2.494,137,3.006,138,4.362,139,3.842,140,2.494,141,4.362,142,3.006,143,3.006,144,2.615,145,2.494,146,0.995,147,3.479,148,3.479,149,3.479,150,2.364,151,2.886,152,2.364,153,2.495,154,3.479,155,1.702,156,1.44,157,1.44,158,2.364,159,3.481,160,4.129,161,3.425,162,1.702,163,1.748,164,1.776,165,3.479,166,3.479,167,2.364,168,2.364,169,2.044,170,1.81,171,2.227,172,1.44,173,2.364,174,2.364,175,1.497,176,2.886,177,1.338,178,1.44,179,2.364,180,1.585,181,1.44,182,1.961,183,2.364,184,2.364,185,2.364,186,1.961,187,1.094,188,0.995,189,3.842,190,1.497,191,2.364,192,1.44,193,1.114,194,2.364,195,1.465,196,3.912,197,1.44,198,1.961,199,1.44,200,1.44,201,2.364,202,0.757,203,1.094,204,1.094,205,1.207,206,0.757,207,2.494,208,1.44,209,1.811,210,2.156,211,2.762,212,2.364,213,1.154,214,2.364,215,2.364,216,1.44,217,0.63,218,2.364,219,1.44,220,1.44,221,2.364,222,1.44,223,1.904,224,1.695,225,1.44,226,1.44,227,1.44,228,1.266,229,1.44,230,2.364,231,1.44,232,1.961,233,1.961,234,2.494,235,1.44,236,0.735,237,1.961,238,1.44,239,1.44,240,1.44,241,1.033,242,2.364,243,1.44,244,0.912,245,0.553,246,0.735,247,1.033,248,1.033,249,1.44,250,0.912,251,1.194,252,0.912,253,0.912,254,1.194,255,1.017,256,1.033,257,0.815,258,1.44,259,1.44,260,1.44,261,1.961,262,1.44,263,1.44,264,1.44,265,1.44,266,1.888,267,2.364,268,1.44,269,1.44,270,1.44,271,2.364,272,2.364,273,1.44,274,2.364,275,1.44,276,2.364,277,1.44,278,2.364,279,1.44,280,2.364,281,1.44,282,1.44,283,3.006,284,1.44,285,1.44,286,1.44,287,1.44,288,1.44,289,1.194,290,0.962,291,2.364,292,1.44,293,0.815,294,1.44,295,1.44,296,1.44,297,1.44,298,3.006,299,3.006,300,1.44,301,1.44,302,1.44,303,1.44,304,1.44,305,1.44,306,1.44,307,1.44,308,1.44,309,1.194,310,1.194,311,1.194,312,1.194,313,1.194,314,2.494,315,1.44,316,1.44,317,2.364,318,1.44,319,1.194,320,1.44,321,2.364,322,1.44,323,2.364,324,1.44,325,1.44,326,1.44,327,1.44,328,1.44,329,1.44,330,1.44,331,1.194,332,1.44,333,1.44,334,1.44,335,1.44,336,1.44,337,1.44,338,1.44,339,1.44,340,1.44,341,2.364,342,2.364,343,1.961,344,2.615,345,2.364,346,2.364,347,2.364,348,1.961]],["title/components/CharacterSheetComponent.html",[0,0.344,94,0.905]],["body/components/CharacterSheetComponent.html",[0,0.592,1,1.125,2,1.42,3,0.428,4,0.428,5,1.349,6,1.349,7,1.349,8,0.37,22,1.349,23,2.18,24,2.18,26,1.703,27,1.703,28,1.349,30,1.125,34,1.125,36,1.125,42,1.703,44,1.703,50,0.035,59,0.848,60,1.125,62,0.848,67,1.125,68,1.232,77,0.428,78,0.428,80,0.934,85,1.349,86,1.703,87,1.703,88,1.349,89,1.96,90,1.349,91,0.874,92,1.349,93,1.349,94,1.635,95,2.14,96,1.349,97,1.125,98,1.232,99,1.349,100,1.125,101,1.232,102,0.848,103,0.03,104,1.349,105,1.349,106,1.125,107,1.349,108,1.349,109,1.349,110,1.125,111,1.349,112,1.349,113,1.349,114,0.027,349,3.193,350,3.193,351,3.193,352,5.594,353,4.86,354,4.86,355,4.86]],["title/interfaces/CharacterStats.html",[356,0.445,357,2.221]],["body/interfaces/CharacterStats.html",[3,0.447,4,0.447,8,0.386,46,0.386,47,0.556,49,0.679,50,0.035,77,0.556,103,0.028,114,0.028,169,2.393,217,1.711,356,0.579,357,3.584,358,1.545,359,2.886,360,5.684,361,5.684,362,5.684,363,5.684,364,5.684,365,5.684,366,5.684,367,3.338,368,3.338,369,3.338,370,3.338,371,3.338,372,3.338,373,3.338,374,3.338,375,3.338,376,3.338,377,3.338,378,3.338,379,3.338,380,3.338]],["title/components/DiceBonusFormComponent.html",[0,0.344,97,0.905]],["body/components/DiceBonusFormComponent.html",[0,0.61,1,0.6,2,0.915,3,0.228,4,0.228,5,0.72,6,0.72,7,0.72,8,0.197,10,0.498,13,1.773,22,0.72,23,1.95,24,1.95,26,1.097,27,1.688,28,1.097,30,0.6,34,0.6,36,0.6,42,1.097,44,1.097,46,0.197,47,0.348,49,0.557,50,0.036,51,0.915,52,1.012,53,0.757,57,1.853,59,0.936,60,0.6,62,0.837,67,0.6,68,1.215,77,0.228,78,0.228,80,1.367,82,1.202,83,1.318,85,0.72,86,1.097,87,1.097,88,0.72,89,1.488,90,0.72,91,0.901,92,0.72,93,0.72,94,0.6,95,0.72,96,0.72,97,1.241,98,2.006,99,0.72,100,0.6,101,0.657,102,0.453,103,0.021,104,0.72,105,0.72,106,0.6,107,0.72,108,0.72,109,0.72,110,1.241,111,0.72,112,0.72,113,0.72,114,0.018,120,1.983,129,2.403,132,2.403,146,1.318,153,3.045,162,2.404,163,1.63,170,1.923,171,2.557,187,2.115,188,1.924,204,2.318,206,1.002,209,1.755,210,2.722,211,3.476,217,1.531,236,1.048,246,1.048,250,3.694,252,1.3,290,1.542,381,4.838,382,1.703,383,3.131,384,2.597,385,3.131,386,2.597,387,3.131,388,3.131,389,3.131,390,2.597,391,3.795,392,3.131,393,4.245,394,3.131,395,3.131,396,3.795,397,4.245,398,2.597,399,3.795,400,3.593,401,3.131,402,3.795,403,2.837,404,2.837,405,2.837,406,2.924,407,2.924,408,1.703,409,2.053,410,2.053,411,2.053,412,2.053,413,2.053,414,2.053,415,2.053,416,2.053,417,2.053,418,2.053,419,2.053,420,4.571,421,2.053,422,2.053,423,2.053,424,2.053,425,2.053,426,2.053,427,2.053,428,2.053,429,2.053,430,2.053,431,2.053,432,2.053,433,2.053,434,2.053,435,2.053,436,2.053,437,1.983,438,2.053,439,2.053,440,2.053,441,5.398,442,2.053,443,2.053,444,2.053,445,2.053,446,2.053,447,2.053,448,2.053,449,2.053,450,2.053,451,2.053,452,2.053,453,2.053,454,2.053,455,2.053,456,2.053,457,2.053,458,3.995,459,1.457,460,2.053,461,2.053,462,2.053,463,2.053]],["title/interfaces/DiceResults.html",[195,1.303,356,0.445]],["body/interfaces/DiceResults.html",[3,0.326,4,0.326,8,0.281,10,0.711,46,0.281,47,0.451,49,0.622,50,0.036,52,0.781,53,0.585,62,0.646,77,0.518,78,0.518,80,1.384,82,1.125,83,2.114,102,1.107,103,0.028,114,0.023,126,1.027,135,1.356,163,1.557,175,2.569,190,2.569,193,1.746,195,1.708,204,1.356,206,1.608,213,1.125,217,1.704,255,1.691,266,2.028,290,0.938,356,0.722,358,1.125,403,2.298,404,2.298,405,2.298,406,2.298,407,2.298,459,1.557,464,1.66,465,1.786,466,1.878,467,1.878,468,2.569,469,3.602,470,3.602,471,3.602,472,4.34,473,2.91,474,2.298,475,3.181,476,2.569,477,3.337,478,2.91,479,3.602,480,3.602,481,2.91,482,2.91,483,2.569,484,2.91,485,2.569,486,2.91,487,2.91,488,2.102,489,2.102,490,2.91,491,1.66,492,2.947,493,2.102,494,2.298,495,2.844,496,2.102,497,1.66,498,2.102,499,2.91,500,2.102,501,1.856,502,2.91,503,1.856,504,1.856,505,1.856,506,1.856,507,1.856,508,1.66,509,2.102,510,2.102,511,2.102,512,2.102,513,2.102,514,2.102,515,2.102,516,2.102,517,1.856]],["title/classes/DiceSet.html",[78,0.344,255,0.905]],["body/classes/DiceSet.html",[3,0.293,4,0.293,8,0.253,10,0.64,46,0.253,47,0.419,49,0.666,50,0.036,51,1.284,52,1.447,53,1.052,57,1.905,62,0.581,77,0.489,78,0.564,80,1.28,82,1.012,83,1.586,91,0.474,102,0.83,103,0.025,114,0.021,126,1.32,135,2.033,146,1.586,155,1.493,163,1.687,170,1.446,175,1.67,187,1.22,188,1.11,190,1.67,193,1.776,195,1.11,204,1.743,206,1.737,213,1.446,217,1.686,255,1.695,266,2.032,290,0.844,356,0.632,403,2.714,404,2.714,405,2.714,406,2.714,407,2.714,459,1.84,464,1.493,465,1.687,466,1.22,467,1.22,468,1.67,469,1.891,470,1.891,471,1.891,472,3.781,473,1.891,474,1.493,475,2.385,476,1.67,477,2.701,478,1.891,479,2.701,480,2.701,481,1.891,482,1.891,483,1.67,484,1.891,485,1.67,486,1.891,487,1.891,488,1.891,489,1.891,490,3.438,491,1.493,492,3.211,493,1.891,494,2.714,495,3.074,496,2.701,497,2.133,498,2.701,499,3.438,500,2.701,501,2.385,502,3.438,503,2.385,504,2.385,505,2.385,506,2.385,507,2.385,508,2.133,509,1.891,510,1.891,511,1.891,512,1.891,513,1.891,514,1.891,515,1.891,516,1.891,517,1.67,518,1.891,519,2.488,520,2.637,521,3.766,522,2.637,523,2.637,524,2.637,525,2.637,526,2.637,527,2.637,528,2.637,529,2.637,530,2.637,531,2.637,532,2.637,533,2.637,534,2.637,535,2.637,536,2.637]],["title/interfaces/DiceSetI.html",[193,0.991,356,0.445]],["body/interfaces/DiceSetI.html",[3,0.304,4,0.304,8,0.262,10,0.663,13,1.547,46,0.262,47,0.429,49,0.666,50,0.036,52,0.728,53,0.771,62,0.851,77,0.498,78,0.498,80,1.401,82,1.482,83,1.626,101,0.874,102,0.851,103,0.025,114,0.022,126,0.957,135,1.264,163,1.72,170,1.048,175,1.73,188,2.482,190,1.73,193,1.707,195,1.15,202,0.874,204,1.264,206,1.755,213,1.048,217,1.703,255,1.637,266,1.996,290,0.874,356,0.7,358,1.048,403,2.91,404,2.91,405,2.91,406,2.91,407,2.91,459,1.972,464,1.547,465,1.72,466,1.264,467,1.264,468,1.73,469,1.959,470,1.959,471,1.959,472,3.826,473,1.959,474,1.547,475,2.446,476,1.73,477,3.213,478,1.959,479,2.77,480,2.77,481,1.959,482,1.959,483,1.73,484,1.959,485,1.73,486,1.959,487,2.77,488,2.77,489,3.213,490,3.685,491,2.537,492,3.473,493,2.77,494,2.91,495,3.226,496,1.959,497,1.547,498,1.959,499,2.77,500,1.959,501,1.73,502,2.77,503,2.446,504,2.446,505,2.446,506,2.446,507,2.446,508,2.187,509,1.959,510,1.959,511,1.959,512,1.959,513,1.959,514,1.959,515,1.959,516,1.959,517,1.73,537,2.731,538,1.264,539,2.731,540,2.731,541,2.731,542,2.731,543,2.731,544,2.731,545,2.731,546,1.73,547,2.731]],["title/components/DieRollResultsTableComponent.html",[0,0.344,100,0.905]],["body/components/DieRollResultsTableComponent.html",[0,0.561,1,0.76,2,1.09,3,0.289,4,0.289,5,0.912,6,0.912,7,0.912,8,0.25,10,0.631,18,3.094,22,0.912,23,2.048,24,2.048,26,1.307,27,1.307,28,1.307,30,0.76,31,2.762,34,0.76,36,0.76,42,1.307,44,1.307,46,0.25,47,0.415,49,0.415,50,0.036,52,1.162,53,1.079,57,1.396,59,1.112,60,0.76,62,0.961,67,0.76,68,1.396,71,1.328,77,0.289,78,0.289,80,1.156,82,1.432,83,2.005,85,0.912,86,1.307,87,1.307,88,0.912,89,1.669,90,0.912,91,0.671,92,0.912,93,0.912,94,0.76,95,0.912,96,0.912,97,0.76,98,0.833,99,0.912,100,1.392,101,1.73,102,1.382,103,0.034,104,0.912,105,0.912,106,0.76,107,0.912,108,0.912,109,0.912,110,0.76,111,0.912,112,0.912,113,0.912,114,0.021,195,2.21,202,1.194,217,0.994,223,1.647,224,2.675,236,1.328,253,3.017,255,1.274,256,1.865,384,3.094,398,3.094,437,2.362,474,2.698,475,3.502,476,2.362,483,3.017,485,3.619,538,1.726,546,2.362,548,3.952,549,2.158,550,3.094,551,4.354,552,2.675,553,3.73,554,3.73,555,3.73,556,3.338,557,4.354,558,3.73,559,3.73,560,3.73,561,3.73,562,3.73,563,3.73,564,4.361,565,3.73,566,3.73,567,4.361,568,4.764,569,3.73,570,2.601,571,2.601,572,4.361,573,4.764,574,2.601,575,2.601,576,2.601,577,3.73,578,3.73,579,3.73,580,3.73,581,2.601]],["title/interfaces/DropdownGroup.html",[356,0.445,582,1.961]],["body/interfaces/DropdownGroup.html",[3,0.508,4,0.508,8,0.439,46,0.439,47,0.6,49,0.6,50,0.035,51,1.734,53,0.912,77,0.6,103,0.03,114,0.03,356,0.776,358,1.754,400,3.276,582,3.417,583,3.276,584,4.256,585,4.922,586,3.758]],["title/interfaces/DropdownItem.html",[356,0.445,586,1.961]],["body/interfaces/DropdownItem.html",[3,0.51,4,0.51,8,0.441,46,0.441,47,0.602,49,0.602,50,0.035,51,1.737,53,1.186,77,0.602,103,0.03,114,0.03,356,0.778,358,1.761,400,4.262,582,2.906,583,3.291,584,3.291,585,3.806,586,3.644]],["title/components/NavbarComponent.html",[0,0.344,30,0.905]],["body/components/NavbarComponent.html",[0,0.536,1,0.916,2,1.241,3,0.349,4,0.349,5,1.098,6,1.098,7,1.098,8,0.301,15,3.047,22,1.098,23,2.115,24,2.115,26,1.489,27,1.489,28,1.489,30,1.51,34,0.916,36,0.916,37,3.997,38,3.997,39,2.46,40,3.456,41,3.997,42,1.489,44,1.489,46,0.301,47,0.472,49,0.349,50,0.036,52,1.132,53,0.848,54,3.047,55,3.524,56,3.524,57,1.36,59,1.308,60,0.916,62,0.691,67,0.916,68,1.003,71,1.6,72,2.6,73,2.6,74,1.6,75,2.248,76,2.6,77,0.349,78,0.349,79,4.285,80,0.761,85,1.098,86,1.489,87,1.489,88,1.098,89,1.81,90,1.098,91,0.764,92,1.098,93,1.098,94,0.916,95,1.098,96,1.098,97,0.916,98,1.003,99,1.098,100,0.916,101,1.003,102,0.691,103,0.027,104,1.098,105,1.098,106,0.916,107,1.098,108,1.098,109,1.098,110,0.916,111,1.098,112,1.098,113,1.098,114,0.024,118,3.993,135,2.23,159,3.456,213,1.631,236,1.6,241,2.248,244,1.985,257,2.406,343,3.524,587,2.6,588,4.819,589,4.248,590,4.248,591,5.166,592,5.4,593,4.248,594,3.134,595,4.248,596,4.248,597,4.248,598,4.248,599,4.819,600,3.134,601,3.134,602,3.134,603,3.134,604,3.047]],["title/components/NotFoundComponent.html",[0,0.344,106,0.905]],["body/components/NotFoundComponent.html",[0,0.596,1,1.141,2,1.433,3,0.434,4,0.434,5,1.369,6,1.369,7,1.369,8,0.375,12,4.068,22,1.369,23,2.184,24,2.184,26,1.719,27,1.719,28,1.369,30,1.141,34,1.141,36,1.141,42,1.719,44,1.719,50,0.035,59,0.861,60,1.141,62,0.861,67,1.141,68,1.25,77,0.434,78,0.434,80,0.948,85,1.369,86,1.719,87,1.719,88,1.369,89,1.971,90,1.369,91,0.882,92,1.369,93,1.369,94,1.141,95,1.369,96,1.369,97,1.141,98,1.25,99,1.369,100,1.141,101,1.25,102,0.861,103,0.03,104,1.369,105,1.369,106,1.644,107,1.369,108,1.369,109,1.369,110,1.141,111,1.369,112,1.369,113,1.369,114,0.028,605,3.24,606,3.24,607,3.24,608,5.624,609,4.905,610,4.905]],["title/components/OverlayComponent.html",[0,0.344,36,0.905]],["body/components/OverlayComponent.html",[0,0.357,1,0.464,2,0.748,3,0.177,4,0.177,5,0.556,6,0.556,7,0.556,8,0.152,22,0.556,23,1.829,24,1.829,26,0.897,27,0.897,28,0.897,30,0.464,34,0.464,36,1.077,39,1.641,42,0.897,44,0.897,46,0.152,47,0.285,49,0.177,50,0.036,52,0.982,53,0.736,57,1.294,59,1.002,60,0.464,62,0.35,67,0.464,68,0.508,74,0.81,77,0.177,78,0.177,80,0.385,85,0.556,86,0.897,87,0.897,88,0.556,89,1.292,90,0.556,91,1.156,92,0.556,93,0.556,94,0.464,95,0.556,96,0.556,97,0.464,98,0.508,99,0.556,100,0.464,101,0.508,102,0.35,103,0.018,104,0.556,105,0.556,106,0.464,107,0.556,108,0.556,109,0.556,110,0.464,111,0.556,112,0.556,113,0.556,114,0.014,128,2.305,129,2.035,130,2.305,132,2.035,135,1.487,146,1.077,170,0.609,171,1.306,202,0.819,209,1.657,236,0.81,246,0.81,247,1.138,248,1.138,252,1.005,344,1.62,408,4.157,517,1.62,611,1.317,612,2.558,613,3.214,614,2.558,615,2.558,616,3.214,617,3.214,618,4.042,619,4.544,620,3.686,621,1.587,622,2.558,623,2.558,624,3.949,625,2.558,626,4.462,627,2.558,628,3.686,629,2.558,630,3.686,631,4.728,632,2.558,633,2.558,634,2.558,635,2.558,636,5.011,637,3.686,638,1.587,639,2.558,640,1.587,641,2.558,642,1.587,643,2.558,644,6.419,645,2.558,646,2.558,647,2.558,648,2.558,649,2.558,650,2.558,651,2.558,652,2.558,653,2.558,654,2.558,655,2.558,656,2.558,657,2.558,658,2.558,659,2.558,660,2.558,661,2.558,662,2.558,663,2.558,664,2.122,665,2.558,666,2.558,667,2.558,668,2.558,669,2.558,670,2.558,671,2.558,672,2.558,673,2.558,674,2.558,675,2.558,676,2.558,677,2.122,678,2.558,679,2.558,680,2.558,681,2.558,682,2.558,683,2.558,684,2.558,685,2.558,686,2.558,687,2.558,688,2.558,689,2.558,690,2.558,691,4.321,692,2.558,693,2.558,694,2.558,695,2.558,696,2.558,697,2.558,698,2.558,699,2.558,700,2.558,701,2.558,702,2.558,703,2.558,704,2.558,705,2.558,706,2.558,707,2.558,708,2.558,709,2.558,710,2.558,711,2.558,712,2.558,713,2.558,714,2.558,715,2.558,716,2.558,717,2.558,718,2.558,719,3.686,720,3.686,721,2.558,722,3.686,723,2.558,724,2.558,725,2.558,726,2.558,727,2.558,728,2.558,729,2.558,730,2.558,731,2.558,732,2.558,733,2.558,734,2.558,735,2.558,736,2.558,737,2.558,738,2.558,739,2.558,740,2.558,741,2.558,742,3.686,743,2.558,744,2.558,745,2.558,746,2.558,747,2.558,748,2.558,749,2.558,750,2.558,751,2.558,752,2.558,753,2.558,754,2.558,755,3.686,756,2.558,757,2.558,758,2.558,759,2.558,760,2.558,761,2.558,762,2.558,763,2.558,764,2.558,765,1.587,766,1.587,767,1.317,768,1.587,769,1.587,770,1.587,771,2.558,772,1.587,773,2.558,774,1.587,775,2.122,776,2.558,777,2.558,778,2.558,779,2.558,780,1.587,781,2.558,782,1.587,783,2.558,784,2.122,785,2.558,786,2.558,787,2.122,788,1.587,789,1.587,790,1.587,791,1.587,792,1.587]],["title/components/SkillCheckComponent.html",[0,0.344,34,0.905]],["body/components/SkillCheckComponent.html",[0,0.453,1,0.471,2,0.756,3,0.179,4,0.179,5,0.564,6,0.564,7,0.564,8,0.155,10,0.391,22,0.564,23,1.836,24,1.836,26,0.907,27,0.907,28,0.907,30,0.471,31,2.055,34,1.086,36,0.471,39,1.657,42,0.907,44,0.907,46,0.312,47,0.288,49,0.484,50,0.036,52,1.371,53,1.122,57,1.785,59,1.155,60,0.471,62,1.081,63,4.033,67,0.471,68,0.515,71,0.822,74,1.321,77,0.179,78,0.179,80,1.109,82,1.563,85,0.564,86,0.907,87,0.907,88,0.564,89,1.302,90,0.564,91,0.906,92,0.564,93,0.564,94,0.471,95,0.564,96,0.564,97,1.086,98,1.039,99,0.564,100,0.756,101,0.828,102,0.715,103,0.026,104,0.564,105,0.564,106,0.471,107,0.564,108,0.564,109,0.564,110,0.471,111,0.564,112,0.564,113,0.564,114,0.015,119,2.692,120,1.639,126,0.907,127,2.692,128,2.327,129,2.055,130,2.327,132,2.055,135,1.198,136,2.692,140,2.692,145,2.692,146,1.089,151,3.083,153,2.665,155,1.838,162,1.838,170,1.563,171,1.897,182,1.336,187,1.502,188,1.089,193,1.039,195,1.565,196,3.377,198,2.147,202,0.828,204,0.745,207,2.692,209,2.025,210,2.92,211,1.02,213,1.824,223,2.055,224,1.856,232,2.147,233,2.147,234,2.692,236,0.822,237,1.336,246,0.822,247,1.155,248,1.155,250,1.02,251,1.336,252,1.02,253,1.02,254,1.336,255,1.271,256,1.155,257,2.105,261,1.336,266,1.602,290,0.828,309,1.336,310,1.336,311,1.336,312,1.336,313,1.336,314,1.336,319,1.336,331,1.336,344,2.354,348,3.083,403,1.466,404,1.466,405,1.466,406,1.466,407,1.466,437,1.639,458,4.346,474,1.838,491,1.466,492,2.354,494,2.105,495,2.913,501,2.754,503,1.639,508,1.466,584,1.155,604,2.665,624,1.856,626,3.083,664,3.791,677,3.607,767,1.336,787,1.336,793,4.665,794,1.155,795,2.588,796,3.717,797,2.588,798,2.147,799,2.588,800,3.245,801,2.588,802,2.588,803,3.245,804,3.245,805,3.245,806,3.245,807,4.072,808,4.072,809,3.245,810,3.245,811,2.588,812,2.588,813,3.717,814,1.61,815,2.588,816,1.61,817,1.61,818,2.588,819,1.61,820,2.588,821,1.336,822,1.61,823,1.61,824,1.61,825,3.717,826,1.61,827,3.717,828,1.61,829,1.61,830,1.61,831,2.147,832,2.147,833,1.61,834,1.61,835,1.61,836,1.61,837,2.588,838,2.588,839,2.588,840,2.588,841,2.588,842,1.61,843,1.61,844,1.61,845,1.61,846,1.61,847,1.61,848,1.61,849,1.61,850,1.61,851,1.61,852,1.61,853,1.61,854,1.61,855,1.61,856,1.61,857,1.61,858,1.61,859,1.61,860,1.61,861,1.61,862,1.61,863,1.61,864,1.61,865,1.61,866,1.61,867,1.61,868,1.61,869,1.61,870,1.61,871,1.61,872,1.61,873,1.61,874,1.61,875,1.61,876,1.61,877,1.61,878,1.61,879,1.61,880,1.61,881,1.61,882,1.61,883,1.61,884,1.61,885,2.588,886,2.588,887,2.147,888,2.588,889,2.588,890,3.717,891,3.717,892,2.588,893,2.588,894,2.588,895,2.588,896,2.588,897,2.588,898,2.588,899,2.588,900,2.588,901,3.717,902,2.588,903,2.588,904,4.753,905,4.753,906,2.588,907,4.753,908,2.588,909,2.588,910,2.588,911,2.588]],["title/classes/Spell.html",[78,0.344,122,1.188]],["body/classes/Spell.html",[3,0.325,4,0.325,8,0.281,10,0.71,46,0.389,47,0.451,49,0.669,50,0.036,51,1.794,57,1.789,59,0.645,77,0.558,78,0.325,91,1.054,103,0.026,114,0.023,122,1.927,125,2.637,126,1.421,146,1.706,155,1.657,163,1.556,164,1.494,169,2.491,170,1.556,171,1.494,177,2.296,180,1.556,187,1.876,188,1.706,193,1.488,202,1.297,203,2.152,205,1.494,206,1.297,209,1.421,217,1.591,228,2.219,245,1.123,255,1.467,290,0.937,293,2.296,356,0.722,459,2.023,465,1.927,466,1.354,467,1.876,518,2.099,519,2.843,538,1.876,556,1.657,912,1.657,913,2.296,914,2.069,915,2.069,916,2.567,917,2.567,918,2.069,919,2.99,920,4.054,921,2.567,922,4.054,923,4.054,924,3.857,925,2.927,926,2.927,927,2.927,928,2.567,929,2.927,930,2.843,931,2.927,932,1.657,933,1.854,934,1.854,935,2.567,936,1.854,937,1.854,938,2.567,939,2.945,940,2.567,941,1.854,942,1.854,943,1.854,944,1.854,945,3.179,946,1.854,947,1.854,948,2.567,949,2.567,950,2.567,951,1.657,952,1.854,953,1.854,954,1.854]],["title/interfaces/SpellI.html",[228,1.303,356,0.445]],["body/interfaces/SpellI.html",[3,0.356,4,0.356,8,0.307,10,0.777,46,0.414,47,0.479,49,0.656,50,0.036,51,1.791,59,0.705,77,0.579,78,0.356,91,1.047,103,0.027,114,0.024,122,2,125,2.649,126,1.121,163,1.228,164,1.634,169,2.509,177,1.812,180,1.654,193,1.559,202,1.559,203,1.994,205,1.634,206,1.559,209,1.51,217,1.572,228,2.193,245,1.228,255,1.523,290,1.024,293,2.44,356,0.782,358,1.228,459,1.87,465,1.87,466,1.994,467,1.994,519,1.812,538,2.254,556,1.812,912,1.812,913,1.812,914,1.634,915,1.634,916,2.027,917,2.027,918,1.634,919,3.01,921,2.027,924,3.574,928,2.027,930,2.758,932,2.44,933,2.027,934,2.027,935,2.728,936,2.027,937,2.027,938,2.728,939,3.084,940,2.728,941,2.027,942,2.027,943,2.027,944,2.027,945,3.3,946,2.027,947,2.027,948,2.728,949,2.728,950,2.728,951,1.812,952,2.027,953,2.027,954,2.027]],["title/interfaces/SpellResponse.html",[245,1.188,356,0.445]],["body/interfaces/SpellResponse.html",[3,0.364,4,0.364,8,0.314,10,0.795,46,0.42,47,0.486,49,0.627,50,0.036,51,1.749,59,0.722,77,0.585,78,0.364,91,0.986,103,0.032,114,0.025,122,1.891,125,2.434,126,1.147,163,1.257,164,2.233,169,2.424,177,1.854,180,2.019,193,1.577,202,1.4,203,2.024,205,1.671,206,1.4,209,1.533,217,1.579,228,2.074,245,1.679,255,1.537,290,1.048,293,2.477,356,0.756,358,1.257,459,1.891,465,2.019,466,1.515,467,2.28,519,1.854,538,2.024,556,1.854,912,1.854,913,1.854,914,1.671,915,1.671,916,2.073,917,2.073,918,1.671,919,2.879,921,2.073,928,2.073,930,2.978,932,1.854,933,2.073,934,2.073,935,2.77,936,2.073,937,2.073,938,2.77,939,3.12,940,2.77,941,2.073,942,2.073,943,2.073,944,2.073,945,3.33,946,2.073,947,2.073,948,3.12,949,3.12,950,3.12,951,2.978,952,2.073,953,2.073,954,2.073]],["title/interfaces/SpellResponseResults.html",[180,1.188,356,0.445]],["body/interfaces/SpellResponseResults.html",[3,0.353,4,0.353,8,0.305,10,0.771,46,0.521,47,0.477,49,0.646,50,0.036,51,1.805,59,0.7,77,0.578,78,0.353,91,1.045,103,0.027,114,0.024,122,1.994,125,2.404,126,1.113,163,1.219,164,1.622,169,2.505,177,1.799,180,1.862,193,1.553,202,1.553,203,1.984,205,1.622,206,1.553,209,1.502,217,1.569,228,2.043,245,1.219,255,1.518,290,1.017,293,2.427,356,0.747,358,1.219,459,1.862,465,1.994,466,1.47,467,2.245,519,1.799,538,2.245,556,2.427,912,1.799,913,1.799,914,1.622,915,1.622,916,2.011,917,2.011,918,1.622,919,3.006,921,2.011,928,2.011,930,2.748,932,1.799,933,2.011,934,2.011,935,2.715,936,2.011,937,2.011,938,2.715,939,3.073,940,2.715,941,2.011,942,2.011,943,2.011,944,2.011,945,3.29,946,2.011,947,2.011,948,3.073,949,3.073,950,3.073,951,1.799,952,2.715,953,2.715,954,2.715]],["title/injectables/SpellsService.html",[144,1.961,955,2.221]],["body/injectables/SpellsService.html",[3,0.448,4,0.252,8,0.218,10,1.084,13,1.913,25,1.883,46,0.218,47,0.376,49,0.645,50,0.036,51,1.514,52,1.075,53,0.999,57,1.659,59,0.984,60,0.664,77,0.252,78,0.252,91,0.859,103,0.019,114,0.019,120,2.139,122,2.31,125,1.563,144,2.139,146,1.422,155,1.286,159,4.123,164,1.724,169,2.29,170,2.044,176,2.801,180,1.296,186,2.801,187,1.866,188,1.698,202,1.429,203,2.632,204,2.067,206,1.429,209,1.673,217,1.381,228,2.182,241,1.628,244,1.438,245,1.714,266,1.413,289,3.705,290,1.659,459,2.044,465,1.714,494,1.913,538,1.563,550,2.801,552,3.203,557,3.705,914,1.724,915,1.724,918,2.555,919,2.962,930,1.913,932,1.913,955,2.422,956,1.883,957,1.883,958,3.377,959,5.324,960,3.377,961,5.44,962,5.749,963,3.377,964,3.377,965,3.377,966,3.377,967,4.466,968,5.004,969,4.466,970,4.033,971,4.033,972,3.377,973,5.004,974,2.27,975,3.377,976,2.27,977,4.466,978,4.466,979,3.377,980,3.96,981,4.033,982,5.004,983,3.377,984,3.377,985,2.27,986,3.377,987,3.377,988,2.27,989,4.466,990,3.377,991,4.466,992,3.377,993,3.377,994,3.377,995,2.801,996,3.377,997,3.377,998,3.377,999,3.377,1000,3.377,1001,2.27,1002,2.27,1003,3.377,1004,2.27,1005,2.27,1006,2.27,1007,3.377,1008,2.27,1009,2.27,1010,2.27,1011,3.377,1012,2.27,1013,2.27,1014,2.27,1015,2.27,1016,2.27,1017,4.033,1018,2.27,1019,2.27,1020,2.27,1021,4.033,1022,2.27,1023,2.27,1024,2.27,1025,2.27,1026,2.27]],["title/components/StepperComponent.html",[0,0.344,110,0.905]],["body/components/StepperComponent.html",[0,0.41,1,0.749,2,1.079,3,0.285,4,0.285,5,0.898,6,0.898,7,0.898,8,0.246,10,0.622,22,0.898,23,2.021,24,2.021,26,0.898,27,1.516,28,0.898,30,0.749,34,0.749,36,0.749,39,1.884,40,2.647,42,1.294,44,1.294,46,0.246,47,0.41,49,0.599,50,0.036,51,1.079,52,0.683,53,1.074,54,2.647,57,1.823,59,1.105,60,0.749,62,0.565,67,0.749,68,0.82,74,1.309,75,1.838,77,0.285,78,0.285,80,0.622,85,0.898,86,1.294,87,1.294,88,0.898,89,1.658,90,0.898,91,0.991,92,0.898,93,0.898,94,0.749,95,0.898,96,0.898,97,0.749,98,0.82,99,0.898,100,0.749,101,0.82,102,0.565,103,0.024,104,0.898,105,0.898,106,0.749,107,0.898,108,0.898,109,0.898,110,1.526,111,1.294,112,0.898,113,0.898,114,0.021,126,1.294,146,1.554,161,3.062,162,2.09,170,2.154,171,2.865,187,2.417,188,2.319,211,1.623,213,1.925,217,1.435,246,1.309,266,1.658,386,3.062,390,2.126,552,2.647,624,4.024,775,3.062,821,3.062,1027,2.126,1028,3.691,1029,3.691,1030,4.325,1031,3.691,1032,3.691,1033,3.691,1034,3.691,1035,3.691,1036,3.691,1037,3.691,1038,3.691,1039,3.691,1040,4.325,1041,2.126,1042,3.691,1043,2.563,1044,3.691,1045,3.691,1046,3.691,1047,3.691,1048,3.691,1049,3.691,1050,4.732,1051,4.732,1052,3.691,1053,4.732,1054,3.691,1055,3.691,1056,3.691,1057,3.691,1058,3.691,1059,2.563,1060,2.563,1061,3.691,1062,2.563,1063,2.563,1064,2.563,1065,2.563,1066,3.691,1067,2.563,1068,2.563,1069,2.563,1070,2.563,1071,2.563,1072,2.563,1073,2.563,1074,2.563,1075,2.563,1076,2.563,1077,2.563,1078,2.563,1079,5.015,1080,3.691,1081,3.691]],["title/coverage.html",[1082,3.495]],["body/coverage.html",[0,0.673,1,1.02,8,0.335,9,2.894,30,1.02,34,1.02,36,1.02,49,0.388,50,0.036,63,2.502,67,1.02,69,2.502,78,0.507,84,2.894,94,1.02,97,1.02,98,1.46,100,1.02,102,1.006,103,0.03,106,1.02,110,1.02,114,0.026,115,2.894,116,2.502,122,1.339,144,2.209,180,1.339,193,1.117,195,1.469,205,2.753,209,1.223,223,2.209,228,1.469,245,1.339,250,2.209,253,2.209,255,1.02,266,2.137,349,2.894,350,2.894,351,2.894,356,0.853,357,2.502,359,2.502,381,3.785,382,2.894,464,2.879,504,2.209,507,2.209,508,2.584,546,2.209,548,2.894,549,2.894,551,2.894,582,2.209,583,3.272,586,2.209,587,2.894,605,2.894,606,2.894,607,2.894,611,2.894,784,2.894,793,2.894,794,2.502,887,2.894,912,3.054,955,3.272,957,2.894,1027,2.894,1082,2.894,1083,3.489,1084,3.489,1085,3.489,1086,3.489,1087,2.894,1088,2.894,1089,5.74,1090,4.563,1091,3.489,1092,3.489,1093,3.489,1094,3.489,1095,3.489,1096,3.489,1097,3.489,1098,3.489,1099,3.489,1100,3.489,1101,3.489,1102,5.084,1103,3.489,1104,3.489,1105,3.489,1106,4.563,1107,3.489,1108,3.489,1109,3.489,1110,3.489,1111,3.489,1112,3.489,1113,4.217,1114,2.894,1115,2.894,1116,2.894,1117,3.489]],["title/dependencies.html",[1118,2.15,1119,3.086]],["body/dependencies.html",[50,0.036,60,1.307,61,3.71,71,2.283,103,0.03,114,0.03,244,2.832,246,2.283,1119,3.71,1120,4.472,1121,6.293,1122,4.472,1123,4.472,1124,4.472,1125,4.472,1126,4.472,1127,5.329,1128,5.329,1129,4.472,1130,4.472,1131,4.472,1132,4.472,1133,4.472,1134,4.472,1135,4.472,1136,4.472,1137,4.472]],["title/miscellaneous/enumerations.html",[1138,1.641,1139,3.086]],["body/miscellaneous/enumerations.html",[46,0.429,50,0.034,53,1.176,62,0.986,82,1.717,102,0.986,103,0.03,114,0.03,123,3.71,213,1.717,257,2.533,266,1.567,344,2.832,359,3.207,367,3.71,368,4.42,369,3.71,370,3.71,371,3.71,372,3.71,373,3.71,374,3.71,375,3.71,376,3.71,377,3.71,378,3.71,379,3.71,380,3.71,464,2.533,495,3.337,604,3.207,831,3.71,832,4.42,1138,2.832,1139,3.71,1140,4.472,1141,4.472,1142,4.472,1143,4.472,1144,4.472,1145,4.472]],["title/index.html",[46,0.249,1146,2.592,1147,2.592]],["body/index.html",[2,1.229,13,3.269,17,3.49,50,0.031,62,1.222,68,1.644,80,1.345,82,1.971,83,2.162,103,0.029,114,0.029,116,3.017,118,3.683,122,1.971,125,1.947,162,2.382,202,1.347,203,2.377,206,1.927,437,2.664,465,2.272,468,3.252,491,2.382,546,2.664,794,3.017,798,4.26,914,2.148,915,2.622,918,2.148,980,4.26,995,3.49,1148,4.207,1149,4.207,1150,4.207,1151,4.207,1152,5.544,1153,4.207,1154,5.136,1155,4.207,1156,4.207,1157,4.207,1158,5.136,1159,4.207,1160,4.207,1161,4.207,1162,4.207,1163,4.207,1164,4.207,1165,4.207,1166,4.207,1167,4.207,1168,4.207]],["title/modules.html",[1169,3.495]],["body/modules.html",[50,0.032,103,0.032,114,0.032,1169,4.136]],["title/overview.html",[1170,3.495]],["body/overview.html",[2,1.43,50,0.032,103,0.032,114,0.032,257,3.181,358,1.879,505,3.1,506,3.1,518,3.51,956,4.06,1170,4.06]],["title/properties.html",[47,0.414,1118,2.15]],["body/properties.html",[47,0.551,50,0.033,103,0.032,114,0.032,913,2.804,1171,4.952]],["title/miscellaneous/variables.html",[497,2.107,1138,1.641]],["body/miscellaneous/variables.html",[46,0.528,49,0.638,50,0.036,52,1.528,53,1.144,91,0.913,103,0.031,114,0.028,169,2.314,180,1.948,213,2.26,245,1.583,266,1.778,497,2.336,919,2.591,951,2.336,1041,3.422,1087,3.422,1088,4.209,1113,3.422,1114,4.209,1115,4.559,1116,4.559,1138,2.612,1172,4.125,1173,5.496,1174,4.125,1175,4.125,1176,4.125,1177,4.125,1178,4.125,1179,4.125,1180,5.496,1181,4.125,1182,4.125,1183,4.125,1184,4.125,1185,4.125,1186,4.125,1187,4.125,1188,4.125]]],"invertedIndex":[["",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":266,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["0.0.0",{"_index":1171,"title":{},"body":{"properties.html":{}}}],["0.14.3",{"_index":1137,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1089,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1102,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1103,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1092,"title":{},"body":{"coverage.html":{}}}],["00",{"_index":1180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":213,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/NavbarComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["1/11",{"_index":1112,"title":{},"body":{"coverage.html":{}}}],["1/15",{"_index":1097,"title":{},"body":{"coverage.html":{}}}],["1/18",{"_index":1104,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1086,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1108,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1101,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":1106,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":1094,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":1105,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":506,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"overview.html":{}}}],["100",{"_index":887,"title":{},"body":{"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["12",{"_index":507,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"coverage.html":{}}}],["16",{"_index":1093,"title":{},"body":{"coverage.html":{}}}],["18",{"_index":1099,"title":{},"body":{"coverage.html":{}}}],["18.0.1",{"_index":1125,"title":{},"body":{"dependencies.html":{}}}],["18.2.4",{"_index":1121,"title":{},"body":{"dependencies.html":{}}}],["18/22",{"_index":1096,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":257,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["2.3.0",{"_index":1135,"title":{},"body":{"dependencies.html":{}}}],["2/11",{"_index":1100,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":508,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["25",{"_index":1090,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":604,"title":{},"body":{"components/NavbarComponent.html":{},"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{}}}],["3/8",{"_index":1110,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1107,"title":{},"body":{"coverage.html":{}}}],["37",{"_index":1109,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":503,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["5",{"_index":784,"title":{},"body":{"components/OverlayComponent.html":{},"coverage.html":{}}}],["5.2.0",{"_index":1132,"title":{},"body":{"dependencies.html":{}}}],["5/20",{"_index":1091,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":1098,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1085,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":504,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"coverage.html":{}}}],["6th",{"_index":983,"title":{},"body":{"injectables/SpellsService.html":{}}}],["7.8.0",{"_index":1133,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":505,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"overview.html":{}}}],["81",{"_index":1095,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1111,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":885,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["9pdf6ttr0j7hmkk_7t6xtpun",{"_index":1039,"title":{},"body":{"components/StepperComponent.html":{}}}],["abbreviation",{"_index":644,"title":{},"body":{"components/OverlayComponent.html":{}}}],["access",{"_index":1151,"title":{},"body":{"index.html":{}}}],["accessors",{"_index":401,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["actual_component",{"_index":113,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["add",{"_index":775,"title":{},"body":{"components/OverlayComponent.html":{},"components/StepperComponent.html":{}}}],["added",{"_index":385,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["adding",{"_index":479,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["additional",{"_index":914,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["addobservabletoautocomplete",{"_index":147,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["addobservabletoleveldropdown",{"_index":148,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["address",{"_index":628,"title":{},"body":{"components/OverlayComponent.html":{}}}],["address2",{"_index":629,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform",{"_index":616,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls['address'].haserror('required",{"_index":774,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls['city'].haserror('required",{"_index":780,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls['firstname'].haserror('required",{"_index":770,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls['lastname'].haserror('required",{"_index":772,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls['state'].haserror('required",{"_index":782,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls[\\'address\\'].haserror(\\'required",{"_index":790,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls[\\'city\\'].haserror(\\'required",{"_index":791,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls[\\'firstname\\'].haserror(\\'required",{"_index":788,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls[\\'lastname\\'].haserror(\\'required",{"_index":789,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls[\\'state\\'].haserror(\\'required",{"_index":792,"title":{},"body":{"components/OverlayComponent.html":{}}}],["advantage",{"_index":495,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{}}}],["advantage.advantage",{"_index":825,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantage.disadvantage",{"_index":827,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantage.none",{"_index":501,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["advantageadvantage",{"_index":803,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantagedisadvantage",{"_index":804,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantageenum",{"_index":805,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantagenone",{"_index":806,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantageoptions",{"_index":807,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["ak",{"_index":647,"title":{},"body":{"components/OverlayComponent.html":{}}}],["al",{"_index":645,"title":{},"body":{"components/OverlayComponent.html":{}}}],["alabama",{"_index":643,"title":{},"body":{"components/OverlayComponent.html":{}}}],["alaska",{"_index":646,"title":{},"body":{"components/OverlayComponent.html":{}}}],["alert('thanks",{"_index":769,"title":{},"body":{"components/OverlayComponent.html":{}}}],["allow",{"_index":916,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["allows",{"_index":119,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["american",{"_index":648,"title":{},"body":{"components/OverlayComponent.html":{}}}],["amount",{"_index":124,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["angular",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{},"components/StepperComponent.html":{}}}],["angular/animations",{"_index":1120,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1122,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/layout",{"_index":602,"title":{},"body":{"components/NavbarComponent.html":{}}}],["angular/common",{"_index":71,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/SkillCheckComponent.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":1005,"title":{},"body":{"injectables/SpellsService.html":{}}}],["angular/compiler",{"_index":1123,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"dependencies.html":{}}}],["angular/fire",{"_index":1124,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":246,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":1126,"title":{},"body":{"dependencies.html":{}}}],["angular/material/autocomplete",{"_index":249,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["angular/material/button",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["angular/material/card",{"_index":252,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["angular/material/form",{"_index":1078,"title":{},"body":{"components/StepperComponent.html":{}}}],["angular/material/icon",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{},"components/StepperComponent.html":{}}}],["angular/material/input",{"_index":247,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["angular/material/list",{"_index":76,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["angular/material/radio",{"_index":768,"title":{},"body":{"components/OverlayComponent.html":{}}}],["angular/material/select",{"_index":248,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["angular/material/sidenav",{"_index":72,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["angular/material/table",{"_index":575,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["angular/material/toolbar",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["angular/platform",{"_index":1127,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":61,"title":{},"body":{"components/AppComponent.html":{},"dependencies.html":{}}}],["angularbg3cheats",{"_index":1148,"title":{},"body":{"index.html":{}}}],["api",{"_index":203,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["api/spells/cantrip",{"_index":1187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/spells/level",{"_index":1188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":24,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["app.component.html",{"_index":43,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":45,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":1088,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appears",{"_index":562,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["applicationconfig",{"_index":1174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apt",{"_index":777,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ar",{"_index":653,"title":{},"body":{"components/OverlayComponent.html":{}}}],["arizona",{"_index":650,"title":{},"body":{"components/OverlayComponent.html":{}}}],["arkansas",{"_index":652,"title":{},"body":{"components/OverlayComponent.html":{}}}],["array",{"_index":167,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["array(6",{"_index":218,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["array(7).keys()].slice(spell.level",{"_index":268,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["arrays",{"_index":539,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["async",{"_index":343,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{}}}],["asyncpipe",{"_index":588,"title":{},"body":{"components/NavbarComponent.html":{}}}],["attack",{"_index":68,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["attackrollscomponent",{"_index":67,"title":{"components/AttackRollsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["attackrollsform",{"_index":137,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["attackrollsformsubmit",{"_index":149,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["attempts",{"_index":494,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{}}}],["attemptsoptions",{"_index":808,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["autocomplete",{"_index":160,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["automatic",{"_index":891,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["automatically",{"_index":387,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["az",{"_index":651,"title":{},"body":{"components/OverlayComponent.html":{}}}],["bar",{"_index":558,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["barbarian",{"_index":369,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["bard",{"_index":370,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["based",{"_index":164,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["bg3",{"_index":55,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["block",{"_index":576,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["bonus",{"_index":98,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["boolean",{"_index":821,"title":{},"body":{"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["both",{"_index":384,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{}}}],["breakpointobserver",{"_index":591,"title":{},"body":{"components/NavbarComponent.html":{}}}],["breakpoints",{"_index":601,"title":{},"body":{"components/NavbarComponent.html":{}}}],["browser",{"_index":1128,"title":{},"body":{"dependencies.html":{}}}],["buttons",{"_index":1163,"title":{},"body":{"index.html":{}}}],["c/o",{"_index":776,"title":{},"body":{"components/OverlayComponent.html":{}}}],["c77de\",\"appid\":\"1:864287131419:web:4b60183cca62591db7b5be\",\"storagebucket\":\"test",{"_index":1181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["c77de.firebaseapp.com\",\"messagingsenderid\":\"864287131419",{"_index":1183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["c77de.firebasestorage.app\",\"apikey\":\"aizasydp4kd1dombpfosirbe7i6dyljmbbnbtay\",\"authdomain\":\"test",{"_index":1182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ca",{"_index":655,"title":{},"body":{"components/OverlayComponent.html":{}}}],["calc",{"_index":348,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["calculate",{"_index":123,"title":{},"body":{"components/AttackRollsComponent.html":{},"miscellaneous/enumerations.html":{}}}],["calculating",{"_index":468,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"index.html":{}}}],["calculations",{"_index":491,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"index.html":{}}}],["calculations.serivce.ts",{"_index":500,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["calculations.service",{"_index":256,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{}}}],["calculations.service.ts",{"_index":546,"title":{},"body":{"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"coverage.html":{},"index.html":{}}}],["calculator",{"_index":81,"title":{},"body":{"components/AppComponent.html":{}}}],["california",{"_index":654,"title":{},"body":{"components/OverlayComponent.html":{}}}],["call",{"_index":978,"title":{},"body":{"injectables/SpellsService.html":{}}}],["calls",{"_index":960,"title":{},"body":{"injectables/SpellsService.html":{}}}],["cantrip",{"_index":1186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["carolina",{"_index":720,"title":{},"body":{"components/OverlayComponent.html":{}}}],["case",{"_index":1033,"title":{},"body":{"components/StepperComponent.html":{}}}],["catch(e",{"_index":1025,"title":{},"body":{"injectables/SpellsService.html":{}}}],["chance",{"_index":474,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{}}}],["change",{"_index":161,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/StepperComponent.html":{}}}],["changes",{"_index":168,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["character",{"_index":95,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["characterclass",{"_index":368,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["charactersheetcomponent",{"_index":94,"title":{"components/CharacterSheetComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["characterstats",{"_index":357,"title":{"interfaces/CharacterStats.html":{}},"body":{"interfaces/CharacterStats.html":{},"coverage.html":{}}}],["charisma",{"_index":360,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["cheats",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["check",{"_index":82,"title":{},"body":{"components/AppComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["check'},{'name",{"_index":109,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["check.component",{"_index":64,"title":{},"body":{"components/AppComponent.html":{}}}],["check.component.html",{"_index":801,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.scss",{"_index":802,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts",{"_index":794,"title":{},"body":{"components/SkillCheckComponent.html":{},"coverage.html":{},"index.html":{}}}],["check.component.ts:105",{"_index":822,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:110",{"_index":814,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:30",{"_index":835,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:31",{"_index":843,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:32",{"_index":824,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:33",{"_index":842,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:44",{"_index":836,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:52",{"_index":829,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:53",{"_index":830,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:54",{"_index":826,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:55",{"_index":828,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:56",{"_index":833,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:61",{"_index":834,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:63",{"_index":819,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:67",{"_index":817,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:79",{"_index":816,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:88",{"_index":823,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check/skill",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["checking",{"_index":795,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["city",{"_index":630,"title":{},"body":{"components/OverlayComponent.html":{}}}],["class",{"_index":78,"title":{"classes/DiceSet.html":{},"classes/Spell.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["classes",{"_index":518,"title":{},"body":{"classes/DiceSet.html":{},"classes/Spell.html":{},"overview.html":{}}}],["cleric",{"_index":371,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["co",{"_index":657,"title":{},"body":{"components/OverlayComponent.html":{}}}],["colorado",{"_index":656,"title":{},"body":{"components/OverlayComponent.html":{}}}],["columbia",{"_index":663,"title":{},"body":{"components/OverlayComponent.html":{}}}],["commonmodule",{"_index":31,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{}}}],["company",{"_index":623,"title":{},"body":{"components/OverlayComponent.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["component_template",{"_index":90,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["componentref",{"_index":207,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"index.html":{},"overview.html":{}}}],["connecticut",{"_index":658,"title":{},"body":{"components/OverlayComponent.html":{}}}],["console.log('attack",{"_index":340,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["console.log('damage",{"_index":940,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["console.log('pipe",{"_index":1014,"title":{},"body":{"injectables/SpellsService.html":{}}}],["console.log('skill",{"_index":872,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["console.log('submit",{"_index":317,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["console.log('table",{"_index":863,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["console.log(skillchecksuccesschance",{"_index":875,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["const",{"_index":259,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["constitution",{"_index":361,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["construction",{"_index":852,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["constructor",{"_index":155,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/DiceSet.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{}}}],["constructor(http",{"_index":972,"title":{},"body":{"injectables/SpellsService.html":{}}}],["constructor(name",{"_index":921,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["constructor(undefined",{"_index":520,"title":{},"body":{"classes/DiceSet.html":{}}}],["contains",{"_index":980,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["control",{"_index":386,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/StepperComponent.html":{}}}],["controlcontainer",{"_index":391,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["controlkey",{"_index":399,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["controlvalueaccessor",{"_index":1040,"title":{},"body":{"components/StepperComponent.html":{}}}],["converts",{"_index":182,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["count",{"_index":951,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":1082,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":995,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["created",{"_index":486,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["creates",{"_index":550,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"injectables/SpellsService.html":{}}}],["createtablecomponent",{"_index":811,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["createtablecomponent(tableinput",{"_index":815,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["ct",{"_index":659,"title":{},"body":{"components/OverlayComponent.html":{}}}],["cum",{"_index":573,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["cumpercentageresults",{"_index":469,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["current",{"_index":190,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["currentadvantagevalue",{"_index":820,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["currentspellrange",{"_index":138,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["custom",{"_index":1029,"title":{},"body":{"components/StepperComponent.html":{}}}],["d10",{"_index":406,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["d10(dicenum",{"_index":452,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["d10num",{"_index":543,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["d12",{"_index":407,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["d12(dicenum",{"_index":455,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["d12num",{"_index":544,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["d20",{"_index":490,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["d20num",{"_index":545,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["d4",{"_index":403,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["d4(dicenum",{"_index":443,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["d4num",{"_index":540,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["d6",{"_index":404,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["d6(dicenum",{"_index":446,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["d6num",{"_index":541,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["d8",{"_index":405,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["d8(dicenum",{"_index":449,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["d8num",{"_index":542,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["dakota",{"_index":722,"title":{},"body":{"components/OverlayComponent.html":{}}}],["damage",{"_index":125,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["damage={0",{"_index":934,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["data",{"_index":465,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["day",{"_index":786,"title":{},"body":{"components/OverlayComponent.html":{}}}],["dc",{"_index":664,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["de",{"_index":661,"title":{},"body":{"components/OverlayComponent.html":{}}}],["decimals",{"_index":897,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["decorators",{"_index":220,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["decrement",{"_index":1050,"title":{},"body":{"components/StepperComponent.html":{}}}],["default",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":57,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["delaware",{"_index":660,"title":{},"body":{"components/OverlayComponent.html":{}}}],["dependencies",{"_index":1119,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["described",{"_index":484,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["description",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["dexterity",{"_index":362,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["dice",{"_index":80,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["dicebonuscomponent",{"_index":139,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["dicebonusformcomponent",{"_index":97,"title":{"components/DiceBonusFormComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["dicecalcresults",{"_index":330,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["dicecalcservice",{"_index":140,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["dicecalculations",{"_index":567,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["dicecalculationsservice",{"_index":223,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["dicenum",{"_index":420,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["diceresults",{"_index":195,"title":{"interfaces/DiceResults.html":{}},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["dicerollresults",{"_index":871,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["dicerolls",{"_index":175,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["diceset",{"_index":255,"title":{"classes/DiceSet.html":{}},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"coverage.html":{}}}],["diceset(diedict",{"_index":861,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diceset(json.parse",{"_index":315,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["diceset.target.tostring",{"_index":880,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diceset.ts",{"_index":1156,"title":{},"body":{"index.html":{}}}],["diceseti",{"_index":193,"title":{"interfaces/DiceSetI.html":{}},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"coverage.html":{}}}],["dicestring",{"_index":521,"title":{},"body":{"classes/DiceSet.html":{}}}],["dict",{"_index":850,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["die",{"_index":101,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["diebonuses",{"_index":849,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diebonusform",{"_index":809,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diedict",{"_index":314,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["diedict['advantage",{"_index":857,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diedict['attempts",{"_index":859,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diedict['d20",{"_index":854,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diedict['target",{"_index":855,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["dierollresultstablecomponent",{"_index":100,"title":{"components/DieRollResultsTableComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["different",{"_index":547,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["directive",{"_index":88,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["directives",{"_index":112,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["disadvantage",{"_index":832,"title":{},"body":{"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{}}}],["display",{"_index":799,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["displayedcolumns",{"_index":568,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["displayspellautocompletevalue",{"_index":150,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["displayspellautocompletevalue(selectedvalue",{"_index":179,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["district",{"_index":662,"title":{},"body":{"components/OverlayComponent.html":{}}}],["dnd",{"_index":918,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["dnd5eapi",{"_index":979,"title":{},"body":{"injectables/SpellsService.html":{}}}],["document.getelementbyid('damage",{"_index":321,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["document.getelementbyid('success",{"_index":868,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["document.getelementbyid('target",{"_index":870,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["documentation",{"_index":84,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["dropdown",{"_index":173,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["dropdowngroup",{"_index":582,"title":{"interfaces/DropdownGroup.html":{}},"body":{"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"coverage.html":{}}}],["dropdownitem",{"_index":586,"title":{"interfaces/DropdownItem.html":{}},"body":{"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"coverage.html":{}}}],["druid",{"_index":372,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["dynamic",{"_index":1129,"title":{},"body":{"dependencies.html":{}}}],["each",{"_index":538,"title":{},"body":{"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["easier",{"_index":917,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["easy",{"_index":851,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["edit",{"_index":383,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["element",{"_index":87,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["element.cumpercentageresults",{"_index":579,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["element.numresults",{"_index":578,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["element.percentageresults",{"_index":580,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["element.rollresult",{"_index":577,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["empty",{"_index":191,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["enum",{"_index":367,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":1139,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":477,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["export",{"_index":77,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["extends",{"_index":488,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["fail",{"_index":893,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["false",{"_index":641,"title":{},"body":{"components/OverlayComponent.html":{}}}],["fb",{"_index":617,"title":{},"body":{"components/OverlayComponent.html":{}}}],["federated",{"_index":665,"title":{},"body":{"components/OverlayComponent.html":{}}}],["field",{"_index":1030,"title":{},"body":{"components/StepperComponent.html":{}}}],["fighter",{"_index":373,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["filter",{"_index":986,"title":{},"body":{"injectables/SpellsService.html":{}}}],["filter(spelllist",{"_index":307,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["filteredgroupspelllist",{"_index":141,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["first",{"_index":771,"title":{},"body":{"components/OverlayComponent.html":{}}}],["firstname",{"_index":625,"title":{},"body":{"components/OverlayComponent.html":{}}}],["fl",{"_index":669,"title":{},"body":{"components/OverlayComponent.html":{}}}],["flat",{"_index":1144,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["florida",{"_index":668,"title":{},"body":{"components/OverlayComponent.html":{}}}],["flowicon",{"_index":911,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["fm",{"_index":667,"title":{},"body":{"components/OverlayComponent.html":{}}}],["fn",{"_index":1066,"title":{},"body":{"components/StepperComponent.html":{}}}],["for(item",{"_index":902,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["for(let",{"_index":293,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["for(spell",{"_index":345,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["for(spellgroup",{"_index":342,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["forkjoin",{"_index":240,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["forkjoin(spellsgroups).pipe",{"_index":302,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["form",{"_index":162,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["form'},{'name",{"_index":99,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["form.component",{"_index":251,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["form.component.html",{"_index":388,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.scss",{"_index":395,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts",{"_index":382,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"coverage.html":{}}}],["form.component.ts:25",{"_index":413,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:26",{"_index":409,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:27",{"_index":410,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:29",{"_index":415,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:33",{"_index":417,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:37",{"_index":419,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:41",{"_index":422,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:45",{"_index":424,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:49",{"_index":426,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:53",{"_index":428,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:57",{"_index":430,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:61",{"_index":432,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:65",{"_index":434,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:69",{"_index":436,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:73",{"_index":412,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:86",{"_index":411,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form/dice",{"_index":250,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["formbuilder",{"_index":766,"title":{},"body":{"components/OverlayComponent.html":{}}}],["formcontrol",{"_index":211,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["formcontrol(0",{"_index":458,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{}}}],["formcontrol(1",{"_index":840,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["formcontrol(advantage.none",{"_index":839,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["formcontrol(this.selectedspell?.level",{"_index":212,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["formgroup",{"_index":210,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{}}}],["forms",{"_index":563,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["formsmodule",{"_index":1046,"title":{},"body":{"components/StepperComponent.html":{}}}],["forwardref",{"_index":1044,"title":{},"body":{"components/StepperComponent.html":{}}}],["found",{"_index":608,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found'},{'name",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["found.component.html",{"_index":609,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found.component.scss",{"_index":610,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found.component.ts",{"_index":607,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["found/not",{"_index":606,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["free",{"_index":637,"title":{},"body":{"components/OverlayComponent.html":{}}}],["freepik",{"_index":906,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["frontend",{"_index":798,"title":{},"body":{"components/SkillCheckComponent.html":{},"index.html":{}}}],["function",{"_index":989,"title":{},"body":{"injectables/SpellsService.html":{}}}],["functions",{"_index":915,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["ga",{"_index":671,"title":{},"body":{"components/OverlayComponent.html":{}}}],["generated",{"_index":467,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["generatediceset",{"_index":151,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["generates",{"_index":797,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["generatetable",{"_index":152,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["generatetable(tableinput",{"_index":194,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["georgia",{"_index":670,"title":{},"body":{"components/OverlayComponent.html":{}}}],["getallspells",{"_index":968,"title":{},"body":{"injectables/SpellsService.html":{}}}],["getallspellsoflevel",{"_index":967,"title":{},"body":{"injectables/SpellsService.html":{}}}],["getallspellsoflevel(level",{"_index":984,"title":{},"body":{"injectables/SpellsService.html":{}}}],["getauth",{"_index":1185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getd10",{"_index":429,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["getd12",{"_index":433,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["getd4",{"_index":416,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["getd6",{"_index":421,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["getd8",{"_index":425,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["getparentformgroup",{"_index":414,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["gets",{"_index":201,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["getspell",{"_index":969,"title":{},"body":{"injectables/SpellsService.html":{}}}],["getspell(url",{"_index":987,"title":{},"body":{"injectables/SpellsService.html":{}}}],["getting",{"_index":1146,"title":{"index.html":{}},"body":{}}],["give",{"_index":1000,"title":{},"body":{"injectables/SpellsService.html":{}}}],["given",{"_index":992,"title":{},"body":{"injectables/SpellsService.html":{}}}],["gotten",{"_index":1155,"title":{},"body":{"index.html":{}}}],["group",{"_index":584,"title":{},"body":{"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/SkillCheckComponent.html":{}}}],["groupname",{"_index":585,"title":{},"body":{"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{}}}],["gu",{"_index":673,"title":{},"body":{"components/OverlayComponent.html":{}}}],["guam",{"_index":672,"title":{},"body":{"components/OverlayComponent.html":{}}}],["guide",{"_index":1031,"title":{},"body":{"components/StepperComponent.html":{}}}],["hampshire",{"_index":711,"title":{},"body":{"components/OverlayComponent.html":{}}}],["hardcodedautocomplete",{"_index":215,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["hasunitnumber",{"_index":618,"title":{},"body":{"components/OverlayComponent.html":{}}}],["hawaii",{"_index":674,"title":{},"body":{"components/OverlayComponent.html":{}}}],["here",{"_index":1032,"title":{},"body":{"components/StepperComponent.html":{}}}],["hi",{"_index":675,"title":{},"body":{"components/OverlayComponent.html":{}}}],["higher",{"_index":476,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{}}}],["hold",{"_index":466,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["holds",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceSetI.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["home",{"_index":11,"title":{},"body":{"components/AppComponent.html":{}}}],["html",{"_index":86,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["http",{"_index":959,"title":{},"body":{"injectables/SpellsService.html":{}}}],["httpclient",{"_index":973,"title":{},"body":{"injectables/SpellsService.html":{}}}],["https://anydice.com",{"_index":1167,"title":{},"body":{"index.html":{}}}],["https://jsonplaceholder.typicode.com",{"_index":965,"title":{},"body":{"injectables/SpellsService.html":{}}}],["https://transform.tools/json",{"_index":948,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["https://v5.material.angular.io/guide/creating",{"_index":1028,"title":{},"body":{"components/StepperComponent.html":{}}}],["https://virtualdiceroller.app",{"_index":1168,"title":{},"body":{"index.html":{}}}],["https://www.dnd5eapi.co/api",{"_index":963,"title":{},"body":{"injectables/SpellsService.html":{}}}],["https://www.dnd5eapi.co/api/spells",{"_index":950,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["https://www.youtube.com/watch?v=xtcjqawij2c&list=plw5h0dij",{"_index":1038,"title":{},"body":{"components/StepperComponent.html":{}}}],["ia",{"_index":682,"title":{},"body":{"components/OverlayComponent.html":{}}}],["icons",{"_index":904,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["id",{"_index":677,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["idaho",{"_index":676,"title":{},"body":{"components/OverlayComponent.html":{}}}],["identifier",{"_index":1083,"title":{},"body":{"coverage.html":{}}}],["if(minelement",{"_index":325,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["if(spell.level",{"_index":265,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["if(spelllevel",{"_index":1020,"title":{},"body":{"injectables/SpellsService.html":{}}}],["if(successelement",{"_index":874,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["if(tableinput",{"_index":312,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["if(targetdcelement",{"_index":878,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["il",{"_index":679,"title":{},"body":{"components/OverlayComponent.html":{}}}],["illinois",{"_index":678,"title":{},"body":{"components/OverlayComponent.html":{}}}],["implement",{"_index":498,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["implementation",{"_index":496,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["implements",{"_index":126,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"components/StepperComponent.html":{}}}],["import",{"_index":59,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["imports",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["impossible",{"_index":888,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["increment",{"_index":1051,"title":{},"body":{"components/StepperComponent.html":{}}}],["index",{"_index":46,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["indiana",{"_index":680,"title":{},"body":{"components/OverlayComponent.html":{}}}],["individual",{"_index":953,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["information",{"_index":202,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["initialize",{"_index":158,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["initializeapp({\"projectid\":\"test",{"_index":1179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":236,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["inject(breakpointobserver",{"_index":593,"title":{},"body":{"components/NavbarComponent.html":{}}}],["inject(controlcontainer",{"_index":393,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["inject(dicecalculationsservice",{"_index":224,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{}}}],["inject(formbuilder",{"_index":639,"title":{},"body":{"components/OverlayComponent.html":{}}}],["inject(spellsservice",{"_index":230,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["injectable",{"_index":955,"title":{"injectables/SpellsService.html":{}},"body":{"injectables/SpellsService.html":{},"coverage.html":{}}}],["injectables",{"_index":956,"title":{},"body":{"injectables/SpellsService.html":{},"overview.html":{}}}],["injection",{"_index":975,"title":{},"body":{"injectables/SpellsService.html":{}}}],["input",{"_index":437,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"index.html":{}}}],["input({required",{"_index":439,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["inputs",{"_index":398,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{}}}],["inputted",{"_index":999,"title":{},"body":{"injectables/SpellsService.html":{}}}],["intelligence",{"_index":363,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["interface",{"_index":356,"title":{"interfaces/CharacterStats.html":{},"interfaces/DiceResults.html":{},"interfaces/DiceSetI.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}},"body":{"interfaces/CharacterStats.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"coverage.html":{}}}],["interfaces",{"_index":358,"title":{},"body":{"interfaces/CharacterStats.html":{},"interfaces/DiceResults.html":{},"interfaces/DiceSetI.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"overview.html":{}}}],["iowa",{"_index":681,"title":{},"body":{"components/OverlayComponent.html":{}}}],["isadvantagenone",{"_index":812,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["isadvantagenone(currentadvantagevalue",{"_index":818,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["isdisabled",{"_index":1071,"title":{},"body":{"components/StepperComponent.html":{}}}],["ishandset",{"_index":592,"title":{},"body":{"components/NavbarComponent.html":{}}}],["island",{"_index":740,"title":{},"body":{"components/OverlayComponent.html":{}}}],["islands",{"_index":691,"title":{},"body":{"components/OverlayComponent.html":{}}}],["item",{"_index":903,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["iterable",{"_index":489,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["iterator",{"_index":499,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["jersey",{"_index":713,"title":{},"body":{"components/OverlayComponent.html":{}}}],["json",{"_index":1131,"title":{},"body":{"dependencies.html":{}}}],["json.parse",{"_index":845,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["json.stringify(this.attackrollsform.value))['diebonuses",{"_index":316,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["json.stringify(this.skillcheckform.value))['diebonuses",{"_index":846,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["kansas",{"_index":683,"title":{},"body":{"components/OverlayComponent.html":{}}}],["kentucky",{"_index":685,"title":{},"body":{"components/OverlayComponent.html":{}}}],["key",{"_index":939,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["keys",{"_index":502,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["ks",{"_index":684,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ky",{"_index":686,"title":{},"body":{"components/OverlayComponent.html":{}}}],["la",{"_index":688,"title":{},"body":{"components/OverlayComponent.html":{}}}],["label",{"_index":400,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{}}}],["last",{"_index":773,"title":{},"body":{"components/OverlayComponent.html":{}}}],["lastname",{"_index":627,"title":{},"body":{"components/OverlayComponent.html":{}}}],["legend",{"_index":85,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["level",{"_index":169,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/CharacterStats.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"miscellaneous/variables.html":{}}}],["level=1",{"_index":933,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["levelnum",{"_index":283,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["likelihood",{"_index":1158,"title":{},"body":{"index.html":{}}}],["line",{"_index":848,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["link",{"_index":118,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"index.html":{}}}],["linked",{"_index":117,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["links",{"_index":16,"title":{},"body":{"components/AppComponent.html":{}}}],["list",{"_index":961,"title":{},"body":{"injectables/SpellsService.html":{}}}],["literal",{"_index":924,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{}}}],["looks",{"_index":561,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["louisiana",{"_index":687,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ma",{"_index":696,"title":{},"body":{"components/OverlayComponent.html":{}}}],["made",{"_index":905,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["main",{"_index":966,"title":{},"body":{"injectables/SpellsService.html":{}}}],["maine",{"_index":689,"title":{},"body":{"components/OverlayComponent.html":{}}}],["make",{"_index":1036,"title":{},"body":{"components/StepperComponent.html":{}}}],["makes",{"_index":977,"title":{},"body":{"injectables/SpellsService.html":{}}}],["making",{"_index":990,"title":{},"body":{"injectables/SpellsService.html":{}}}],["many",{"_index":537,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["map",{"_index":241,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"injectables/SpellsService.html":{}}}],["map(result",{"_index":597,"title":{},"body":{"components/NavbarComponent.html":{}}}],["map(spellgroup",{"_index":303,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["mariana",{"_index":725,"title":{},"body":{"components/OverlayComponent.html":{}}}],["marshall",{"_index":690,"title":{},"body":{"components/OverlayComponent.html":{}}}],["maryland",{"_index":693,"title":{},"body":{"components/OverlayComponent.html":{}}}],["massachusetts",{"_index":695,"title":{},"body":{"components/OverlayComponent.html":{}}}],["matautocompletemodule",{"_index":131,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["matbuttonmodule",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["matbuttontogglemodule",{"_index":800,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["matcardmodule",{"_index":132,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["matching",{"_index":114,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":553,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["matformfieldmodule",{"_index":1047,"title":{},"body":{"components/StepperComponent.html":{}}}],["maticonmodule",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{},"components/StepperComponent.html":{}}}],["matinputmodule",{"_index":128,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["matlistmodule",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["matradiomodule",{"_index":613,"title":{},"body":{"components/OverlayComponent.html":{}}}],["matselectmodule",{"_index":130,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["matsidenavmodule",{"_index":37,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["mattablemodule",{"_index":564,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["mattoolbarmodule",{"_index":38,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["max",{"_index":324,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["maxelement",{"_index":323,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["maxelement.innertext",{"_index":328,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["md",{"_index":694,"title":{},"body":{"components/OverlayComponent.html":{}}}],["menu",{"_index":79,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["metadata",{"_index":22,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["methods",{"_index":146,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["mexico",{"_index":715,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mh",{"_index":692,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mi",{"_index":698,"title":{},"body":{"components/OverlayComponent.html":{}}}],["michigan",{"_index":697,"title":{},"body":{"components/OverlayComponent.html":{}}}],["micronesia",{"_index":666,"title":{},"body":{"components/OverlayComponent.html":{}}}],["min",{"_index":322,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["mind",{"_index":1035,"title":{},"body":{"components/StepperComponent.html":{}}}],["minelement",{"_index":320,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["minelement.innertext",{"_index":326,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["minlevel",{"_index":270,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["minnesota",{"_index":699,"title":{},"body":{"components/OverlayComponent.html":{}}}],["miscellaneous",{"_index":1138,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mississippi",{"_index":701,"title":{},"body":{"components/OverlayComponent.html":{}}}],["missouri",{"_index":703,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mn",{"_index":700,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mo",{"_index":704,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mockspellresponse",{"_index":1114,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockspellresult0",{"_index":1115,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockspellresult1",{"_index":1116,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["modified",{"_index":1161,"title":{},"body":{"index.html":{}}}],["modifier",{"_index":459,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["modifier=0",{"_index":1010,"title":{},"body":{"injectables/SpellsService.html":{}}}],["modules",{"_index":1169,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monk",{"_index":374,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["montana",{"_index":705,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mp",{"_index":726,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ms",{"_index":702,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mt",{"_index":706,"title":{},"body":{"components/OverlayComponent.html":{}}}],["multi",{"_index":1045,"title":{},"body":{"components/StepperComponent.html":{}}}],["nadiinko",{"_index":910,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["name",{"_index":91,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":184,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["natural",{"_index":890,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["navbar",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{}}}],["navbar'},{'name",{"_index":105,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["navbar.component.html",{"_index":589,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbar.component.scss",{"_index":590,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbar/navbar.component",{"_index":65,"title":{},"body":{"components/AppComponent.html":{}}}],["navbarcomponent",{"_index":30,"title":{"components/NavbarComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["nbsp",{"_index":581,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["nbsp;d4",{"_index":461,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["nbsp;d6",{"_index":462,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["nbsp;d8",{"_index":463,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["nc",{"_index":721,"title":{},"body":{"components/OverlayComponent.html":{}}}],["nd",{"_index":723,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ne",{"_index":708,"title":{},"body":{"components/OverlayComponent.html":{}}}],["nebraska",{"_index":707,"title":{},"body":{"components/OverlayComponent.html":{}}}],["necessary",{"_index":932,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["needs",{"_index":998,"title":{},"body":{"injectables/SpellsService.html":{}}}],["nevada",{"_index":709,"title":{},"body":{"components/OverlayComponent.html":{}}}],["new",{"_index":209,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"coverage.html":{}}}],["newvalue",{"_index":1074,"title":{},"body":{"components/StepperComponent.html":{}}}],["next",{"_index":517,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/OverlayComponent.html":{}}}],["ng_value_accessor",{"_index":1042,"title":{},"body":{"components/StepperComponent.html":{}}}],["ngondestroy",{"_index":397,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["ngoninit",{"_index":153,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{}}}],["nh",{"_index":712,"title":{},"body":{"components/OverlayComponent.html":{}}}],["nj",{"_index":714,"title":{},"body":{"components/OverlayComponent.html":{}}}],["nm",{"_index":716,"title":{},"body":{"components/OverlayComponent.html":{}}}],["none",{"_index":831,"title":{},"body":{"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{}}}],["north",{"_index":719,"title":{},"body":{"components/OverlayComponent.html":{}}}],["northern",{"_index":724,"title":{},"body":{"components/OverlayComponent.html":{}}}],["note",{"_index":886,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["notfoundcomponent",{"_index":106,"title":{"components/NotFoundComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["npmcli/package",{"_index":1130,"title":{},"body":{"dependencies.html":{}}}],["null",{"_index":624,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["num",{"_index":572,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["number",{"_index":217,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["numresults",{"_index":470,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["nv",{"_index":710,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ny",{"_index":718,"title":{},"body":{"components/OverlayComponent.html":{}}}],["object",{"_index":922,"title":{},"body":{"classes/Spell.html":{}}}],["observable",{"_index":159,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"injectables/SpellsService.html":{}}}],["oh",{"_index":728,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ohio",{"_index":727,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ok",{"_index":730,"title":{},"body":{"components/OverlayComponent.html":{}}}],["oklahoma",{"_index":729,"title":{},"body":{"components/OverlayComponent.html":{}}}],["once",{"_index":853,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["onchange",{"_index":1052,"title":{},"body":{"components/StepperComponent.html":{}}}],["onchange(value",{"_index":1061,"title":{},"body":{"components/StepperComponent.html":{}}}],["one",{"_index":1037,"title":{},"body":{"components/StepperComponent.html":{}}}],["oninit",{"_index":127,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["onsubmit",{"_index":620,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ontouch",{"_index":1053,"title":{},"body":{"components/StepperComponent.html":{}}}],["option",{"_index":898,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["option.id",{"_index":899,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["option.name",{"_index":901,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["option.value",{"_index":900,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["optional",{"_index":188,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["order",{"_index":996,"title":{},"body":{"injectables/SpellsService.html":{}}}],["oregon",{"_index":731,"title":{},"body":{"components/OverlayComponent.html":{}}}],["organize",{"_index":1154,"title":{},"body":{"index.html":{}}}],["organizes",{"_index":18,"title":{},"body":{"components/AppComponent.html":{},"components/DieRollResultsTableComponent.html":{}}}],["outlet",{"_index":20,"title":{},"body":{"components/AppComponent.html":{}}}],["overlay",{"_index":612,"title":{},"body":{"components/OverlayComponent.html":{}}}],["overlay'},{'name",{"_index":108,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["overlay.component.html",{"_index":614,"title":{},"body":{"components/OverlayComponent.html":{}}}],["overlay.component.scss",{"_index":615,"title":{},"body":{"components/OverlayComponent.html":{}}}],["overlay/overlay.component",{"_index":66,"title":{},"body":{"components/AppComponent.html":{}}}],["overlaycomponent",{"_index":36,"title":{"components/OverlayComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["overview",{"_index":1170,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["pa",{"_index":735,"title":{},"body":{"components/OverlayComponent.html":{}}}],["package",{"_index":1118,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"components/NotFoundComponent.html":{}}}],["pages",{"_index":17,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["paladin",{"_index":375,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["palau",{"_index":732,"title":{},"body":{"components/OverlayComponent.html":{}}}],["param",{"_index":289,"title":{},"body":{"components/AttackRollsComponent.html":{},"injectables/SpellsService.html":{}}}],["parameters",{"_index":187,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["parentcontainer",{"_index":396,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["parentformgroup",{"_index":402,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["parseint(key",{"_index":941,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["pennsylvania",{"_index":734,"title":{},"body":{"components/OverlayComponent.html":{}}}],["percent",{"_index":473,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["percentage",{"_index":485,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{}}}],["percentageresults",{"_index":471,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["percentages",{"_index":894,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["perfect",{"_index":909,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["pipe",{"_index":596,"title":{},"body":{"components/NavbarComponent.html":{}}}],["pipe(map((response",{"_index":1013,"title":{},"body":{"injectables/SpellsService.html":{}}}],["pixel",{"_index":908,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["possibility",{"_index":1143,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["possible",{"_index":483,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{}}}],["postalcode",{"_index":632,"title":{},"body":{"components/OverlayComponent.html":{}}}],["postalcode.value.length",{"_index":783,"title":{},"body":{"components/OverlayComponent.html":{}}}],["pr",{"_index":738,"title":{},"body":{"components/OverlayComponent.html":{}}}],["previous",{"_index":847,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["priority",{"_index":785,"title":{},"body":{"components/OverlayComponent.html":{}}}],["private",{"_index":135,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["proficiency",{"_index":364,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["properly",{"_index":997,"title":{},"body":{"injectables/SpellsService.html":{}}}],["properties",{"_index":47,"title":{"properties.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"properties.html":{}}}],["protected",{"_index":970,"title":{},"body":{"injectables/SpellsService.html":{}}}],["provide",{"_index":390,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/StepperComponent.html":{}}}],["provideanimationsasync",{"_index":1176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideauth",{"_index":1184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providedin",{"_index":1006,"title":{},"body":{"injectables/SpellsService.html":{}}}],["providefirebaseapp",{"_index":1178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providehttpclient",{"_index":1177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":1175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":1041,"title":{},"body":{"components/StepperComponent.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":441,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["puerto",{"_index":736,"title":{},"body":{"components/OverlayComponent.html":{}}}],["pw",{"_index":733,"title":{},"body":{"components/OverlayComponent.html":{}}}],["range:0",{"_index":341,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["ranger",{"_index":376,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["rawspelllist",{"_index":142,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["reactiveformsmodule",{"_index":129,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["read",{"_index":233,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["received",{"_index":318,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["recreated",{"_index":864,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["reference",{"_index":1166,"title":{},"body":{"index.html":{}}}],["regardless",{"_index":889,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["registeronchange",{"_index":1054,"title":{},"body":{"components/StepperComponent.html":{}}}],["registeronchange(fn",{"_index":1064,"title":{},"body":{"components/StepperComponent.html":{}}}],["registerontouched",{"_index":1055,"title":{},"body":{"components/StepperComponent.html":{}}}],["registerontouched(fn",{"_index":1067,"title":{},"body":{"components/StepperComponent.html":{}}}],["related",{"_index":1157,"title":{},"body":{"index.html":{}}}],["remove",{"_index":1081,"title":{},"body":{"components/StepperComponent.html":{}}}],["represents",{"_index":559,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["request",{"_index":991,"title":{},"body":{"injectables/SpellsService.html":{}}}],["required",{"_index":408,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{}}}],["response",{"_index":930,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["response.results",{"_index":294,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["response['damage']['damage_at_character_level']['1",{"_index":1022,"title":{},"body":{"injectables/SpellsService.html":{}}}],["response['damage']['damage_at_slot_level",{"_index":1024,"title":{},"body":{"injectables/SpellsService.html":{}}}],["response['heal_at_slot_level",{"_index":1026,"title":{},"body":{"injectables/SpellsService.html":{}}}],["response['level",{"_index":1018,"title":{},"body":{"injectables/SpellsService.html":{}}}],["response['name",{"_index":1016,"title":{},"body":{"injectables/SpellsService.html":{}}}],["response[key",{"_index":943,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["result",{"_index":556,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["result.matches",{"_index":598,"title":{},"body":{"components/NavbarComponent.html":{}}}],["resulted",{"_index":481,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["results",{"_index":103,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retstring",{"_index":945,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["return",{"_index":290,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["returned",{"_index":954,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["returns",{"_index":170,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["rhode",{"_index":739,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ri",{"_index":741,"title":{},"body":{"components/OverlayComponent.html":{}}}],["rico",{"_index":737,"title":{},"body":{"components/OverlayComponent.html":{}}}],["rogue",{"_index":377,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["roll",{"_index":102,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["rolled",{"_index":487,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["rolling",{"_index":475,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{}}}],["rollresult",{"_index":472,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["rolls",{"_index":83,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"index.html":{}}}],["rolls'},{'name",{"_index":93,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["rolls.component",{"_index":70,"title":{},"body":{"components/AppComponent.html":{}}}],["rolls.component.html",{"_index":133,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.scss",{"_index":134,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts",{"_index":116,"title":{},"body":{"components/AttackRollsComponent.html":{},"coverage.html":{},"index.html":{}}}],["rolls.component.ts:105",{"_index":200,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:131",{"_index":197,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:139",{"_index":192,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:146",{"_index":178,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:158",{"_index":156,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:162",{"_index":199,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:33",{"_index":231,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:34",{"_index":225,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:35",{"_index":227,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:36",{"_index":219,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:37",{"_index":229,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:38",{"_index":216,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:44",{"_index":226,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:45",{"_index":222,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:46",{"_index":235,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:47",{"_index":208,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:54",{"_index":157,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:79",{"_index":172,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:98",{"_index":181,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls/attack",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"coverage.html":{}}}],["root",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"injectables/SpellsService.html":{}}}],["root'},{'name",{"_index":92,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["rounded",{"_index":895,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["router",{"_index":19,"title":{},"body":{"components/AppComponent.html":{}}}],["routerlink",{"_index":32,"title":{},"body":{"components/AppComponent.html":{}}}],["routerlinkactive",{"_index":33,"title":{},"body":{"components/AppComponent.html":{}}}],["routermodule",{"_index":35,"title":{},"body":{"components/AppComponent.html":{}}}],["routeroutlet",{"_index":29,"title":{},"body":{"components/AppComponent.html":{}}}],["row",{"_index":555,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["rxjs",{"_index":244,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"injectables/SpellsService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":603,"title":{},"body":{"components/NavbarComponent.html":{}}}],["samoa",{"_index":649,"title":{},"body":{"components/OverlayComponent.html":{}}}],["savageattacker",{"_index":1145,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sc",{"_index":743,"title":{},"body":{"components/OverlayComponent.html":{}}}],["sd",{"_index":744,"title":{},"body":{"components/OverlayComponent.html":{}}}],["search",{"_index":121,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["searching",{"_index":993,"title":{},"body":{"injectables/SpellsService.html":{}}}],["selected",{"_index":165,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selectedspell",{"_index":143,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selectedvalue",{"_index":189,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selectedvalue.name",{"_index":291,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selectedvalue?.url",{"_index":262,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selectedvalueasstring",{"_index":260,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selector",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["separate",{"_index":994,"title":{},"body":{"injectables/SpellsService.html":{}}}],["service",{"_index":958,"title":{},"body":{"injectables/SpellsService.html":{}}}],["services",{"_index":1149,"title":{},"body":{"index.html":{}}}],["set",{"_index":204,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{}}}],["setd10(dicenum",{"_index":431,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["setd12(dicenum",{"_index":435,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["setd4(dicenum",{"_index":418,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["setd6(dicenum",{"_index":423,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["setd8(dicenum",{"_index":427,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["setdamagefromapi",{"_index":920,"title":{},"body":{"classes/Spell.html":{}}}],["setdamagefromapi(response",{"_index":928,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["setdisabledstate",{"_index":1056,"title":{},"body":{"components/StepperComponent.html":{}}}],["setdisabledstate(isdisabled",{"_index":1069,"title":{},"body":{"components/StepperComponent.html":{}}}],["setgroupedspelllist",{"_index":154,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["setting",{"_index":177,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["sharereplay",{"_index":599,"title":{},"body":{"components/NavbarComponent.html":{}}}],["sheet",{"_index":352,"title":{},"body":{"components/CharacterSheetComponent.html":{}}}],["sheet'},{'name",{"_index":96,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["sheet.component.html",{"_index":353,"title":{},"body":{"components/CharacterSheetComponent.html":{}}}],["sheet.component.scss",{"_index":354,"title":{},"body":{"components/CharacterSheetComponent.html":{}}}],["sheet.component.ts",{"_index":351,"title":{},"body":{"components/CharacterSheetComponent.html":{},"coverage.html":{}}}],["sheet/character",{"_index":350,"title":{},"body":{"components/CharacterSheetComponent.html":{},"coverage.html":{}}}],["shipping",{"_index":636,"title":{},"body":{"components/OverlayComponent.html":{}}}],["show",{"_index":185,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["shown",{"_index":21,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{}}}],["side",{"_index":14,"title":{},"body":{"components/AppComponent.html":{}}}],["sides",{"_index":1164,"title":{},"body":{"index.html":{}}}],["skill",{"_index":62,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["skillcheckcomponent",{"_index":34,"title":{"components/SkillCheckComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["skillcheckform",{"_index":810,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["skillchecksubmit",{"_index":813,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["skillchecksuccesschance",{"_index":865,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["skillchecksuccesschance).tostring",{"_index":877,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["skipself",{"_index":394,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["sorcerer",{"_index":378,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["south",{"_index":742,"title":{},"body":{"components/OverlayComponent.html":{}}}],["specific",{"_index":557,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"injectables/SpellsService.html":{}}}],["spell",{"_index":122,"title":{"classes/Spell.html":{}},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"coverage.html":{},"index.html":{}}}],["spell(spellname",{"_index":1019,"title":{},"body":{"injectables/SpellsService.html":{}}}],["spell.damage[minlevel].d10",{"_index":279,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.damage[minlevel].d12",{"_index":281,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.damage[minlevel].d4",{"_index":273,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.damage[minlevel].d6",{"_index":275,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.damage[minlevel].d8",{"_index":277,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.name",{"_index":347,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.name.tolowercase().startswith(spellstring",{"_index":306,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.setdamagefromapi",{"_index":1021,"title":{},"body":{"injectables/SpellsService.html":{}}}],["spell.ts",{"_index":1153,"title":{},"body":{"index.html":{}}}],["spellgroup",{"_index":346,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellgroup.map(spelllist",{"_index":304,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spelli",{"_index":228,"title":{"interfaces/SpellI.html":{}},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"coverage.html":{}}}],["spelllevel",{"_index":176,"title":{},"body":{"components/AttackRollsComponent.html":{},"injectables/SpellsService.html":{}}}],["spelllist.filter(spell",{"_index":305,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spelllist.length",{"_index":308,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellname",{"_index":1015,"title":{},"body":{"injectables/SpellsService.html":{}}}],["spellresponse",{"_index":245,"title":{"interfaces/SpellResponse.html":{}},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["spellresponse.results",{"_index":981,"title":{},"body":{"injectables/SpellsService.html":{}}}],["spellresponseresults",{"_index":180,"title":{"interfaces/SpellResponseResults.html":{}},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["spells",{"_index":962,"title":{},"body":{"injectables/SpellsService.html":{}}}],["spells.service",{"_index":239,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spells.service.ts",{"_index":1150,"title":{},"body":{"index.html":{}}}],["spellsearchinput",{"_index":299,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellsearchinput?.name",{"_index":300,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellsgroups",{"_index":292,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellslist",{"_index":971,"title":{},"body":{"injectables/SpellsService.html":{}}}],["spellsservice",{"_index":144,"title":{"injectables/SpellsService.html":{}},"body":{"components/AttackRollsComponent.html":{},"injectables/SpellsService.html":{},"coverage.html":{}}}],["spellstring",{"_index":298,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellstring?.tolowercase",{"_index":301,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["src/.../app.config.ts",{"_index":1172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../characterstats.ts",{"_index":1141,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../diceset.ts",{"_index":1140,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../mockspells.ts",{"_index":1173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app.component.ts",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:29",{"_index":58,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":1087,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/attack",{"_index":115,"title":{},"body":{"components/AttackRollsComponent.html":{},"coverage.html":{}}}],["src/app/character",{"_index":349,"title":{},"body":{"components/CharacterSheetComponent.html":{},"coverage.html":{}}}],["src/app/characterstats.ts",{"_index":359,"title":{},"body":{"interfaces/CharacterStats.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/app/dice",{"_index":381,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"coverage.html":{}}}],["src/app/diceset.ts",{"_index":464,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/app/diceset.ts:112",{"_index":535,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:41",{"_index":529,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:42",{"_index":530,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:43",{"_index":531,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:44",{"_index":526,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:45",{"_index":527,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:46",{"_index":528,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:47",{"_index":533,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:48",{"_index":534,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:49",{"_index":525,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:50",{"_index":524,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:51",{"_index":532,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:53",{"_index":536,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:70",{"_index":522,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/die",{"_index":548,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"coverage.html":{}}}],["src/app/dropdown.ts",{"_index":583,"title":{},"body":{"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"coverage.html":{}}}],["src/app/navbar/navbar.component.ts",{"_index":587,"title":{},"body":{"components/NavbarComponent.html":{},"coverage.html":{}}}],["src/app/navbar/navbar.component.ts:27",{"_index":594,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/navbar/navbar.component.ts:29",{"_index":600,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/not",{"_index":605,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["src/app/overlay/overlay.component.ts",{"_index":611,"title":{},"body":{"components/OverlayComponent.html":{},"coverage.html":{}}}],["src/app/overlay/overlay.component.ts:106",{"_index":621,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/overlay/overlay.component.ts:27",{"_index":640,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/overlay/overlay.component.ts:28",{"_index":638,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/overlay/overlay.component.ts:42",{"_index":642,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/overlay/overlay.component.ts:44",{"_index":765,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/skill",{"_index":793,"title":{},"body":{"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["src/app/spell.ts",{"_index":912,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"coverage.html":{}}}],["src/app/spell.ts:17",{"_index":926,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spell.ts:18",{"_index":927,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spell.ts:19",{"_index":925,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spell.ts:20",{"_index":923,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spell.ts:29",{"_index":929,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spell.ts:39",{"_index":931,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spells.service.ts",{"_index":957,"title":{},"body":{"injectables/SpellsService.html":{},"coverage.html":{}}}],["src/app/spells.service.ts:19",{"_index":1001,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:20",{"_index":1004,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:21",{"_index":1002,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:28",{"_index":976,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:39",{"_index":985,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:53",{"_index":988,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:82",{"_index":974,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/stepper/stepper.component.ts",{"_index":1027,"title":{},"body":{"components/StepperComponent.html":{},"coverage.html":{}}}],["src/app/stepper/stepper.component.ts:28",{"_index":1077,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:29",{"_index":1062,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:32",{"_index":1063,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:33",{"_index":1060,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:36",{"_index":1059,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:43",{"_index":1076,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:46",{"_index":1065,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:49",{"_index":1068,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:52",{"_index":1073,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:59",{"_index":1070,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/mocks/mockspells.ts",{"_index":1113,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["standalone",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["started",{"_index":1147,"title":{"index.html":{}},"body":{}}],["startwith",{"_index":242,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["state",{"_index":631,"title":{},"body":{"components/OverlayComponent.html":{}}}],["state.name",{"_index":781,"title":{},"body":{"components/OverlayComponent.html":{}}}],["statements",{"_index":1084,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":619,"title":{},"body":{"components/OverlayComponent.html":{}}}],["stepper",{"_index":111,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["stepper.component.html",{"_index":1048,"title":{},"body":{"components/StepperComponent.html":{}}}],["stepper.component.scss",{"_index":1049,"title":{},"body":{"components/StepperComponent.html":{}}}],["stepper.component.ts",{"_index":1160,"title":{},"body":{"index.html":{}}}],["stepper/stepper.component",{"_index":438,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["steppercomponent",{"_index":110,"title":{"components/StepperComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["store",{"_index":952,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["stored",{"_index":183,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["strength",{"_index":365,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["string",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["styleurl",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["submit",{"_index":787,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["subscribe",{"_index":264,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["subscribed",{"_index":982,"title":{},"body":{"injectables/SpellsService.html":{}}}],["succeed",{"_index":796,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["success",{"_index":892,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["successelement",{"_index":867,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["successelement.innerhtml",{"_index":876,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["suceeeding",{"_index":1159,"title":{},"body":{"index.html":{}}}],["suite",{"_index":778,"title":{},"body":{"components/OverlayComponent.html":{}}}],["supposed",{"_index":493,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["switchmap",{"_index":243,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["switchmap(spellsearchinput",{"_index":297,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["symbol.iterator",{"_index":509,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["table",{"_index":551,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"coverage.html":{}}}],["table'},{'name",{"_index":104,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["table.component",{"_index":254,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["table.component.html",{"_index":565,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["table.component.scss",{"_index":566,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["table.component.ts",{"_index":549,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"coverage.html":{}}}],["table.component.ts:24",{"_index":571,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["table.component.ts:25",{"_index":570,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["table.component.ts:29",{"_index":574,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["table/die",{"_index":253,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["tableinput",{"_index":198,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["tableref",{"_index":136,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1117,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":492,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["targetdc",{"_index":837,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["targetdcelement",{"_index":869,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["targetdcelement.innerhtml",{"_index":879,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["templateurl",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["tennessee",{"_index":745,"title":{},"body":{"components/OverlayComponent.html":{}}}],["test",{"_index":964,"title":{},"body":{"injectables/SpellsService.html":{}}}],["testautocomplete",{"_index":214,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["texas",{"_index":747,"title":{},"body":{"components/OverlayComponent.html":{}}}],["this.#tableref",{"_index":310,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["this.#tableref?.setinput('diceresults",{"_index":313,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["this.addobservabletoautocomplete",{"_index":335,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.addobservabletoleveldropdown",{"_index":336,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.attackrollsform.get('spell')!.valuechanges.pipe",{"_index":296,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.attackrollsform.get('spell')!.valuechanges.subscribe",{"_index":258,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.attackrollsform.get('spelllevel')!.valuechanges.subscribe",{"_index":282,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.attackrollsform.valuechanges.subscribe(value",{"_index":339,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.breakpointobserver.observe(breakpoints.handset",{"_index":595,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this.createtablecomponent",{"_index":882,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.createtablecomponent(dicerollresults",{"_index":881,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.currentspellrange",{"_index":267,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.currentspellrange[0",{"_index":271,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.d10",{"_index":514,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.d12",{"_index":515,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.d20",{"_index":516,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.d4",{"_index":511,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.d6",{"_index":512,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.d8",{"_index":513,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.damage",{"_index":938,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.damage[1",{"_index":944,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.damage[key]}\\n",{"_index":947,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.damage[parseint(key",{"_index":942,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.dicebonuscomponent.d10",{"_index":278,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicebonuscomponent.d12",{"_index":280,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicebonuscomponent.d4",{"_index":272,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicebonuscomponent.d6",{"_index":274,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicebonuscomponent.d8",{"_index":276,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicecalcservice.dicecalcresults(diceset",{"_index":331,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["this.dicecalcservice.maxroll(diceset).tostring",{"_index":329,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicecalcservice.minroll(diceset).tostring",{"_index":327,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicecalcservice.skillcheckcalc(diceset",{"_index":866,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.dicecalculations.defaultd20rollresults",{"_index":569,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["this.fb.group",{"_index":622,"title":{},"body":{"components/OverlayComponent.html":{}}}],["this.filteredgroupspelllist",{"_index":295,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.generatediceset",{"_index":319,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["this.generatetable(dicecalcresults",{"_index":332,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.generatetable(undefined",{"_index":338,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.http",{"_index":1011,"title":{},"body":{"injectables/SpellsService.html":{}}}],["this.http.get",{"_index":1007,"title":{},"body":{"injectables/SpellsService.html":{}}}],["this.keys",{"_index":510,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.level",{"_index":937,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.name",{"_index":935,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.parentcontainer.control",{"_index":440,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.addcontrol(this.controlkey",{"_index":457,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d10",{"_index":451,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d10')?.setvalue(dicenum",{"_index":453,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d12",{"_index":454,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d12')?.setvalue(dicenum",{"_index":456,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d4",{"_index":442,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d4')?.setvalue(dicenum",{"_index":444,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d6",{"_index":445,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d6')?.setvalue(dicenum",{"_index":447,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d8",{"_index":448,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d8')?.setvalue(dicenum",{"_index":450,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.removecontrol(this.controlkey",{"_index":460,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.rawspelllist",{"_index":333,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell",{"_index":269,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell?.damage[levelnum].d10",{"_index":287,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell?.damage[levelnum].d12",{"_index":288,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell?.damage[levelnum].d4",{"_index":284,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell?.damage[levelnum].d6",{"_index":285,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell?.damage[levelnum].d8",{"_index":286,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.setgroupedspelllist",{"_index":337,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.skillcheckform.value",{"_index":873,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.skillcheckform.value.advantage",{"_index":858,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.skillcheckform.value.attempts",{"_index":860,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.skillcheckform.value.targetdc",{"_index":856,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.skillcheckform.valuechanges.subscribe",{"_index":883,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.skillchecksubmit",{"_index":884,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.spellsservice.getallspells",{"_index":334,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.spellsservice.getspell(selectedvalueasstring",{"_index":263,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.updatevalue(this.value",{"_index":1080,"title":{},"body":{"components/StepperComponent.html":{}}}],["this.url",{"_index":936,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.url.href}/spells?level=${level",{"_index":1009,"title":{},"body":{"injectables/SpellsService.html":{}}}],["this.url.href}/spells?level=0&level=1&level=2&level=3&level=4&level=5&level=6",{"_index":1008,"title":{},"body":{"injectables/SpellsService.html":{}}}],["this.url.origin}${url",{"_index":1012,"title":{},"body":{"injectables/SpellsService.html":{}}}],["this.url}\\n",{"_index":946,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.value",{"_index":1079,"title":{},"body":{"components/StepperComponent.html":{}}}],["this.vcr()?.clear",{"_index":309,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["this.vcr()?.createcomponent(dierollresultstablecomponent",{"_index":311,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["times",{"_index":478,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["title",{"_index":48,"title":{},"body":{"components/AppComponent.html":{}}}],["tn",{"_index":746,"title":{},"body":{"components/OverlayComponent.html":{}}}],["together",{"_index":480,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["toggle",{"_index":844,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["tostring",{"_index":519,"title":{},"body":{"classes/DiceSet.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["total",{"_index":482,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["track",{"_index":344,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["true",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["try",{"_index":1023,"title":{},"body":{"injectables/SpellsService.html":{}}}],["tslib",{"_index":1134,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":896,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["tx",{"_index":748,"title":{},"body":{"components/OverlayComponent.html":{}}}],["type",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type=\"number",{"_index":1162,"title":{},"body":{"index.html":{}}}],["typeof",{"_index":261,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["types",{"_index":1152,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":949,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["ui",{"_index":554,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["undefined",{"_index":196,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["undefined=undefined",{"_index":862,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["unit",{"_index":779,"title":{},"body":{"components/OverlayComponent.html":{}}}],["unknown",{"_index":1017,"title":{},"body":{"injectables/SpellsService.html":{}}}],["up",{"_index":186,"title":{},"body":{"components/AttackRollsComponent.html":{},"injectables/SpellsService.html":{}}}],["update",{"_index":174,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["updatevalue",{"_index":1057,"title":{},"body":{"components/StepperComponent.html":{}}}],["updatevalue(newvalue",{"_index":1072,"title":{},"body":{"components/StepperComponent.html":{}}}],["url",{"_index":919,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"miscellaneous/variables.html":{}}}],["url('https://www.dnd5eapi.co/api",{"_index":1003,"title":{},"body":{"injectables/SpellsService.html":{}}}],["use",{"_index":166,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["used",{"_index":206,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["useexisting",{"_index":1043,"title":{},"body":{"components/StepperComponent.html":{}}}],["usefactory",{"_index":392,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["user",{"_index":120,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{}}}],["using",{"_index":552,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["ut",{"_index":750,"title":{},"body":{"components/OverlayComponent.html":{}}}],["utah",{"_index":749,"title":{},"body":{"components/OverlayComponent.html":{}}}],["va",{"_index":756,"title":{},"body":{"components/OverlayComponent.html":{}}}],["validators",{"_index":767,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["validators.compose",{"_index":633,"title":{},"body":{"components/OverlayComponent.html":{}}}],["validators.maxlength(5",{"_index":635,"title":{},"body":{"components/OverlayComponent.html":{}}}],["validators.min(0",{"_index":838,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["validators.min(1",{"_index":841,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["validators.minlength(5",{"_index":634,"title":{},"body":{"components/OverlayComponent.html":{}}}],["validators.required",{"_index":626,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["value",{"_index":53,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":163,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["var",{"_index":89,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["variable",{"_index":205,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"coverage.html":{}}}],["variables",{"_index":497,"title":{"miscellaneous/variables.html":{}},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"miscellaneous/variables.html":{}}}],["vcr",{"_index":145,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["vermont",{"_index":751,"title":{},"body":{"components/OverlayComponent.html":{}}}],["version",{"_index":913,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"properties.html":{}}}],["vi",{"_index":754,"title":{},"body":{"components/OverlayComponent.html":{}}}],["viewchild",{"_index":237,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["viewchild('dieform",{"_index":221,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["viewchild('tablecontainer",{"_index":232,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["viewchildren",{"_index":238,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["viewcontainerref",{"_index":234,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["viewproviders",{"_index":389,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["virgin",{"_index":753,"title":{},"body":{"components/OverlayComponent.html":{}}}],["virginia",{"_index":755,"title":{},"body":{"components/OverlayComponent.html":{}}}],["visually",{"_index":560,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["void",{"_index":171,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"components/StepperComponent.html":{}}}],["vt",{"_index":752,"title":{},"body":{"components/OverlayComponent.html":{}}}],["wa",{"_index":758,"title":{},"body":{"components/OverlayComponent.html":{}}}],["want",{"_index":1034,"title":{},"body":{"components/StepperComponent.html":{}}}],["warlock",{"_index":379,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["washington",{"_index":757,"title":{},"body":{"components/OverlayComponent.html":{}}}],["websites",{"_index":1165,"title":{},"body":{"index.html":{}}}],["west",{"_index":759,"title":{},"body":{"components/OverlayComponent.html":{}}}],["whether",{"_index":1142,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["wi",{"_index":762,"title":{},"body":{"components/OverlayComponent.html":{}}}],["wisconsin",{"_index":761,"title":{},"body":{"components/OverlayComponent.html":{}}}],["wisdom",{"_index":366,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["wizard",{"_index":380,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["works",{"_index":355,"title":{},"body":{"components/CharacterSheetComponent.html":{}}}],["writevalue",{"_index":1058,"title":{},"body":{"components/StepperComponent.html":{}}}],["writevalue(value",{"_index":1075,"title":{},"body":{"components/StepperComponent.html":{}}}],["wv",{"_index":760,"title":{},"body":{"components/OverlayComponent.html":{}}}],["www.flaticon.com",{"_index":907,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["wy",{"_index":764,"title":{},"body":{"components/OverlayComponent.html":{}}}],["wyoming",{"_index":763,"title":{},"body":{"components/OverlayComponent.html":{}}}],["yes",{"_index":523,"title":{},"body":{"classes/DiceSet.html":{}}}],["york",{"_index":717,"title":{},"body":{"components/OverlayComponent.html":{}}}],["zone.js",{"_index":1136,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n    \n        Description\n    \n    \n        Home page component -- holds side navbar with links to components of other pages, and organizes router-outlet where the other components are shown\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                                NavbarComponent\n                            CommonModule\n                            RouterLink\n                            RouterLinkActive\n                                SkillCheckComponent\n                            RouterModule\n                                OverlayComponent\n                            MatSidenavModule\n                            MatToolbarModule\n                            MatButtonModule\n                            MatIconModule\n                            MatListModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'angular-bg3-cheats'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { RouterLink, RouterLinkActive, RouterModule, RouterOutlet } from '@angular/router';\nimport { SkillCheckComponent } from \"./skill-check/skill-check.component\";\nimport { NavbarComponent } from \"./navbar/navbar.component\";\nimport { OverlayComponent } from './overlay/overlay.component';\nimport { AttackRollsComponent } from './attack-rolls/attack-rolls.component';\nimport { CommonModule } from '@angular/common';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\n\n/**\n * Home page component -- holds side navbar with links to components of other pages, and organizes router-outlet where the other components are shown\n */\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [\n    RouterOutlet, NavbarComponent, CommonModule, RouterLink, RouterLinkActive,\n    SkillCheckComponent, RouterModule, OverlayComponent, MatSidenavModule,\n    MatToolbarModule, MatButtonModule, MatIconModule, MatListModule\n  ],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss'\n})\nexport class AppComponent {\n  title = 'angular-bg3-cheats';\n}\n\n    \n\n    \n         -->\n -->\n\n  \n    menu\n  \n  Dice Calculator\n\n\n  \n    \n      \n        Skill Check\n      \n      \n        Attack Rolls\n      \n      \n        Documentation\n      \n    \n  \n  \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ' --> -->      menu    Dice Calculator                    Skill Check                    Attack Rolls                    Documentation                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AttackRollsComponent.html":{"url":"components/AttackRollsComponent.html","title":"component - AttackRollsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AttackRollsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/attack-rolls/attack-rolls.component.ts\n\n\n\n    \n        Description\n    \n    \n        This is the component linked to with attack-rolls link in the navbar\nIt allows the user to search a spell and calculate the amount of damage that the spell can do\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-attack-rolls\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            MatInputModule\n                            ReactiveFormsModule\n                            MatSelectModule\n                            MatAutocompleteModule\n                            MatCardModule\n                                DiceBonusFormComponent\n                            MatButtonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./attack-rolls.component.html\n            \n\n\n\n            \n                styleUrl\n                ./attack-rolls.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                #tableRef\n                            \n                            \n                                attackRollsForm\n                            \n                            \n                                currentSpellRange\n                            \n                            \n                                    \n                                diceBonusComponent\n                            \n                            \n                                diceCalcService\n                            \n                            \n                                filteredGroupSpellList\n                            \n                            \n                                rawSpellList$\n                            \n                            \n                                selectedSpell\n                            \n                            \n                                spellsService\n                            \n                            \n                                vcr\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addObservableToAutocomplete\n                            \n                            \n                                addObservableToLevelDropdown\n                            \n                            \n                                attackRollsFormSubmit\n                            \n                            \n                                displaySpellAutocompleteValue\n                            \n                            \n                                generateDiceSet\n                            \n                            \n                                generateTable\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                setGroupedSpellList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:158\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addObservableToAutocomplete\n                        \n                    \n                \n            \n            \n                \naddObservableToAutocomplete()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:54\n                        \n                    \n\n\n            \n                \n                        initialize observable to autocomplete to change form values based on selected spell\n\nuse spell value to change currentSpellRange array (this changes values shown in level selector)\nuse spell value to change diceBonusComponent dice values\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addObservableToLevelDropdown\n                        \n                    \n                \n            \n            \n                \naddObservableToLevelDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:79\n                        \n                    \n\n\n            \n                \n                        The level dropdown observable will update the value of the dicerolls based on the spellLevel setting\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attackRollsFormSubmit\n                        \n                    \n                \n            \n            \n                \nattackRollsFormSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:146\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        displaySpellAutocompleteValue\n                        \n                    \n                \n            \n            \n                \ndisplaySpellAutocompleteValue(selectedValue: SpellResponseResults)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Converts the SpellResponseResults type that the autocomplete values\nare stored as into the spell names that they show up as\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selectedValue\n                                            \n                                                            SpellResponseResults\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    current selected spell value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                spell name or empty string\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateDiceSet\n                        \n                    \n                \n            \n            \n                \ngenerateDiceSet()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:139\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         DiceSetI\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateTable\n                        \n                    \n                \n            \n            \n                \ngenerateTable(tableInput: DiceResults[] | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tableInput\n                                            \n                                                            DiceResults[] | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:162\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setGroupedSpellList\n                        \n                    \n                \n            \n            \n                \nsetGroupedSpellList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:105\n                        \n                    \n\n\n            \n                \n                        Gets spell information from API to set filteredGroupSpellList variable that is used in spell autocomplete\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        #tableRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attackRollsForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    spell: new FormControl(''),\n    spellLevel: new FormControl(this.selectedSpell?.level || 1),\n    testAutocomplete: new FormControl(''),\n    hardCodedAutocomplete: new FormControl('')\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentSpellRange\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Default value : new Array(6)\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        diceBonusComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DiceBonusFormComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('dieForm')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        diceCalcService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DiceCalculationsService\n\n                    \n                \n                \n                    \n                        Default value : inject(DiceCalculationsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filteredGroupSpellList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rawSpellList$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedSpell\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellI | undefined\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        spellsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellsService\n\n                    \n                \n                \n                    \n                        Default value : inject(SpellsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        vcr\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('tableContainer', {read: ViewContainerRef})\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, ComponentRef, inject, OnInit, ViewChild, viewChild, viewChildren, ViewContainerRef } from '@angular/core';\nimport { SpellsService } from '../spells.service';\nimport { forkJoin, map, Observable, startWith, switchMap } from 'rxjs';\nimport { Spell, SpellI, SpellResponse, SpellResponseResults } from '../spell';\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { DiceBonusFormComponent } from '../dice-bonus-form/dice-bonus-form.component';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { DieRollResultsTableComponent } from '../die-roll-results-table/die-roll-results-table.component';\nimport { DiceResults, DiceSet, DiceSetI } from '../diceset';\nimport { DiceCalculationsService } from '../dice-calculations.service';\n\n/**\n * This is the component linked to with attack-rolls link in the navbar\n * It allows the user to search a spell and calculate the amount of damage that the spell can do\n */\n@Component({\n  selector: 'app-attack-rolls',\n  standalone: true,\n  imports: [\n    CommonModule, MatInputModule, ReactiveFormsModule,\n    MatSelectModule, MatAutocompleteModule, MatCardModule,\n    DiceBonusFormComponent, MatButtonModule\n],\n  templateUrl: './attack-rolls.component.html',\n  styleUrl: './attack-rolls.component.scss'\n})\nexport class AttackRollsComponent implements OnInit{\n  spellsService: SpellsService = inject(SpellsService);\n  diceCalcService: DiceCalculationsService = inject(DiceCalculationsService);\n  rawSpellList$!: Observable;\n  currentSpellRange: number[] = new Array(6);\n  selectedSpell: SpellI | undefined = undefined;\n  attackRollsForm = new FormGroup({\n    spell: new FormControl(''),\n    spellLevel: new FormControl(this.selectedSpell?.level || 1),\n    testAutocomplete: new FormControl(''),\n    hardCodedAutocomplete: new FormControl('')\n  });\n  filteredGroupSpellList!: Observable;\n  @ViewChild('dieForm') diceBonusComponent!: DiceBonusFormComponent;\n  vcr = viewChild('tableContainer', {read: ViewContainerRef});\n  #tableRef!: ComponentRef | undefined;\n\n  /**\n   * initialize observable to autocomplete to change form values based on selected spell\n   * 1. use spell value to change currentSpellRange array (this changes values shown in level selector)\n   * 2. use spell value to change diceBonusComponent dice values\n   */\n  addObservableToAutocomplete() {\n    this.attackRollsForm.get('spell')!.valueChanges.subscribe(\n      (selectedValue) => {\n        const selectedValueAsString = typeof selectedValue === 'string' ? '' : selectedValue?.url;\n        this.spellsService.getSpell(selectedValueAsString || '').subscribe(\n          (spell) => {\n            if(spell.level == 0) this.currentSpellRange = [0];\n            else this.currentSpellRange = [...Array(7).keys()].slice(spell.level);\n            this.selectedSpell = spell;\n\n            let minLevel = this.currentSpellRange[0];\n            this.diceBonusComponent.d4 = spell.damage[minLevel].d4 || 0;\n            this.diceBonusComponent.d6 = spell.damage[minLevel].d6 || 0;\n            this.diceBonusComponent.d8 = spell.damage[minLevel].d8 || 0;\n            this.diceBonusComponent.d10 = spell.damage[minLevel].d10 || 0;\n            this.diceBonusComponent.d12 = spell.damage[minLevel].d12 || 0;\n          }\n        )\n      }\n    )\n  }\n\n  /**\n   * The level dropdown observable will update the value of the dicerolls based on the spellLevel setting\n   */\n  addObservableToLevelDropdown() {\n    this.attackRollsForm.get('spellLevel')!.valueChanges.subscribe(\n      (levelNum) => {\n        levelNum = levelNum ?? this.currentSpellRange[0];\n        this.diceBonusComponent.d4 = this.selectedSpell?.damage[levelNum].d4 || 0;\n        this.diceBonusComponent.d6 = this.selectedSpell?.damage[levelNum].d6 || 0;\n        this.diceBonusComponent.d8 = this.selectedSpell?.damage[levelNum].d8 || 0;\n        this.diceBonusComponent.d10 = this.selectedSpell?.damage[levelNum].d10 || 0;\n        this.diceBonusComponent.d12 = this.selectedSpell?.damage[levelNum].d12 || 0;\n      }\n    )\n  }\n\n  /**\n   * Converts the SpellResponseResults type that the autocomplete values\n   * are stored as into the spell names that they show up as\n   * @param selectedValue current selected spell value\n   * @returns spell name or empty string\n   */\n  displaySpellAutocompleteValue(selectedValue: SpellResponseResults): string {\n    return selectedValue && selectedValue.name ? selectedValue.name : '';\n  }\n\n  /**\n   * Gets spell information from API to set filteredGroupSpellList variable that is used in spell autocomplete\n   */\n  setGroupedSpellList() {\n    let spellsGroups: Observable[] = [];\n    for(let i = 0; i  response.results)\n      ))\n    }\n    this.filteredGroupSpellList = this.attackRollsForm.get('spell')!.valueChanges.pipe(\n      startWith(''),\n      switchMap(spellSearchInput => {\n        let spellString = typeof spellSearchInput === 'string' ? spellSearchInput : spellSearchInput?.name;\n        // let spellString = spellSearchInput;\n        spellString = spellString?.toLowerCase() || '';\n        return forkJoin(spellsGroups).pipe(\n          map(spellGroup => \n            spellGroup.map(spellList => \n              spellList.filter(spell =>\n                spell.name.toLowerCase().startsWith(spellString || '')\n              )\n            ).filter(spellList => spellList.length > 0)\n          )\n        )\n      })\n    )\n  }\n\n  generateTable(tableInput: DiceResults[] | undefined) {\n    this.vcr()?.clear();\n    this.#tableRef = this.vcr()?.createComponent(DieRollResultsTableComponent);\n    if(tableInput) {\n      this.#tableRef?.setInput('diceResults', tableInput);\n    }\n  }\n\n  generateDiceSet(): DiceSetI {\n    let dieDict: DiceSetI = new DiceSet(JSON.parse(\n      JSON.stringify(this.attackRollsForm.value))['dieBonuses']);\n    console.log('submit received (attack-rolls)', dieDict);\n    return dieDict;\n  }\n\n  attackRollsFormSubmit() {\n    let diceSet = this.generateDiceSet();\n    // console.log('submit', diceSet);\n    let minElement = document.getElementById('damage-min');\n    let maxElement = document.getElementById('damage-max');\n    if(minElement && maxElement) {\n      minElement.innerText = this.diceCalcService.minRoll(diceSet).toString();\n      maxElement.innerText = this.diceCalcService.maxRoll(diceSet).toString();\n    }\n\n    let diceCalcResults = this.diceCalcService.diceCalcResults(diceSet);\n    this.generateTable(diceCalcResults);\n  }\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.rawSpellList$ = this.spellsService.getAllSpells();\n    this.addObservableToAutocomplete();\n    this.addObservableToLevelDropdown();\n    this.setGroupedSpellList();\n    // this.generateTable(undefined);\n    this.attackRollsForm.valueChanges.subscribe(value => \n      console.log('attack rolls form', value));\n  }\n\n}\n\n    \n\n    \n        \n  \n    \n      Damage Range:0-0\n    \n  \n  \n    \n      \n        \n          Spell\n          \n           -->\n          \n            @for(spellGroup of filteredGroupSpellList | async; track $index) {\n              \n                @for(spell of spellGroup; track $index) {\n                  {{spell.name}}\n                }\n              \n            }\n          \n        \n        \n          Level\n          \n            @for (level of currentSpellRange; track $index) {\n              {{level}}\n            }\n          \n        \n      \n      \n      \n        Calc!\n      \n    \n  \n\n\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Damage Range:0-0                                    Spell                     -->                      @for(spellGroup of filteredGroupSpellList | async; track $index) {                              @for(spell of spellGroup; track $index) {                  {{spell.name}}                }                          }                                    Level                      @for (level of currentSpellRange; track $index) {              {{level}}            }                                            Calc!            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AttackRollsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CharacterSheetComponent.html":{"url":"components/CharacterSheetComponent.html","title":"component - CharacterSheetComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CharacterSheetComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/character-sheet/character-sheet.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-character-sheet\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./character-sheet.component.html\n            \n\n\n\n            \n                styleUrl\n                ./character-sheet.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-character-sheet',\n  standalone: true,\n  imports: [],\n  templateUrl: './character-sheet.component.html',\n  styleUrl: './character-sheet.component.scss'\n})\nexport class CharacterSheetComponent {\n\n}\n\n    \n\n    \n        character-sheet works!\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'character-sheet works!'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CharacterSheetComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CharacterStats.html":{"url":"interfaces/CharacterStats.html","title":"interface - CharacterStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CharacterStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/characterstats.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            charisma\n                                        \n                                \n                                \n                                        \n                                            constitution\n                                        \n                                \n                                \n                                        \n                                            dexterity\n                                        \n                                \n                                \n                                        \n                                            intelligence\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            proficiency\n                                        \n                                \n                                \n                                        \n                                            strength\n                                        \n                                \n                                \n                                        \n                                            wisdom\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        charisma\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        charisma:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        constitution\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        constitution:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dexterity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dexterity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        intelligence\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        intelligence:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        proficiency\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        proficiency:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strength\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        strength:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wisdom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        wisdom:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CharacterStats {\n    strength: number,\n    dexterity: number,\n    constitution: number,\n    intelligence: number,\n    wisdom: number,\n    charisma: number,\n    proficiency: number,\n    level: number\n}\n\n\nexport enum CharacterClass {\n    Barbarian,\n    Bard,\n    Cleric,\n    Druid,\n    Fighter,\n    Monk,\n    Paladin,\n    Ranger,\n    Rogue,\n    Sorcerer,\n    Warlock,\n    Wizard\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DiceBonusFormComponent.html":{"url":"components/DiceBonusFormComponent.html","title":"component - DiceBonusFormComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DiceBonusFormComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dice-bonus-form/dice-bonus-form.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component holds all the dice values that the user is able to set and edit.\nThis component is used on both skill check component and attack rolls component\nThe dice values are added to the form control automatically\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-dice-bonus-form\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            ReactiveFormsModule\n                                StepperComponent\n                            MatCardModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./dice-bonus-form.component.html\n            \n\n            \n                viewProviders\n                \n                    \n                            {\n    provide: ControlContainer, useFactory: () => inject(ControlContainer, { skipSelf: true })\n}\n                    \n                \n            \n\n\n            \n                styleUrl\n                ./dice-bonus-form.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                parentContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                controlKey\n                            \n                            \n                                label\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    parentFormGroup\n                                \n                                \n                                    d4\n                                \n                                \n                                    d6\n                                \n                                \n                                    d8\n                                \n                                \n                                    d10\n                                \n                                \n                                    d12\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        controlKey\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                        \n                            \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Bonus Dice'\n                    \n                \n                        \n                            \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:27\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:86\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:73\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        parentContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ControlContainer)\n                    \n                \n                    \n                        \n                                Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:25\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        parentFormGroup\n                    \n                \n\n                \n                    \n                        getparentFormGroup()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:29\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        d4\n                    \n                \n\n                \n                    \n                        getd4()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:33\n                                \n                            \n\n                \n                    \n                        setd4(diceNum: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:37\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            diceNum\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        d6\n                    \n                \n\n                \n                    \n                        getd6()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:41\n                                \n                            \n\n                \n                    \n                        setd6(diceNum: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:45\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            diceNum\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        d8\n                    \n                \n\n                \n                    \n                        getd8()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:49\n                                \n                            \n\n                \n                    \n                        setd8(diceNum: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:53\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            diceNum\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        d10\n                    \n                \n\n                \n                    \n                        getd10()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:57\n                                \n                            \n\n                \n                    \n                        setd10(diceNum: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:61\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            diceNum\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        d12\n                    \n                \n\n                \n                    \n                        getd12()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:65\n                                \n                            \n\n                \n                    \n                        setd12(diceNum: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:69\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            diceNum\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, inject, Input } from '@angular/core';\nimport { ControlContainer, FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { StepperComponent } from '../stepper/stepper.component';\nimport { MatCardModule } from '@angular/material/card';\n\n/**\n * This component holds all the dice values that the user is able to set and edit.\n * This component is used on both skill check component and attack rolls component\n * The dice values are added to the form control automatically\n */\n@Component({\n  selector: 'app-dice-bonus-form',\n  standalone: true,\n  viewProviders: [\n    {\n      provide: ControlContainer,\n      useFactory: () => inject(ControlContainer, {skipSelf: true})\n    }\n  ],\n  imports: [ReactiveFormsModule, StepperComponent, MatCardModule],\n  templateUrl: './dice-bonus-form.component.html',\n  styleUrl: './dice-bonus-form.component.scss'\n})\nexport class DiceBonusFormComponent {\n  parentContainer = inject(ControlContainer);\n  @Input({required: true}) controlKey = '';\n  @Input() label = 'Bonus Dice';\n\n  get parentFormGroup() {\n    return this.parentContainer.control as FormGroup;\n  }\n\n  public get d4(): FormControl {\n    return this.parentFormGroup.get(this.controlKey)?.get('d4') as FormControl\n  }\n\n  public set d4(diceNum: number) {\n    this.parentFormGroup.get(this.controlKey)?.get('d4')?.setValue(diceNum);\n  }\n\n  public get d6(): FormControl {\n    return this.parentFormGroup.get(this.controlKey)?.get('d6') as FormControl\n  }\n\n  public set d6(diceNum: number) {\n    this.parentFormGroup.get(this.controlKey)?.get('d6')?.setValue(diceNum);\n  }\n\n  public get d8(): FormControl {\n    return this.parentFormGroup.get(this.controlKey)?.get('d8') as FormControl\n  }\n\n  public set d8(diceNum: number) {\n    this.parentFormGroup.get(this.controlKey)?.get('d8')?.setValue(diceNum);\n  }\n  \n  public get d10(): FormControl {\n    return this.parentFormGroup.get(this.controlKey)?.get('d10') as FormControl\n  }\n\n  public set d10(diceNum: number) {\n    this.parentFormGroup.get(this.controlKey)?.get('d10')?.setValue(diceNum);\n  }\n  \n  public get d12(): FormControl {\n    return this.parentFormGroup.get(this.controlKey)?.get('d12') as FormControl\n  }\n\n  public set d12(diceNum: number) {\n    this.parentFormGroup.get(this.controlKey)?.get('d12')?.setValue(diceNum);\n  }\n\n  ngOnInit() {\n    this.parentFormGroup.addControl(this.controlKey,\n      new FormGroup({\n        d4: new FormControl(0),\n        d6: new FormControl(0),\n        d8: new FormControl(0),\n        d10: new FormControl(0),\n        d12: new FormControl(0),\n        modifier: new FormControl(0),\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.parentFormGroup.removeControl(this.controlKey);\n  }\n}\n\n    \n\n    \n        \n  {{label}}\n  \n  d4:\n  \n  \n  d6:\n  \n  \n  d8:\n  \n  \n  d10:\n  \n  \n  d12:\n  \n -->\n\n\n  \n    {{label}}\n    \n      \n       -->\n        &nbsp;d4:\n        \n        \n      \n      \n        &nbsp;d6:\n        \n        \n      \n      \n        &nbsp;d8:\n        \n        \n      \n      \n        d10:\n        \n        \n      \n      \n        d12:\n        \n        \n      \n      \n        modifier:\n        \n      \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  {{label}}    d4:      d6:      d8:      d10:      d12:   -->      {{label}}                 -->         d4:                                     d6:                                     d8:                                    d10:                                    d12:                                    modifier:                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DiceBonusFormComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DiceResults.html":{"url":"interfaces/DiceResults.html","title":"interface - DiceResults","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DiceResults\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/diceset.ts\n        \n\n\n            \n                Description\n            \n            \n                This interface is a data type to hold the number generated from calculating the dice roll results.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cumPercentageResults\n                                        \n                                \n                                \n                                        \n                                            numResults\n                                        \n                                \n                                \n                                        \n                                            percentageResults\n                                        \n                                \n                                \n                                        \n                                            rollResult\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cumPercentageResults\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cumPercentageResults:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the percent chance when rolling a diceset that you would get a rollResult higher than or equal to the current rollResult\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        numResults\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        numResults:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the number of times adding the dice together resulted in the rollResult\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        percentageResults\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        percentageResults:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    number of rolls with rollResult / total number of rolls possible from all the diceRolls. Can also be described as the percentage when rolling a diceset, that you would get rollResult as the roll.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rollResult\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rollResult:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the number created by adding together all the dice rolled in a DiceSetI\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface DiceSetI extends Iterable {\n    d4?: number;\n    d6?: number;\n    d8?: number;\n    d10?: number;\n    d12?: number;\n    d20?: number;\n    modifier: number;\n    /** Used in skill check dice calculations for the target value that the diceset is supposed to be equal */\n    target: number;\n    attempts: number;\n    advantage: Advantage;\n}\n\n/**\n * This interface is a data type to hold the number generated from calculating the dice roll results.\n */\nexport interface DiceResults {\n    /** the number created by adding together all the dice rolled in a DiceSetI */\n    rollResult: number;\n    /** the number of times adding the dice together resulted in the rollResult */\n    numResults: number;\n    /** number of rolls with rollResult / total number of rolls possible from all the diceRolls. Can also be described as the percentage when rolling a diceset, that you would get rollResult as the roll. */\n    percentageResults: number;\n    /** the percent chance when rolling a diceset that you would get a rollResult higher than or equal to the current rollResult */\n    cumPercentageResults: number;\n}\n\n/**\n * DiceSet data type implementation of DiceSetI\n * DiceSet class is used to set default values for variables in DiceSetI\n * DiceSet class is also used to implement iterator used in dice-calculations.serivce.ts\n */\nexport class DiceSet implements DiceSetI {\n    d4!: number;\n    d6!: number;\n    d8!: number;\n    d10!: number;\n    d12!: number;\n    d20!: number;\n    modifier: number = 0;\n    target: number = 0;\n    attempts: number = 1;\n    advantage: Advantage = Advantage.None;\n    private keys = [4, 6, 8, 10, 12, 20];\n\n    [Symbol.iterator](): Iterator {\n        let i = 0;\n        let keys = this.keys;\n        let values = [\n            this.d4 ?? 0, this.d6 ?? 0, this.d8 ?? 0, \n            this.d10 ?? 0, this.d12 ?? 0, this.d20 ?? 0\n        ]\n\n        return {\n            next() {\n                if (i \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DiceSet.html":{"url":"classes/DiceSet.html","title":"class - DiceSet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DiceSet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/diceset.ts\n        \n\n\n            \n                Description\n            \n            \n                DiceSet data type implementation of DiceSetI\nDiceSet class is used to set default values for variables in DiceSetI\nDiceSet class is also used to implement iterator used in dice-calculations.serivce.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                            DiceSetI\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                advantage\n                            \n                            \n                                attempts\n                            \n                            \n                                d10\n                            \n                            \n                                d12\n                            \n                            \n                                d20\n                            \n                            \n                                d4\n                            \n                            \n                                d6\n                            \n                            \n                                d8\n                            \n                            \n                                    Private\n                                keys\n                            \n                            \n                                modifier\n                            \n                            \n                                target\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                            \n                                \n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined, dicestring?: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/diceset.ts:70\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dicestring\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        advantage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Advantage\n\n                    \n                \n                \n                    \n                        Default value : Advantage.None\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attempts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d10\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d12\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d20\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d4\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d6\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d8\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [4, 6, 8, 10, 12, 20]\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        modifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:48\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/diceset.ts:112\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n            \n                \n()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/diceset.ts:53\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Iterator\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export interface DiceSetI extends Iterable {\n    d4?: number;\n    d6?: number;\n    d8?: number;\n    d10?: number;\n    d12?: number;\n    d20?: number;\n    modifier: number;\n    /** Used in skill check dice calculations for the target value that the diceset is supposed to be equal */\n    target: number;\n    attempts: number;\n    advantage: Advantage;\n}\n\n/**\n * This interface is a data type to hold the number generated from calculating the dice roll results.\n */\nexport interface DiceResults {\n    /** the number created by adding together all the dice rolled in a DiceSetI */\n    rollResult: number;\n    /** the number of times adding the dice together resulted in the rollResult */\n    numResults: number;\n    /** number of rolls with rollResult / total number of rolls possible from all the diceRolls. Can also be described as the percentage when rolling a diceset, that you would get rollResult as the roll. */\n    percentageResults: number;\n    /** the percent chance when rolling a diceset that you would get a rollResult higher than or equal to the current rollResult */\n    cumPercentageResults: number;\n}\n\n/**\n * DiceSet data type implementation of DiceSetI\n * DiceSet class is used to set default values for variables in DiceSetI\n * DiceSet class is also used to implement iterator used in dice-calculations.serivce.ts\n */\nexport class DiceSet implements DiceSetI {\n    d4!: number;\n    d6!: number;\n    d8!: number;\n    d10!: number;\n    d12!: number;\n    d20!: number;\n    modifier: number = 0;\n    target: number = 0;\n    attempts: number = 1;\n    advantage: Advantage = Advantage.None;\n    private keys = [4, 6, 8, 10, 12, 20];\n\n    [Symbol.iterator](): Iterator {\n        let i = 0;\n        let keys = this.keys;\n        let values = [\n            this.d4 ?? 0, this.d6 ?? 0, this.d8 ?? 0, \n            this.d10 ?? 0, this.d12 ?? 0, this.d20 ?? 0\n        ]\n\n        return {\n            next() {\n                if (i \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DiceSetI.html":{"url":"interfaces/DiceSetI.html","title":"interface - DiceSetI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DiceSetI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/diceset.ts\n        \n\n\n            \n                Description\n            \n            \n                This interface holds how many dice are rolled for each type of die\nIterable: returns arrays of all the dice values:\n[4, d4num], [6, d6num], [8, d8num], [10, d10num], [12, d12num], [20, d20num]\nThis data type is used in dice-calculations.service.ts where the dice information is used in different calculations.\n\n            \n\n            \n                Extends\n            \n            \n                        Iterable\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            advantage\n                                        \n                                \n                                \n                                        \n                                            attempts\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d10\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d12\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d20\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d4\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d6\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d8\n                                        \n                                \n                                \n                                        \n                                            modifier\n                                        \n                                \n                                \n                                        \n                                            target\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        advantage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        advantage:         Advantage\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Advantage\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        attempts\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        attempts:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d10\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d10:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d12\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d12:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d20\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d20:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d4\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d4:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d6\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d6:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d8\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d8:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        modifier\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        modifier:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        target:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Used in skill check dice calculations for the target value that the diceset is supposed to be equal\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface DiceSetI extends Iterable {\n    d4?: number;\n    d6?: number;\n    d8?: number;\n    d10?: number;\n    d12?: number;\n    d20?: number;\n    modifier: number;\n    /** Used in skill check dice calculations for the target value that the diceset is supposed to be equal */\n    target: number;\n    attempts: number;\n    advantage: Advantage;\n}\n\n/**\n * This interface is a data type to hold the number generated from calculating the dice roll results.\n */\nexport interface DiceResults {\n    /** the number created by adding together all the dice rolled in a DiceSetI */\n    rollResult: number;\n    /** the number of times adding the dice together resulted in the rollResult */\n    numResults: number;\n    /** number of rolls with rollResult / total number of rolls possible from all the diceRolls. Can also be described as the percentage when rolling a diceset, that you would get rollResult as the roll. */\n    percentageResults: number;\n    /** the percent chance when rolling a diceset that you would get a rollResult higher than or equal to the current rollResult */\n    cumPercentageResults: number;\n}\n\n/**\n * DiceSet data type implementation of DiceSetI\n * DiceSet class is used to set default values for variables in DiceSetI\n * DiceSet class is also used to implement iterator used in dice-calculations.serivce.ts\n */\nexport class DiceSet implements DiceSetI {\n    d4!: number;\n    d6!: number;\n    d8!: number;\n    d10!: number;\n    d12!: number;\n    d20!: number;\n    modifier: number = 0;\n    target: number = 0;\n    attempts: number = 1;\n    advantage: Advantage = Advantage.None;\n    private keys = [4, 6, 8, 10, 12, 20];\n\n    [Symbol.iterator](): Iterator {\n        let i = 0;\n        let keys = this.keys;\n        let values = [\n            this.d4 ?? 0, this.d6 ?? 0, this.d8 ?? 0, \n            this.d10 ?? 0, this.d12 ?? 0, this.d20 ?? 0\n        ]\n\n        return {\n            next() {\n                if (i \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DieRollResultsTableComponent.html":{"url":"components/DieRollResultsTableComponent.html","title":"component - DieRollResultsTableComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DieRollResultsTableComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/die-roll-results-table/die-roll-results-table.component.ts\n\n\n\n    \n        Description\n    \n    \n        This creates a table using Material UI that organizes information from dice-calculations.service.ts.\nEach row of the table has the possible roll value from rolling the diceset,\nthe number of possible rolls that result in said roll value,\nthe percentage chance of rolling higher than that specific roll,\nthe percentage chance of rolling that specific roll,\nand a bar that represents how rolling that specific roll visually looks.\nThis component appears on both skill-check and attack-rolls forms.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-die-roll-results-table\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            MatTableModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./die-roll-results-table.component.html\n            \n\n\n\n            \n                styleUrl\n                ./die-roll-results-table.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                diceCalculations\n                            \n                            \n                                displayedColumns\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                diceResults\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        diceResults\n                    \n                \n                \n                    \n                        Type :         DiceResults[]\n\n                    \n                \n                \n                    \n                        Default value : this.diceCalculations.defaultD20RollResults()\n                    \n                \n                        \n                            \n                                    Defined in src/app/die-roll-results-table/die-roll-results-table.component.ts:25\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        diceCalculations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DiceCalculationsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/die-roll-results-table/die-roll-results-table.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        displayedColumns\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    'roll-result', 'num-result', 'percentage-cum-result', 'percentage-result'\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/die-roll-results-table/die-roll-results-table.component.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject, Input } from '@angular/core';\nimport { MatTableModule } from '@angular/material/table';\nimport { DiceResults } from '../diceset';\nimport { CommonModule } from '@angular/common';\nimport { DiceCalculationsService } from '../dice-calculations.service';\n\n/**\n * This creates a table using Material UI that organizes information from dice-calculations.service.ts.\n * Each row of the table has the possible roll value from rolling the diceset,\n * the number of possible rolls that result in said roll value,\n * the percentage chance of rolling higher than that specific roll,\n * the percentage chance of rolling that specific roll,\n * and a bar that represents how rolling that specific roll visually looks.\n * This component appears on both skill-check and attack-rolls forms.\n */\n@Component({\n  selector: 'app-die-roll-results-table',\n  standalone: true,\n  imports: [CommonModule, MatTableModule],\n  templateUrl: './die-roll-results-table.component.html',\n  styleUrl: './die-roll-results-table.component.scss'\n})\nexport class DieRollResultsTableComponent {\n  diceCalculations = inject(DiceCalculationsService);\n  @Input() diceResults: DiceResults[] = this.diceCalculations.defaultD20RollResults();\n  // displayedColumns = [\n  //   'roll-result', 'num-result', 'percentage-result', 'percentage-block'\n  // ];\n  displayedColumns = [\n    'roll-result', 'num-result', 'percentage-cum-result', 'percentage-result'\n  ];\n}\n\n    \n\n    \n        \n  \n    Roll\n    {{element.rollResult}}\n  \n  \n    #\n    {{element.numResults}}\n  \n  \n    % cum\n    \n      {{element.cumPercentageResults}}%\n    \n  \n  \n    %\n    \n      {{element.percentageResults}}%\n      \n      \n        &nbsp;\n      \n    \n  \n  \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Roll    {{element.rollResult}}        #    {{element.numResults}}        % cum          {{element.cumPercentageResults}}%            %          {{element.percentageResults}}%                                     '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DieRollResultsTableComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropdownGroup.html":{"url":"interfaces/DropdownGroup.html","title":"interface - DropdownGroup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DropdownGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/dropdown.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            group\n                                        \n                                \n                                \n                                        \n                                            groupName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        group\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        group:         DropdownItem[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DropdownItem[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        groupName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        groupName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface DropdownGroup {\n    groupName: string;\n    group: DropdownItem[];\n}\nexport interface DropdownItem {\n    label: string;\n    value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropdownItem.html":{"url":"interfaces/DropdownItem.html","title":"interface - DropdownItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DropdownItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/dropdown.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface DropdownGroup {\n    groupName: string;\n    group: DropdownItem[];\n}\nexport interface DropdownItem {\n    label: string;\n    value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavbarComponent.html":{"url":"components/NavbarComponent.html","title":"component - NavbarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NavbarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/navbar/navbar.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-navbar\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatToolbarModule\n                            MatButtonModule\n                            MatSidenavModule\n                            MatListModule\n                            MatIconModule\n                            AsyncPipe\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./navbar.component.html\n            \n\n\n\n            \n                styleUrl\n                ./navbar.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                breakpointObserver\n                            \n                            \n                                isHandset$\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        breakpointObserver\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(BreakpointObserver)\n                    \n                \n                    \n                        \n                                Defined in src/app/navbar/navbar.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isHandset$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    )\n                    \n                \n                    \n                        \n                                Defined in src/app/navbar/navbar.component.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { AsyncPipe } from '@angular/common';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrl: './navbar.component.scss',\n  standalone: true,\n  imports: [\n    MatToolbarModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatListModule,\n    MatIconModule,\n    AsyncPipe,\n  ]\n})\nexport class NavbarComponent {\n  private breakpointObserver = inject(BreakpointObserver);\n\n  isHandset$: Observable = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    );\n}\n\n    \n\n    \n        \n  \n    Menu\n    \n      Link 1\n      Link 2\n      Link 3\n    \n  \n  \n    \n      @if (isHandset$ | async) {\n        \n          menu\n        \n      }\n      angular-bg3-cheats\n    \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Menu          Link 1      Link 2      Link 3                  @if (isHandset$ | async) {                  menu              }      angular-bg3-cheats          '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NavbarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NotFoundComponent.html":{"url":"components/NotFoundComponent.html","title":"component - NotFoundComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NotFoundComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/not-found/not-found.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-not-found\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./not-found.component.html\n            \n\n\n\n            \n                styleUrl\n                ./not-found.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  standalone: true,\n  imports: [],\n  templateUrl: './not-found.component.html',\n  styleUrl: './not-found.component.scss'\n})\nexport class NotFoundComponent {\n\n}\n\n    \n\n    \n        page not found\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'page not found'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NotFoundComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OverlayComponent.html":{"url":"components/OverlayComponent.html","title":"component - OverlayComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  OverlayComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/overlay/overlay.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-overlay\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatInputModule\n                            MatButtonModule\n                            MatSelectModule\n                            MatRadioModule\n                            MatCardModule\n                            ReactiveFormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./overlay.component.html\n            \n\n\n\n            \n                styleUrl\n                ./overlay.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                addressForm\n                            \n                            \n                                    Private\n                                fb\n                            \n                            \n                                hasUnitNumber\n                            \n                            \n                                states\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/overlay/overlay.component.ts:106\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        addressForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.fb.group({\n    company: null,\n    firstName: [null, Validators.required],\n    lastName: [null, Validators.required],\n    address: [null, Validators.required],\n    address2: null,\n    city: [null, Validators.required],\n    state: [null, Validators.required],\n    postalCode: [null, Validators.compose([\n      Validators.required, Validators.minLength(5), Validators.maxLength(5)])\n    ],\n    shipping: ['free', Validators.required]\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/overlay/overlay.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fb\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(FormBuilder)\n                    \n                \n                    \n                        \n                                Defined in src/app/overlay/overlay.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasUnitNumber\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/overlay/overlay.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        states\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {name: 'Alabama', abbreviation: 'AL'},\n    {name: 'Alaska', abbreviation: 'AK'},\n    {name: 'American Samoa', abbreviation: 'AS'},\n    {name: 'Arizona', abbreviation: 'AZ'},\n    {name: 'Arkansas', abbreviation: 'AR'},\n    {name: 'California', abbreviation: 'CA'},\n    {name: 'Colorado', abbreviation: 'CO'},\n    {name: 'Connecticut', abbreviation: 'CT'},\n    {name: 'Delaware', abbreviation: 'DE'},\n    {name: 'District Of Columbia', abbreviation: 'DC'},\n    {name: 'Federated States Of Micronesia', abbreviation: 'FM'},\n    {name: 'Florida', abbreviation: 'FL'},\n    {name: 'Georgia', abbreviation: 'GA'},\n    {name: 'Guam', abbreviation: 'GU'},\n    {name: 'Hawaii', abbreviation: 'HI'},\n    {name: 'Idaho', abbreviation: 'ID'},\n    {name: 'Illinois', abbreviation: 'IL'},\n    {name: 'Indiana', abbreviation: 'IN'},\n    {name: 'Iowa', abbreviation: 'IA'},\n    {name: 'Kansas', abbreviation: 'KS'},\n    {name: 'Kentucky', abbreviation: 'KY'},\n    {name: 'Louisiana', abbreviation: 'LA'},\n    {name: 'Maine', abbreviation: 'ME'},\n    {name: 'Marshall Islands', abbreviation: 'MH'},\n    {name: 'Maryland', abbreviation: 'MD'},\n    {name: 'Massachusetts', abbreviation: 'MA'},\n    {name: 'Michigan', abbreviation: 'MI'},\n    {name: 'Minnesota', abbreviation: 'MN'},\n    {name: 'Mississippi', abbreviation: 'MS'},\n    {name: 'Missouri', abbreviation: 'MO'},\n    {name: 'Montana', abbreviation: 'MT'},\n    {name: 'Nebraska', abbreviation: 'NE'},\n    {name: 'Nevada', abbreviation: 'NV'},\n    {name: 'New Hampshire', abbreviation: 'NH'},\n    {name: 'New Jersey', abbreviation: 'NJ'},\n    {name: 'New Mexico', abbreviation: 'NM'},\n    {name: 'New York', abbreviation: 'NY'},\n    {name: 'North Carolina', abbreviation: 'NC'},\n    {name: 'North Dakota', abbreviation: 'ND'},\n    {name: 'Northern Mariana Islands', abbreviation: 'MP'},\n    {name: 'Ohio', abbreviation: 'OH'},\n    {name: 'Oklahoma', abbreviation: 'OK'},\n    {name: 'Oregon', abbreviation: 'OR'},\n    {name: 'Palau', abbreviation: 'PW'},\n    {name: 'Pennsylvania', abbreviation: 'PA'},\n    {name: 'Puerto Rico', abbreviation: 'PR'},\n    {name: 'Rhode Island', abbreviation: 'RI'},\n    {name: 'South Carolina', abbreviation: 'SC'},\n    {name: 'South Dakota', abbreviation: 'SD'},\n    {name: 'Tennessee', abbreviation: 'TN'},\n    {name: 'Texas', abbreviation: 'TX'},\n    {name: 'Utah', abbreviation: 'UT'},\n    {name: 'Vermont', abbreviation: 'VT'},\n    {name: 'Virgin Islands', abbreviation: 'VI'},\n    {name: 'Virginia', abbreviation: 'VA'},\n    {name: 'Washington', abbreviation: 'WA'},\n    {name: 'West Virginia', abbreviation: 'WV'},\n    {name: 'Wisconsin', abbreviation: 'WI'},\n    {name: 'Wyoming', abbreviation: 'WY'}\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/overlay/overlay.component.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\n\nimport { ReactiveFormsModule, FormBuilder, Validators } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatCardModule } from '@angular/material/card';\n\n\n@Component({\n  selector: 'app-overlay',\n  templateUrl: './overlay.component.html',\n  styleUrl: './overlay.component.scss',\n  standalone: true,\n  imports: [\n    MatInputModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatCardModule,\n    ReactiveFormsModule\n  ]\n})\nexport class OverlayComponent {\n  private fb = inject(FormBuilder);\n  addressForm = this.fb.group({\n    company: null,\n    firstName: [null, Validators.required],\n    lastName: [null, Validators.required],\n    address: [null, Validators.required],\n    address2: null,\n    city: [null, Validators.required],\n    state: [null, Validators.required],\n    postalCode: [null, Validators.compose([\n      Validators.required, Validators.minLength(5), Validators.maxLength(5)])\n    ],\n    shipping: ['free', Validators.required]\n  });\n\n  hasUnitNumber = false;\n\n  states = [\n    {name: 'Alabama', abbreviation: 'AL'},\n    {name: 'Alaska', abbreviation: 'AK'},\n    {name: 'American Samoa', abbreviation: 'AS'},\n    {name: 'Arizona', abbreviation: 'AZ'},\n    {name: 'Arkansas', abbreviation: 'AR'},\n    {name: 'California', abbreviation: 'CA'},\n    {name: 'Colorado', abbreviation: 'CO'},\n    {name: 'Connecticut', abbreviation: 'CT'},\n    {name: 'Delaware', abbreviation: 'DE'},\n    {name: 'District Of Columbia', abbreviation: 'DC'},\n    {name: 'Federated States Of Micronesia', abbreviation: 'FM'},\n    {name: 'Florida', abbreviation: 'FL'},\n    {name: 'Georgia', abbreviation: 'GA'},\n    {name: 'Guam', abbreviation: 'GU'},\n    {name: 'Hawaii', abbreviation: 'HI'},\n    {name: 'Idaho', abbreviation: 'ID'},\n    {name: 'Illinois', abbreviation: 'IL'},\n    {name: 'Indiana', abbreviation: 'IN'},\n    {name: 'Iowa', abbreviation: 'IA'},\n    {name: 'Kansas', abbreviation: 'KS'},\n    {name: 'Kentucky', abbreviation: 'KY'},\n    {name: 'Louisiana', abbreviation: 'LA'},\n    {name: 'Maine', abbreviation: 'ME'},\n    {name: 'Marshall Islands', abbreviation: 'MH'},\n    {name: 'Maryland', abbreviation: 'MD'},\n    {name: 'Massachusetts', abbreviation: 'MA'},\n    {name: 'Michigan', abbreviation: 'MI'},\n    {name: 'Minnesota', abbreviation: 'MN'},\n    {name: 'Mississippi', abbreviation: 'MS'},\n    {name: 'Missouri', abbreviation: 'MO'},\n    {name: 'Montana', abbreviation: 'MT'},\n    {name: 'Nebraska', abbreviation: 'NE'},\n    {name: 'Nevada', abbreviation: 'NV'},\n    {name: 'New Hampshire', abbreviation: 'NH'},\n    {name: 'New Jersey', abbreviation: 'NJ'},\n    {name: 'New Mexico', abbreviation: 'NM'},\n    {name: 'New York', abbreviation: 'NY'},\n    {name: 'North Carolina', abbreviation: 'NC'},\n    {name: 'North Dakota', abbreviation: 'ND'},\n    {name: 'Northern Mariana Islands', abbreviation: 'MP'},\n    {name: 'Ohio', abbreviation: 'OH'},\n    {name: 'Oklahoma', abbreviation: 'OK'},\n    {name: 'Oregon', abbreviation: 'OR'},\n    {name: 'Palau', abbreviation: 'PW'},\n    {name: 'Pennsylvania', abbreviation: 'PA'},\n    {name: 'Puerto Rico', abbreviation: 'PR'},\n    {name: 'Rhode Island', abbreviation: 'RI'},\n    {name: 'South Carolina', abbreviation: 'SC'},\n    {name: 'South Dakota', abbreviation: 'SD'},\n    {name: 'Tennessee', abbreviation: 'TN'},\n    {name: 'Texas', abbreviation: 'TX'},\n    {name: 'Utah', abbreviation: 'UT'},\n    {name: 'Vermont', abbreviation: 'VT'},\n    {name: 'Virgin Islands', abbreviation: 'VI'},\n    {name: 'Virginia', abbreviation: 'VA'},\n    {name: 'Washington', abbreviation: 'WA'},\n    {name: 'West Virginia', abbreviation: 'WV'},\n    {name: 'Wisconsin', abbreviation: 'WI'},\n    {name: 'Wyoming', abbreviation: 'WY'}\n  ];\n\n  onSubmit(): void {\n    alert('Thanks!');\n  }\n}\n\n    \n\n    \n        \n\n  \n    \n      Shipping Information\n    \n    \n      \n        \n          \n            \n          \n        \n      \n      \n        \n          \n            \n            @if (addressForm.controls['firstName'].hasError('required')) {\n              First name is required\n            }\n          \n        \n        \n          \n            \n            @if (addressForm.controls['lastName'].hasError('required')) {\n              Last name is required\n            }\n          \n        \n      \n      \n        \n          \n            \n            @if (addressForm.controls['address'].hasError('required')) {\n              Address is required\n            }\n          \n        \n      \n      \n        \n          @if (hasUnitNumber) {\n            \n              \n            \n          } @else {\n            \n              + Add C/O, Apt, Suite, Unit\n            \n          }\n        \n      \n      \n        \n          \n            \n            @if (addressForm.controls['city'].hasError('required')) {\n              City is required\n            }\n          \n        \n        \n          \n            \n              @for (state of states; track state) {\n                {{ state.name }}\n              }\n            \n            @if (addressForm.controls['state'].hasError('required')) {\n              State is required\n            }\n          \n        \n      \n      \n        \n          \n            \n            {{postalCode.value.length}} / 5\n          \n        \n      \n      \n        \n          \n            Free Shipping\n            Priority Shipping\n            Next Day Shipping\n          \n        \n      \n    \n    \n      Submit\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Shipping Information                                                                                                                    @if (addressForm.controls[\\'firstName\\'].hasError(\\'required\\')) {              First name is required            }                                                            @if (addressForm.controls[\\'lastName\\'].hasError(\\'required\\')) {              Last name is required            }                                                                        @if (addressForm.controls[\\'address\\'].hasError(\\'required\\')) {              Address is required            }                                                @if (hasUnitNumber) {                                                } @else {                          + Add C/O, Apt, Suite, Unit                      }                                                              @if (addressForm.controls[\\'city\\'].hasError(\\'required\\')) {              City is required            }                                                              @for (state of states; track state) {                {{ state.name }}              }                        @if (addressForm.controls[\\'state\\'].hasError(\\'required\\')) {              State is required            }                                                                        {{postalCode.value.length}} / 5                                                            Free Shipping            Priority Shipping            Next Day Shipping                                      Submit      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'OverlayComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SkillCheckComponent.html":{"url":"components/SkillCheckComponent.html","title":"component - SkillCheckComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SkillCheckComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/skill-check/skill-check.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component allows for the checking of how likely a skill check is to succeed.\nIt generates a frontend to display results from dice calculations, and a form for the user to input their dice calc information\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-skill-check\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            ReactiveFormsModule\n                            CommonModule\n                            MatCardModule\n                            MatSelectModule\n                                DiceBonusFormComponent\n                            MatButtonModule\n                            MatButtonToggleModule\n                            MatInputModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./skill-check.component.html\n            \n\n\n\n            \n                styleUrl\n                ./skill-check.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                #tableRef\n                            \n                            \n                                advantageAdvantage\n                            \n                            \n                                advantageDisadvantage\n                            \n                            \n                                advantageEnum\n                            \n                            \n                                advantageNone\n                            \n                            \n                                advantageOptions\n                            \n                            \n                                attemptsOptions\n                            \n                            \n                                diceCalcService\n                            \n                            \n                                dieBonusForm\n                            \n                            \n                                skillCheckForm\n                            \n                            \n                                vcr\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTableComponent\n                            \n                            \n                                generateDiceSet\n                            \n                            \n                                isAdvantageNone\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                skillCheckSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/skill-check/skill-check.component.ts:110\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createTableComponent\n                        \n                    \n                \n            \n            \n                \ncreateTableComponent(tableInput: DiceResults[] | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/skill-check/skill-check.component.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                tableInput\n                                            \n                                                            DiceResults[] | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    undefined\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateDiceSet\n                        \n                    \n                \n            \n            \n                \ngenerateDiceSet()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/skill-check/skill-check.component.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         DiceSetI\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isAdvantageNone\n                        \n                    \n                \n            \n            \n                \nisAdvantageNone(currentAdvantageValue: Advantage)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/skill-check/skill-check.component.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                currentAdvantageValue\n                                            \n                                                            Advantage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/skill-check/skill-check.component.ts:105\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skillCheckSubmit\n                        \n                    \n                \n            \n            \n                \nskillCheckSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/skill-check/skill-check.component.ts:88\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        #tableRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        advantageAdvantage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Advantage.Advantage\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        advantageDisadvantage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Advantage.Disadvantage\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        advantageEnum\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Advantage\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        advantageNone\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Advantage.None\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        advantageOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {id: 1, name: 'None', value: Advantage.None},\n    {id: 2, name: 'Advantage', value: Advantage.Advantage},\n    {id: 3, name: 'Disadvantage', value: Advantage.Disadvantage},\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attemptsOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [1, 2, 3, 4]\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        diceCalcService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DiceCalculationsService\n\n                    \n                \n                \n                    \n                        Default value : inject(DiceCalculationsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dieBonusForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    ' d4': new FormControl(0),\n    ' d6': new FormControl(0),\n    ' d8': new FormControl(0),\n    'd10': new FormControl(0),\n    'd12': new FormControl(0),\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skillCheckForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    targetDC: new FormControl(0, [\n      Validators.required,\n      Validators.min(0)\n    ]),\n    advantage: new FormControl(Advantage.None),\n    attempts: new FormControl(1, [\n      Validators.required,\n      Validators.min(1)\n    ])\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        vcr\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('tableContainer', {read: ViewContainerRef})\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, ComponentRef, inject, OnInit, viewChild, ViewContainerRef } from '@angular/core';\nimport { FormControl, ReactiveFormsModule, FormGroup, Validators } from '@angular/forms';\nimport { DiceSet, DiceSetI, Advantage, DiceResults } from '../diceset';\nimport { DiceCalculationsService } from '../dice-calculations.service';\nimport { DiceBonusFormComponent } from '../dice-bonus-form/dice-bonus-form.component';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle'\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { DieRollResultsTableComponent } from '../die-roll-results-table/die-roll-results-table.component';\n\n/**\n * This component allows for the checking of how likely a skill check is to succeed.\n * It generates a frontend to display results from dice calculations, and a form for the user to input their dice calc information\n */\n@Component({\n  selector: 'app-skill-check',\n  standalone: true,\n  imports: [\n    ReactiveFormsModule, CommonModule, MatCardModule, MatSelectModule,\n    DiceBonusFormComponent, MatButtonModule,\n    MatButtonToggleModule, MatInputModule\n  ],\n  templateUrl: './skill-check.component.html',\n  styleUrl: './skill-check.component.scss'\n})\nexport class SkillCheckComponent implements OnInit {\n  diceCalcService: DiceCalculationsService = inject(DiceCalculationsService);\n  vcr = viewChild('tableContainer', {read: ViewContainerRef});\n  #tableRef!: ComponentRef | undefined;\n  skillCheckForm = new FormGroup({\n    targetDC: new FormControl(0, [\n      Validators.required,\n      Validators.min(0)\n    ]),\n    advantage: new FormControl(Advantage.None),\n    attempts: new FormControl(1, [\n      Validators.required,\n      Validators.min(1)\n    ])\n  });\n  dieBonusForm = new FormGroup({\n    ' d4': new FormControl(0),\n    ' d6': new FormControl(0),\n    ' d8': new FormControl(0),\n    'd10': new FormControl(0),\n    'd12': new FormControl(0),\n  });\n  // diceSet!: DiceSet;\n  advantageEnum: typeof Advantage = Advantage;\n  advantageNone = Advantage.None;\n  advantageAdvantage = Advantage.Advantage\n  advantageDisadvantage = Advantage.Disadvantage;\n  advantageOptions = [\n    {id: 1, name: 'None', value: Advantage.None},\n    {id: 2, name: 'Advantage', value: Advantage.Advantage},\n    {id: 3, name: 'Disadvantage', value: Advantage.Disadvantage},\n  ];\n  attemptsOptions = [1, 2, 3, 4];\n\n  isAdvantageNone(currentAdvantageValue: Advantage) {\n    return currentAdvantageValue === Advantage.None;\n  }\n\n  generateDiceSet(): DiceSetI {\n    let dieDict = JSON.parse(\n      JSON.stringify(this.skillCheckForm.value))['dieBonuses'];\n    // previous line converts diebonuses form group into dict,\n    // this allows easy construction of new DiceSet once other parameters are set\n    dieDict['d20'] = 1;\n    dieDict['target'] = this.skillCheckForm.value.targetDC ?? 0;\n    dieDict['advantage'] = this.skillCheckForm.value.advantage ?? Advantage.None;\n    dieDict['attempts'] = this.skillCheckForm.value.attempts ?? 1;\n    return new DiceSet(dieDict);\n  }\n\n  createTableComponent(tableInput: DiceResults[] | undefined=undefined) {\n    this.vcr()?.clear();\n    this.#tableRef = this.vcr()?.createComponent(DieRollResultsTableComponent);\n    if(tableInput) {\n      console.log('table recreated');\n      this.#tableRef?.setInput('diceResults', tableInput);\n    }\n  }\n\n  skillCheckSubmit() {\n    let diceset = this.generateDiceSet();\n    let skillCheckSuccessChance = this.diceCalcService.skillCheckCalc(diceset);\n    let successElement = document.getElementById('success-chance');\n    let targetDCElement = document.getElementById('target-dc-value');\n    let diceRollResults = this.diceCalcService.diceCalcResults(diceset);\n    console.log('skill check submit', this.skillCheckForm.value);\n    if(successElement !== null) {\n      console.log(skillCheckSuccessChance);\n      successElement.innerHTML = (skillCheckSuccessChance).toString();\n    }\n    if(targetDCElement !== null) {\n      targetDCElement.innerHTML = diceset.target.toString();\n    }\n    this.createTableComponent(diceRollResults);\n  }\n\n  ngOnInit(): void {\n    this.createTableComponent();\n    this.skillCheckForm.valueChanges.subscribe(\n      () => this.skillCheckSubmit()\n    );\n  }\n\n  constructor() {}\n}\n\n    \n\n    \n        \n  \n    \n      95% chance to succeed with target DC 0\n    \n    \n      Note: 100% and 0% are impossible since regardless of DC, a natural 20 is an automatic success, and a natural 1 is an automatic fail. Percentages are rounded to two decimals.\n    \n  \n  \n    \n      \n        \n          Target DC\n          \n        \n      \n      \n        \n        @for (option of advantageOptions; track option.id) {\n          @if (option.value == '0') {\n            \n              {{option.name}}\n            \n          } @else {\n            \n              {{option.name}}\n            \n          }\n        }\n        \n      \n      \n        \n          Attempts\n          \n            @for(item of attemptsOptions; track $index) {\n              {{item}}\n            }\n          \n        \n      \n    \n    \n    \n      Calc!\n    \n  \n\n\n\n\n\n  Icons made by Freepik from www.flaticon.com\n  Icons made by Pixel perfect from\n    www.flaticon.com\n  Icons made by Nadiinko from www.flaticon.com\n  Icons made by Flowicon from www.flaticon.com\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            95% chance to succeed with target DC 0              Note: 100% and 0% are impossible since regardless of DC, a natural 20 is an automatic success, and a natural 1 is an automatic fail. Percentages are rounded to two decimals.                                    Target DC                                              @for (option of advantageOptions; track option.id) {          @if (option.value == \\'0\\') {                          {{option.name}}                      } @else {                          {{option.name}}                      }        }                                      Attempts                      @for(item of attemptsOptions; track $index) {              {{item}}            }                                          Calc!        Icons made by Freepik from www.flaticon.com  Icons made by Pixel perfect from    www.flaticon.com  Icons made by Nadiinko from www.flaticon.com  Icons made by Flowicon from www.flaticon.com'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SkillCheckComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Spell.html":{"url":"classes/Spell.html","title":"class - Spell","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Spell\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/spell.ts\n        \n\n\n            \n                Description\n            \n            \n                The data type version of SpellI, which has additional functions to allow easier setting of values from DnD API\n\n            \n\n\n            \n                Implements\n            \n            \n                            SpellI\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                damage\n                            \n                            \n                                level\n                            \n                            \n                                name\n                            \n                            \n                                url\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setDamageFromAPI\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, url: string, level: number, damage: object)\n                    \n                \n                        \n                            \n                                Defined in src/app/spell.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        level\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        damage\n                                                  \n                                                        \n                                                                        object\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        damage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/app/spell.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/spell.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/spell.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/spell.ts:18\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setDamageFromAPI\n                        \n                    \n                \n            \n            \n                \nsetDamageFromAPI(response: literal type, modifier: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/spell.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                modifier\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/spell.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DiceSetI, DiceSet } from \"./diceset\";\n\n/**\n * Interface used to hold all necessary information about each spell\n */\nexport interface SpellI {\n    name: string\n    url: string\n    level: number\n    damage: { [level: number]: DiceSetI }\n}\n\n/**\n * The data type version of SpellI, which has additional functions to allow easier setting of values from DnD API\n */\nexport class Spell implements SpellI {\n    name: string;\n    url: string;\n    level: number;\n    damage: { [level: number]: DiceSetI; };\n    \n    constructor(name='', url='', level=1, damage={0: new DiceSet({})}) {\n        this.name = name;\n        this.url = url;\n        this.level = level;\n        this.damage = damage;\n    }\n\n    setDamageFromAPI(response: {[level: string]: string}, modifier: number) {\n        for(let key in response) {\n            console.log('damage from api', parseInt(key), response);\n            this.damage[parseInt(key)] = new DiceSet(\n                {modifier: modifier}, response[key]\n            );\n            console.log('damage variable', this.damage[1]);\n        }\n    }\n\n    toString(): string {\n        let retString = `name: ${this.name}, url: ${this.url}\\n`;\n        retString += `damage: `\n        for(let key in this.damage) {\n            retString += `{${key}: ${this.damage[key]}\\n`\n        }\n        return retString;\n    }\n\n}\n\n/**\n * data type generated from: https://transform.tools/json-to-typescript\n * Based on response from https://www.dnd5eapi.co/api/spells\n */\nexport interface SpellResponse {\n    count: number\n    results: SpellResponseResults[]\n}\n\n/**\n * Used to store individual information about each spell returned as a result from https://www.dnd5eapi.co/api/spells\n * data type generated from: https://transform.tools/json-to-typescript\n */\nexport interface SpellResponseResults {\n    index: string\n    name: string\n    level: number\n    url: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpellI.html":{"url":"interfaces/SpellI.html","title":"interface - SpellI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpellI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/spell.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface used to hold all necessary information about each spell\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            damage\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        damage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        damage:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DiceSetI, DiceSet } from \"./diceset\";\n\n/**\n * Interface used to hold all necessary information about each spell\n */\nexport interface SpellI {\n    name: string\n    url: string\n    level: number\n    damage: { [level: number]: DiceSetI }\n}\n\n/**\n * The data type version of SpellI, which has additional functions to allow easier setting of values from DnD API\n */\nexport class Spell implements SpellI {\n    name: string;\n    url: string;\n    level: number;\n    damage: { [level: number]: DiceSetI; };\n    \n    constructor(name='', url='', level=1, damage={0: new DiceSet({})}) {\n        this.name = name;\n        this.url = url;\n        this.level = level;\n        this.damage = damage;\n    }\n\n    setDamageFromAPI(response: {[level: string]: string}, modifier: number) {\n        for(let key in response) {\n            console.log('damage from api', parseInt(key), response);\n            this.damage[parseInt(key)] = new DiceSet(\n                {modifier: modifier}, response[key]\n            );\n            console.log('damage variable', this.damage[1]);\n        }\n    }\n\n    toString(): string {\n        let retString = `name: ${this.name}, url: ${this.url}\\n`;\n        retString += `damage: `\n        for(let key in this.damage) {\n            retString += `{${key}: ${this.damage[key]}\\n`\n        }\n        return retString;\n    }\n\n}\n\n/**\n * data type generated from: https://transform.tools/json-to-typescript\n * Based on response from https://www.dnd5eapi.co/api/spells\n */\nexport interface SpellResponse {\n    count: number\n    results: SpellResponseResults[]\n}\n\n/**\n * Used to store individual information about each spell returned as a result from https://www.dnd5eapi.co/api/spells\n * data type generated from: https://transform.tools/json-to-typescript\n */\nexport interface SpellResponseResults {\n    index: string\n    name: string\n    level: number\n    url: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpellResponse.html":{"url":"interfaces/SpellResponse.html","title":"interface - SpellResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpellResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/spell.ts\n        \n\n\n            \n                Description\n            \n            \n                data type generated from: https://transform.tools/json-to-typescript\nBased on response from https://www.dnd5eapi.co/api/spells\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            results\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        results\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        results:         SpellResponseResults[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SpellResponseResults[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DiceSetI, DiceSet } from \"./diceset\";\n\n/**\n * Interface used to hold all necessary information about each spell\n */\nexport interface SpellI {\n    name: string\n    url: string\n    level: number\n    damage: { [level: number]: DiceSetI }\n}\n\n/**\n * The data type version of SpellI, which has additional functions to allow easier setting of values from DnD API\n */\nexport class Spell implements SpellI {\n    name: string;\n    url: string;\n    level: number;\n    damage: { [level: number]: DiceSetI; };\n    \n    constructor(name='', url='', level=1, damage={0: new DiceSet({})}) {\n        this.name = name;\n        this.url = url;\n        this.level = level;\n        this.damage = damage;\n    }\n\n    setDamageFromAPI(response: {[level: string]: string}, modifier: number) {\n        for(let key in response) {\n            console.log('damage from api', parseInt(key), response);\n            this.damage[parseInt(key)] = new DiceSet(\n                {modifier: modifier}, response[key]\n            );\n            console.log('damage variable', this.damage[1]);\n        }\n    }\n\n    toString(): string {\n        let retString = `name: ${this.name}, url: ${this.url}\\n`;\n        retString += `damage: `\n        for(let key in this.damage) {\n            retString += `{${key}: ${this.damage[key]}\\n`\n        }\n        return retString;\n    }\n\n}\n\n/**\n * data type generated from: https://transform.tools/json-to-typescript\n * Based on response from https://www.dnd5eapi.co/api/spells\n */\nexport interface SpellResponse {\n    count: number\n    results: SpellResponseResults[]\n}\n\n/**\n * Used to store individual information about each spell returned as a result from https://www.dnd5eapi.co/api/spells\n * data type generated from: https://transform.tools/json-to-typescript\n */\nexport interface SpellResponseResults {\n    index: string\n    name: string\n    level: number\n    url: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpellResponseResults.html":{"url":"interfaces/SpellResponseResults.html","title":"interface - SpellResponseResults","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpellResponseResults\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/spell.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to store individual information about each spell returned as a result from https://www.dnd5eapi.co/api/spells\ndata type generated from: https://transform.tools/json-to-typescript\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            index\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        index\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        index:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DiceSetI, DiceSet } from \"./diceset\";\n\n/**\n * Interface used to hold all necessary information about each spell\n */\nexport interface SpellI {\n    name: string\n    url: string\n    level: number\n    damage: { [level: number]: DiceSetI }\n}\n\n/**\n * The data type version of SpellI, which has additional functions to allow easier setting of values from DnD API\n */\nexport class Spell implements SpellI {\n    name: string;\n    url: string;\n    level: number;\n    damage: { [level: number]: DiceSetI; };\n    \n    constructor(name='', url='', level=1, damage={0: new DiceSet({})}) {\n        this.name = name;\n        this.url = url;\n        this.level = level;\n        this.damage = damage;\n    }\n\n    setDamageFromAPI(response: {[level: string]: string}, modifier: number) {\n        for(let key in response) {\n            console.log('damage from api', parseInt(key), response);\n            this.damage[parseInt(key)] = new DiceSet(\n                {modifier: modifier}, response[key]\n            );\n            console.log('damage variable', this.damage[1]);\n        }\n    }\n\n    toString(): string {\n        let retString = `name: ${this.name}, url: ${this.url}\\n`;\n        retString += `damage: `\n        for(let key in this.damage) {\n            retString += `{${key}: ${this.damage[key]}\\n`\n        }\n        return retString;\n    }\n\n}\n\n/**\n * data type generated from: https://transform.tools/json-to-typescript\n * Based on response from https://www.dnd5eapi.co/api/spells\n */\nexport interface SpellResponse {\n    count: number\n    results: SpellResponseResults[]\n}\n\n/**\n * Used to store individual information about each spell returned as a result from https://www.dnd5eapi.co/api/spells\n * data type generated from: https://transform.tools/json-to-typescript\n */\nexport interface SpellResponseResults {\n    index: string\n    name: string\n    level: number\n    url: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SpellsService.html":{"url":"injectables/SpellsService.html","title":"injectable - SpellsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SpellsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/spells.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This service is for http calls to get a list of all the dnd spells\napi used: https://www.dnd5eapi.co/api\napi used to test: https://jsonplaceholder.typicode.com/\nMain functions: getAllSpellsOfLevel, getAllSpells, getSpell\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                http\n                            \n                            \n                                    Protected\n                                spellsList\n                            \n                            \n                                url\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllSpells\n                            \n                            \n                                getAllSpellsOfLevel\n                            \n                            \n                                getSpell\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/spells.service.ts:82\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                injection\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllSpells\n                        \n                    \n                \n            \n            \n                \ngetAllSpells()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/spells.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Makes call to dnd5eapi to get spell list\nThe return value is a SpellResponse type which contains a list of the spells in SpellResponse.results\n\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable that when subscribed to will get all the spells in dnd up to 6th level\nThe return value is a SpellResponse type which contains a list of the spells in SpellResponse.results\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllSpellsOfLevel\n                        \n                    \n                \n            \n            \n                \ngetAllSpellsOfLevel(level: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/spells.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                level\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    spell level to filter spells\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable that when subscribed to will get a list of all spells of said level\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSpell\n                        \n                    \n                \n            \n            \n                \ngetSpell(url: string, modifier: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/spells.service.ts:53\n                        \n                    \n\n\n            \n                \n                        This function creates a SpellI by making an API request given a specific url.\nDnD API returns a specific url with each spell name when searching all spells that contains additional information about the spell.\nThis function makes a separate API call using that new url, and attempts to create a SpellI data type using the info from the API request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    url from SpellResponseResults type\n\n                                            \n                                        \n                                        \n                                                modifier\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    0\n                                            \n\n                                            \n                                                    In order to properly set spell damage, the spell modifier needs to be set based on what the user had inputted\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable that when subscribed to will give a Spell data type that holds all necessary information about the spell\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        http\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpClient\n\n                    \n                \n                    \n                        \n                                Defined in src/app/spells.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        spellsList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellI[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/spells.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new URL('https://www.dnd5eapi.co/api')\n                    \n                \n                    \n                        \n                                Defined in src/app/spells.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { SpellI, SpellResponse, Spell } from './spell';\nimport { map, Observable } from 'rxjs';\n\n/**\n * This service is for http calls to get a list of all the dnd spells\n * \n * api used: https://www.dnd5eapi.co/api\n * api used to test: https://jsonplaceholder.typicode.com/\n * \n * Main functions: getAllSpellsOfLevel, getAllSpells, getSpell\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SpellsService {\n\n  http!: HttpClient;\n  url = new URL('https://www.dnd5eapi.co/api');\n  protected spellsList: SpellI[] = [];\n\n  /**\n   * Makes call to dnd5eapi to get spell list\n   * @returns Observable that when subscribed to will get all the spells in dnd up to 6th level\n   * The return value is a SpellResponse type which contains a list of the spells in SpellResponse.results\n   */\n  getAllSpells(): Observable {\n    return this.http.get(\n      `${this.url.href}/spells?level=0&level=1&level=2&level=3&level=4&level=5&level=6`,\n      );\n  }\n\n  /**\n   * \n   * @param level spell level to filter spells\n   * @returns Observable that when subscribed to will get a list of all spells of said level\n   */\n  getAllSpellsOfLevel(level: number): Observable {\n    return this.http.get(\n      `${this.url.href}/spells?level=${level}`,\n      );\n  }\n\n  /**\n   * This function creates a SpellI by making an API request given a specific url.\n   * DnD API returns a specific url with each spell name when searching all spells that contains additional information about the spell.\n   * This function makes a separate API call using that new url, and attempts to create a SpellI data type using the info from the API request\n   * @param url url from SpellResponseResults type\n   * @param modifier In order to properly set spell damage, the spell modifier needs to be set based on what the user had inputted\n   * @returns Observable that when subscribed to will give a Spell data type that holds all necessary information about the spell\n   */\n  getSpell(url: string, modifier=0): Observable {\n    return this.http.\n      get(\n        `${this.url.origin}${url}`\n      ).pipe(map((response) => {\n        console.log('pipe response', response)\n        let spellName: string = response['name'] as unknown as string;\n        let spellLevel: number = response['level'] as unknown as number;\n        let spell = new Spell(spellName, url, spellLevel);\n        if(spellLevel == 0) {\n          spell.setDamageFromAPI(\n            {'0': response['damage']['damage_at_character_level']['1']},\n            modifier\n          )\n        } else {\n          try {\n            spell.setDamageFromAPI(\n              response['damage']['damage_at_slot_level'], \n              modifier\n            );\n          } catch(e) {\n            spell.setDamageFromAPI(\n              response['heal_at_slot_level'] as unknown as {[level: string]: string}, modifier\n            )\n          }\n        }\n        return spell;\n    }));\n  }\n\n  /**\n   * \n   * @param http injection\n   */\n  constructor(http: HttpClient) { \n    this.http = http;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/StepperComponent.html":{"url":"components/StepperComponent.html","title":"component - StepperComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  StepperComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/stepper/stepper.component.ts\n\n\n\n    \n        Description\n    \n    \n        https://v5.material.angular.io/guide/creating-a-custom-form-field-control\nguide here in case I want to change my mind and just make one using angular\nhttps://www.youtube.com/watch?v=xTcJQaWiJ2c&list=PLw5h0DiJ-9PDF6TTr0J7HmKK_7t6XTPuN \n\n    \n\n\n    \n        Implements\n    \n    \n                ControlValueAccessor\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                {\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => StepperComponent), multi: true,\n}\n                \n            \n\n\n            \n                selector\n                app-stepper\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            FormsModule\n                            MatButtonModule\n                            MatIconModule\n                            MatFormFieldModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./stepper.component.html\n            \n\n\n\n            \n                styleUrl\n                ./stepper.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                decrement\n                            \n                            \n                                increment\n                            \n                            \n                                onChange\n                            \n                            \n                                onTouch\n                            \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                    Optional\n                                setDisabledState\n                            \n                            \n                                updateValue\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        decrement\n                        \n                    \n                \n            \n            \n                \ndecrement()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        increment\n                        \n                    \n                \n            \n            \n                \nincrement()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onChange\n                        \n                    \n                \n            \n            \n                \nonChange(value: number | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        number | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onTouch\n                        \n                    \n                \n            \n            \n                \nonTouch()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:32\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerOnChange\n                        \n                    \n                \n            \n            \n                \nregisterOnChange(fn: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerOnTouched\n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(fn: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        setDisabledState\n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                isDisabled\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateValue\n                        \n                    \n                \n            \n            \n                \nupdateValue(newValue: number | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newValue\n                                            \n                                                        number | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        writeValue\n                        \n                    \n                \n            \n            \n                \nwriteValue(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/stepper/stepper.component.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\n\n/**\n * https://v5.material.angular.io/guide/creating-a-custom-form-field-control\n * guide here in case I want to change my mind and just make one using angular\n * https://www.youtube.com/watch?v=xTcJQaWiJ2c&list=PLw5h0DiJ-9PDF6TTr0J7HmKK_7t6XTPuN  StepperComponent),\n      multi: true,\n    }\n  ],\n  templateUrl: './stepper.component.html',\n  styleUrl: './stepper.component.scss'\n})\nexport class StepperComponent implements ControlValueAccessor {\n  value: number | null = 0;\n  onChange(value: number | null) {\n    this.value = value;\n  }\n  onTouch() {}\n  increment() {\n    this.updateValue(this.value !== null ? this.value + 1 : 1);\n  }\n  decrement() {\n    if (this.value ?? 0 >= 1) {\n      this.updateValue(this.value != null ? this.value - 1 : 0);\n    } else if (this.value ?? 1 \n    \n\n    \n        \n\n  -\n  \n  +\n -->\n\n\n\n  \n    remove\n  \n  \n  \n    add\n  \n -->\n\n\n\n  \n    -\n     -->\n  \n  \n  \n    +\n     -->\n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  -    + -->      remove          add   -->      -     -->          +     -->  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'StepperComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/attack-rolls/attack-rolls.component.ts\n            \n            component\n            AttackRollsComponent\n            \n                25 %\n                (5/20)\n            \n        \n        \n            \n                \n                src/app/character-sheet/character-sheet.component.ts\n            \n            component\n            CharacterSheetComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/characterstats.ts\n            \n            interface\n            CharacterStats\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/dice-bonus-form/dice-bonus-form.component.ts\n            \n            component\n            DiceBonusFormComponent\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/dice-calculations.service.ts\n            \n            injectable\n            DiceCalculationsService\n            \n                81 %\n                (18/22)\n            \n        \n        \n            \n                \n                src/app/diceset.ts\n            \n            class\n            DiceSet\n            \n                6 %\n                (1/15)\n            \n        \n        \n            \n                \n                src/app/diceset.ts\n            \n            interface\n            DiceResults\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/diceset.ts\n            \n            interface\n            DiceSetI\n            \n                18 %\n                (2/11)\n            \n        \n        \n            \n                \n                src/app/die-roll-results-table/die-roll-results-table.component.ts\n            \n            component\n            DieRollResultsTableComponent\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/dropdown.ts\n            \n            interface\n            DropdownGroup\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/dropdown.ts\n            \n            interface\n            DropdownItem\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/navbar/navbar.component.ts\n            \n            component\n            NavbarComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/not-found/not-found.component.ts\n            \n            component\n            NotFoundComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/overlay/overlay.component.ts\n            \n            component\n            OverlayComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/skill-check/skill-check.component.ts\n            \n            component\n            SkillCheckComponent\n            \n                5 %\n                (1/18)\n            \n        \n        \n            \n                \n                src/app/spell.ts\n            \n            class\n            Spell\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/app/spell.ts\n            \n            interface\n            SpellI\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/spell.ts\n            \n            interface\n            SpellResponse\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/spell.ts\n            \n            interface\n            SpellResponseResults\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/spells.service.ts\n            \n            injectable\n            SpellsService\n            \n                37 %\n                (3/8)\n            \n        \n        \n            \n                \n                src/app/stepper/stepper.component.ts\n            \n            component\n            StepperComponent\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                        src/mocks/mockSpells.ts\n            \n            variable\n            mockSpellResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/mocks/mockSpells.ts\n            \n            variable\n            mockSpellResult0\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/mocks/mockSpells.ts\n            \n            variable\n            mockSpellResult1\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^18.2.4\n        \n            @angular/cdk : ^18.2.4\n        \n            @angular/common : ^18.2.4\n        \n            @angular/compiler : ^18.2.4\n        \n            @angular/core : ^18.2.4\n        \n            @angular/fire : ^18.0.1\n        \n            @angular/forms : ^18.2.4\n        \n            @angular/material : ^18.2.4\n        \n            @angular/platform-browser : ^18.2.4\n        \n            @angular/platform-browser-dynamic : ^18.2.4\n        \n            @angular/router : ^18.2.4\n        \n            @npmcli/package-json : ^5.2.0\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.14.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Advantage   (src/.../diceset.ts)\n                        \n                        \n                            CharacterClass   (src/.../characterstats.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/diceset.ts\n    \n        \n            \n                \n                    \n                        \n                        Advantage\n                    \n                \n                    \n                        \n                            Enum to track whether to calculate skill check possibility with advantage, disadvantage, or no just a flat roll\n\n                        \n                    \n                        \n                            \n                                 None\n                            \n                        \n                        \n                            \n                                Value : 0\n                            \n                        \n                        \n                            \n                                 Advantage\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 Disadvantage\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n                        \n                            \n                                 SavageAttacker\n                            \n                        \n                        \n                            \n                                Value : 3\n                            \n                        \n            \n        \n\n    src/app/characterstats.ts\n    \n        \n            \n                \n                    \n                        \n                        CharacterClass\n                    \n                \n                        \n                            \n                                 Barbarian\n                            \n                        \n                        \n                            \n                                 Bard\n                            \n                        \n                        \n                            \n                                 Cleric\n                            \n                        \n                        \n                            \n                                 Druid\n                            \n                        \n                        \n                            \n                                 Fighter\n                            \n                        \n                        \n                            \n                                 Monk\n                            \n                        \n                        \n                            \n                                 Paladin\n                            \n                        \n                        \n                            \n                                 Ranger\n                            \n                        \n                        \n                            \n                                 Rogue\n                            \n                        \n                        \n                            \n                                 Sorcerer\n                            \n                        \n                        \n                            \n                                 Warlock\n                            \n                        \n                        \n                            \n                                 Wizard\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAngularBg3Cheats\nPages\nServices\n\ndice-calculations.service.ts -- This holds all the functions used in dice calculations\nspells.service.ts -- This holds all the functions used to access DnD API to get spell information\n\nData Types\n\nspell.ts -- This holds all the data types used to organize data gotten from API\ndiceset.ts -- This holds all the data types used to organize data related to dice rolls\n\nComponents\n\nskill-check.component.ts -- Skill Check Link.\nIt contains frontend for calculating likelihood of skill check suceeeding.\nattack-rolls.component.ts -- Attack Rolls Link.\nIt contains frontend for calculating spell damage and likelihood.\nstepper.component.ts -- Modified form input (type=\"number\", but with + and - buttons on the sides)\n\nAdditional Websites Used as Reference\n\nhttps://anydice.com/ -- Used to create\nhttps://virtualdiceroller.app/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    10 Components\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            mockSpellResponse   (src/.../mockSpells.ts)\n                        \n                        \n                            mockSpellResult0   (src/.../mockSpells.ts)\n                        \n                        \n                            mockSpellResult1   (src/.../mockSpells.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideRouter(routes), provideAnimationsAsync(), provideHttpClient(), provideFirebaseApp(() => initializeApp({\"projectId\":\"test-00-c77de\",\"appId\":\"1:864287131419:web:4b60183cca62591db7b5be\",\"storageBucket\":\"test-00-c77de.firebasestorage.app\",\"apiKey\":\"AIzaSyDP4kd1doMBPfOSirbE7I6DYLjMbbNbTAY\",\"authDomain\":\"test-00-c77de.firebaseapp.com\",\"messagingSenderId\":\"864287131419\"})), provideAuth(() => getAuth())\n  ]\n}\n                    \n                \n\n\n        \n    \n\n    src/mocks/mockSpells.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockSpellResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellResponse\n\n                    \n                \n                \n                    \n                        Default value : {\n    count: 1,\n    results: [mockSpellResult0, mockSpellResult1]\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mockSpellResult0\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellResponseResults\n\n                    \n                \n                \n                    \n                        Default value : {\n    index: '0',\n    name: 'cantrip',\n    level: 0,\n    url: '/api/spells/cantrip'\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mockSpellResult1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellResponseResults\n\n                    \n                \n                \n                    \n                        Default value : {\n    index: '1',\n    name: 'level 1',\n    level: 1,\n    url: '/api/spells/level-1'\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
