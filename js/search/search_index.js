var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.297,1,0.905]],["body/components/AppComponent.html",[0,0.523,1,1.525,2,1.639,3,0.357,4,0.357,5,1.125,6,1.125,7,1.125,8,0.308,9,2.663,10,0.779,11,4.318,12,3.581,13,2.445,14,4.318,15,3.097,16,4.318,17,3.581,18,3.581,19,4.318,20,4.318,21,3.581,22,1.125,23,2.123,24,2.123,25,3.581,26,1.513,27,1.513,28,1.513,29,4.879,30,4.318,31,4.318,32,4.047,33,4.047,34,2.491,35,3.499,36,4.047,37,1.513,38,4.318,39,1.513,40,4.318,41,0.308,42,0.48,43,4.879,44,0.357,45,0.036,46,0.938,47,0.856,48,0.641,49,2.734,50,3.581,51,3.581,52,1.028,53,3.211,54,1.263,55,3.211,56,0.938,57,3.211,58,2.663,59,2.663,60,2.663,61,1.639,62,2.302,63,2.663,64,0.357,65,0.357,66,3.581,67,1.184,68,3.581,69,1.075,70,1.657,71,1.561,72,1.818,73,3.097,74,1.125,75,1.513,76,1.513,77,1.125,78,1.828,79,1.125,80,0.777,81,1.125,82,0.938,83,1.125,84,0.938,85,1.125,86,1.125,87,0.938,88,0.938,89,1.125,90,0.938,91,0.938,92,0.641,93,0.027,94,1.125,95,0.938,96,1.125,97,0.938,98,1.125,99,0.938,100,1.125,101,0.938,102,1.125,103,0.938,104,1.125,105,1.125,106,1.125,107,0.024]],["title/components/AttackRollsComponent.html",[0,0.297,82,0.905]],["body/components/AttackRollsComponent.html",[0,0.371,1,0.425,2,0.696,3,0.162,4,0.162,5,0.509,6,0.509,7,0.509,8,0.14,10,0.578,15,1.708,21,1.976,22,0.509,23,1.844,24,1.784,26,0.835,27,0.835,28,0.835,34,1.545,37,0.835,39,0.835,41,0.421,42,0.265,44,0.566,45,0.036,46,1.212,47,1.105,48,1.064,52,1.779,54,1.176,56,0.425,61,0.742,64,0.162,65,0.162,67,0.937,69,0.32,71,1.559,72,1.746,74,0.509,75,0.835,76,0.835,77,0.509,78,1.226,79,0.509,80,0.746,81,0.509,82,1.023,83,0.509,84,0.425,85,0.509,86,0.509,87,1.212,88,0.884,89,0.509,90,0.696,91,0.696,92,0.604,93,0.022,94,0.509,95,0.425,96,0.509,97,0.425,98,0.509,99,0.425,100,0.509,101,0.425,102,0.509,103,0.425,104,0.509,105,0.509,106,0.509,107,0.013,108,4.646,109,4.646,110,1.042,111,2.382,112,1.976,113,1.976,114,1.508,115,2.382,116,2.246,117,1.708,118,2.382,119,1.619,120,0.835,121,2.51,122,2.17,123,2.17,124,1.916,125,2.17,126,3.026,127,1.916,128,2.382,129,2.382,130,1.102,131,2.51,132,3.026,133,4.379,134,3.861,135,2.51,136,4.379,137,3.026,138,3.026,139,2.626,140,2.51,141,1.003,142,3.499,143,3.499,144,3.499,145,2.382,146,2.902,147,2.382,148,2.509,149,3.499,150,1.713,151,1.453,152,1.453,153,2.382,154,3.492,155,4.147,156,3.44,157,1.713,158,1.602,159,1.786,160,3.499,161,3.499,162,2.382,163,2.382,164,2.05,165,1.816,166,2.236,167,1.453,168,2.382,169,2.382,170,1.508,171,2.902,172,1.349,173,1.453,174,2.382,175,1.592,176,1.453,177,1.976,178,2.382,179,2.382,180,1.976,181,1.976,182,1.102,183,1.003,184,3.861,185,1.508,186,2.382,187,1.453,188,1.12,189,2.382,190,1.473,191,3.925,192,1.453,193,1.976,194,1.453,195,1.453,196,2.382,197,0.762,198,1.102,199,1.102,200,1.216,201,0.762,202,2.51,203,1.453,204,1.816,205,2.17,206,2.773,207,2.382,208,1.161,209,2.382,210,2.382,211,1.453,212,0.635,213,2.382,214,1.453,215,1.453,216,2.382,217,1.453,218,1.916,219,1.708,220,1.453,221,1.453,222,1.453,223,1.274,224,1.453,225,2.382,226,1.453,227,1.976,228,1.976,229,2.51,230,1.453,231,0.823,232,0.742,233,1.976,234,1.453,235,1.453,236,1.453,237,1.042,238,2.382,239,1.453,240,0.92,241,0.558,242,0.742,243,1.042,244,1.042,245,1.453,246,0.92,247,1.042,248,0.92,249,0.92,250,1.206,251,0.933,252,1.042,253,0.823,254,1.453,255,1.453,256,1.453,257,1.976,258,1.453,259,1.453,260,1.453,261,1.453,262,1.892,263,2.382,264,1.453,265,1.453,266,1.453,267,2.382,268,2.382,269,1.453,270,2.382,271,1.453,272,2.382,273,1.453,274,2.382,275,1.453,276,2.382,277,1.453,278,1.453,279,3.026,280,1.453,281,1.453,282,1.453,283,1.453,284,1.453,285,1.206,286,0.968,287,2.382,288,1.453,289,0.823,290,1.453,291,1.453,292,1.453,293,1.453,294,3.026,295,3.026,296,1.453,297,1.453,298,1.453,299,1.453,300,1.453,301,1.453,302,1.453,303,1.453,304,1.453,305,1.206,306,1.206,307,1.206,308,1.206,309,1.206,310,2.51,311,1.453,312,1.453,313,2.382,314,1.453,315,1.206,316,1.453,317,2.382,318,1.453,319,2.382,320,1.453,321,1.453,322,1.453,323,1.453,324,1.453,325,1.453,326,1.453,327,1.206,328,1.453,329,1.453,330,1.453,331,1.453,332,1.453,333,1.453,334,1.453,335,1.453,336,1.453,337,2.382,338,2.382,339,1.976,340,2.626,341,2.382,342,2.382,343,2.382,344,1.976]],["title/components/CharacterSheetComponent.html",[0,0.297,84,0.905]],["body/components/CharacterSheetComponent.html",[0,0.512,1,1.128,2,1.423,3,0.429,4,0.429,5,1.353,6,1.353,7,1.353,8,0.371,22,1.353,23,2.181,24,2.181,26,1.706,27,1.706,28,1.353,37,1.706,39,1.706,45,0.035,54,0.851,56,1.128,64,0.429,65,0.429,67,0.937,69,0.851,71,1.236,74,1.353,75,1.706,76,1.706,77,1.353,78,1.963,79,1.353,80,0.876,81,1.353,82,1.128,83,1.353,84,1.637,85,2.141,86,1.353,87,1.128,88,1.128,89,1.353,90,1.128,91,1.128,92,0.77,93,0.03,94,1.353,95,1.128,96,1.353,97,1.128,98,1.353,99,1.128,100,1.353,101,1.128,102,1.353,103,1.128,104,1.353,105,1.353,106,1.353,107,0.027,345,3.203,346,3.203,347,3.203,348,5.601,349,4.869,350,4.869,351,4.869]],["title/interfaces/CharacterStats.html",[352,0.445,353,2.221]],["body/interfaces/CharacterStats.html",[3,0.449,4,0.449,8,0.387,41,0.387,42,0.557,44,0.679,45,0.035,64,0.557,93,0.028,107,0.028,164,2.395,212,1.712,352,0.58,353,3.589,354,1.549,355,2.893,356,5.689,357,5.689,358,5.689,359,5.689,360,5.689,361,5.689,362,5.689,363,3.347,364,3.347,365,3.347,366,3.347,367,3.347,368,3.347,369,3.347,370,3.347,371,3.347,372,3.347,373,3.347,374,3.347,375,3.347,376,3.347]],["title/components/DiceBonusFormComponent.html",[0,0.297,87,0.905]],["body/components/DiceBonusFormComponent.html",[0,0.528,1,0.605,2,0.92,3,0.23,4,0.23,5,0.725,6,0.725,7,0.725,8,0.199,10,0.502,13,1.784,22,0.725,23,1.954,24,1.954,26,1.104,27,1.693,28,1.104,37,1.104,39,1.104,41,0.199,42,0.35,44,0.559,45,0.036,46,0.92,47,1.016,48,0.761,52,1.856,54,0.94,56,0.605,64,0.23,65,0.23,67,1.369,69,0.841,70,1.209,71,1.221,72,1.326,74,0.725,75,1.104,76,1.104,77,0.725,78,1.494,79,0.725,80,0.904,81,0.725,82,0.605,83,0.725,84,0.605,85,0.725,86,0.725,87,1.246,88,1.833,89,0.725,90,0.605,91,0.605,92,0.413,93,0.021,94,0.725,95,0.605,96,0.725,97,0.605,98,0.725,99,0.605,100,0.725,101,0.605,102,0.725,103,1.246,104,0.725,105,0.725,106,0.725,107,0.018,114,1.995,124,2.415,127,2.415,141,1.326,148,3.057,157,2.414,158,1.494,165,1.928,166,2.564,182,2.122,183,1.931,199,2.324,201,1.008,204,1.76,205,2.735,206,3.482,212,1.533,232,1.056,242,1.056,246,3.698,248,1.31,286,1.546,377,4.844,378,1.484,379,3.15,380,2.613,381,2.613,382,2.613,383,3.15,384,3.15,385,3.15,386,2.613,387,3.813,388,3.15,389,4.262,390,3.15,391,3.15,392,3.813,393,4.262,394,2.613,395,3.813,396,3.602,397,3.15,398,3.813,399,2.844,400,2.844,401,2.844,402,2.932,403,2.932,404,1.716,405,2.069,406,2.069,407,2.069,408,2.069,409,2.069,410,2.069,411,2.069,412,2.069,413,2.069,414,2.069,415,2.069,416,4.586,417,2.069,418,2.069,419,2.069,420,2.069,421,2.069,422,2.069,423,2.069,424,2.069,425,2.069,426,2.069,427,2.069,428,2.069,429,2.069,430,2.069,431,2.069,432,2.069,433,1.784,434,2.069,435,2.069,436,2.069,437,5.409,438,2.069,439,2.069,440,2.069,441,2.069,442,2.069,443,2.069,444,2.069,445,2.069,446,2.069,447,2.069,448,2.069,449,2.069,450,2.069,451,2.069,452,2.069,453,2.069,454,4.007,455,1.464,456,2.069,457,2.069,458,2.069,459,2.069]],["title/interfaces/DiceResults.html",[190,1.303,352,0.445]],["body/interfaces/DiceResults.html",[3,0.328,4,0.328,8,0.283,10,0.715,41,0.283,42,0.453,44,0.623,45,0.036,47,0.786,48,0.588,64,0.519,65,0.519,67,1.385,69,0.65,70,1.131,72,2.119,92,1.005,93,0.028,107,0.023,120,1.033,130,1.364,158,1.427,170,2.579,185,2.579,188,1.749,190,1.715,199,1.364,201,1.611,208,1.131,212,1.704,251,1.545,262,2.031,286,0.943,352,0.724,354,1.131,399,2.306,400,2.306,401,2.306,402,2.306,403,2.306,455,1.563,460,1.669,461,1.791,462,1.885,463,1.885,464,2.579,465,3.611,466,3.611,467,3.611,468,4.343,469,2.921,470,2.306,471,2.851,472,2.579,473,3.347,474,2.921,475,3.611,476,3.611,477,2.921,478,2.921,479,2.306,480,2.921,481,2.579,482,2.921,483,2.921,484,2.113,485,2.113,486,2.921,487,1.669,488,2.956,489,2.113,490,2.306,491,2.851,492,2.113,493,1.669,494,1.866,495,2.921,496,2.113,497,1.866,498,2.921,499,1.866,500,1.866,501,1.866,502,1.866,503,1.866,504,1.669,505,2.113,506,2.113,507,2.113,508,2.113,509,2.113,510,2.113,511,2.113,512,2.113,513,1.866]],["title/classes/DiceSet.html",[65,0.344,251,0.825]],["body/classes/DiceSet.html",[3,0.295,4,0.295,8,0.255,10,0.644,41,0.255,42,0.421,44,0.667,45,0.036,46,1.289,47,1.449,48,1.054,52,1.907,64,0.49,65,0.565,67,1.282,69,0.585,70,1.018,72,1.593,80,0.477,92,0.755,93,0.025,107,0.021,120,1.326,130,2.04,141,1.593,150,1.502,158,1.545,165,1.452,170,1.68,182,1.228,183,1.117,185,1.68,188,1.779,190,1.117,199,1.751,201,1.74,208,1.452,212,1.687,251,1.548,262,2.035,286,0.849,352,0.634,399,2.722,400,2.722,401,2.722,402,2.722,403,2.722,455,1.845,460,1.502,461,1.692,462,1.228,463,1.228,464,1.68,465,1.903,466,1.903,467,1.903,468,3.789,469,1.903,470,1.502,471,2.142,472,1.68,473,2.713,474,1.903,475,2.713,476,2.713,477,1.903,478,1.903,479,1.502,480,1.903,481,1.68,482,1.903,483,1.903,484,1.903,485,1.903,486,3.447,487,1.502,488,3.218,489,1.903,490,2.722,491,3.079,492,2.713,493,2.142,494,2.396,495,3.447,496,2.713,497,2.396,498,3.447,499,2.396,500,2.396,501,2.396,502,2.396,503,2.396,504,2.142,505,1.903,506,1.903,507,1.903,508,1.903,509,1.903,510,1.903,511,1.903,512,1.903,513,1.68,514,1.903,515,2.497,516,2.653,517,3.783,518,2.653,519,2.653,520,2.653,521,2.653,522,2.653,523,2.653,524,2.653,525,2.653,526,2.653,527,2.653,528,2.653,529,2.653,530,2.653,531,2.653,532,2.653]],["title/interfaces/DiceSetI.html",[188,0.991,352,0.445]],["body/interfaces/DiceSetI.html",[3,0.306,4,0.306,8,0.264,10,0.667,13,1.556,41,0.264,42,0.431,44,0.666,45,0.036,47,0.732,48,0.774,64,0.5,65,0.5,67,1.403,69,0.855,70,1.489,72,1.633,91,0.803,92,0.774,93,0.025,107,0.022,120,0.963,130,1.272,158,1.575,165,1.055,170,1.74,183,2.485,185,1.74,188,1.711,190,1.157,197,0.879,199,1.272,201,1.758,208,1.055,212,1.704,251,1.495,262,1.999,286,0.879,352,0.702,354,1.055,399,2.916,400,2.916,401,2.916,402,2.916,403,2.916,455,1.977,460,1.556,461,1.725,462,1.272,463,1.272,464,1.74,465,1.971,466,1.971,467,1.971,468,3.833,469,1.971,470,1.556,471,2.196,472,1.74,473,3.224,474,1.971,475,2.781,476,2.781,477,1.971,478,1.971,479,1.556,480,1.971,481,1.74,482,1.971,483,2.781,484,2.781,485,3.224,486,3.693,487,2.545,488,3.479,489,2.781,490,2.916,491,3.23,492,1.971,493,1.556,494,1.74,495,2.781,496,1.971,497,1.74,498,2.781,499,2.456,500,2.456,501,2.456,502,2.456,503,2.456,504,2.196,505,1.971,506,1.971,507,1.971,508,1.971,509,1.971,510,1.971,511,1.971,512,1.971,513,1.74,533,2.748,534,1.157,535,2.748,536,2.748,537,2.748,538,2.748,539,2.748,540,2.748,541,2.748,542,1.74,543,2.748]],["title/components/DieRollResultsTableComponent.html",[0,0.297,90,0.905]],["body/components/DieRollResultsTableComponent.html",[0,0.486,1,0.765,2,1.095,3,0.291,4,0.291,5,0.917,6,0.917,7,0.917,8,0.251,10,0.635,18,3.108,22,0.917,23,2.05,24,2.05,26,1.313,27,1.313,28,1.313,37,1.313,39,1.313,41,0.251,42,0.417,44,0.417,45,0.036,47,1.166,48,1.081,52,1.401,54,1.114,56,0.765,64,0.291,65,0.291,67,1.159,69,0.965,70,1.438,71,1.401,72,2.011,74,0.917,75,1.313,76,1.313,77,0.917,78,1.674,79,0.917,80,0.674,81,0.917,82,0.765,83,0.917,84,0.765,85,0.917,86,0.917,87,0.765,88,0.765,89,0.917,90,1.396,91,1.583,92,1.252,93,0.034,94,0.917,95,0.765,96,0.917,97,0.765,98,0.917,99,0.765,100,0.917,101,0.765,102,0.917,103,0.765,104,0.917,105,0.917,106,0.917,107,0.021,122,3.139,190,2.214,197,1.199,212,0.999,218,1.658,219,2.687,231,1.482,232,1.336,249,3.026,251,1.166,252,1.877,380,3.108,394,3.108,433,2.122,470,2.705,471,3.137,472,2.373,479,2.705,481,3.624,534,1.577,542,2.373,544,3.963,545,1.877,546,3.108,547,3.772,548,2.373,549,3.108,550,3.747,551,3.747,552,3.013,553,4.363,554,3.747,555,3.747,556,3.747,557,3.747,558,3.747,559,3.108,560,4.376,561,3.747,562,3.747,563,4.376,564,4.778,565,3.747,566,2.617,567,2.617,568,4.376,569,4.778,570,2.617,571,2.617,572,2.617,573,3.747,574,3.747,575,3.747,576,3.747,577,2.617]],["title/interfaces/DropdownGroup.html",[352,0.445,578,1.961]],["body/interfaces/DropdownGroup.html",[3,0.509,4,0.509,8,0.439,41,0.439,42,0.601,44,0.601,45,0.035,46,1.735,48,0.913,64,0.601,93,0.03,107,0.03,352,0.777,354,1.756,396,3.281,578,3.42,579,3.281,580,4.257,581,4.924,582,3.759]],["title/interfaces/DropdownItem.html",[352,0.445,582,1.961]],["body/interfaces/DropdownItem.html",[3,0.511,4,0.511,8,0.441,41,0.441,42,0.602,44,0.602,45,0.035,46,1.737,48,1.186,64,0.602,93,0.03,107,0.03,352,0.779,354,1.763,396,4.263,578,2.909,579,3.295,580,3.295,581,3.811,582,3.645]],["title/components/NavbarComponent.html",[0,0.297,95,0.905]],["body/components/NavbarComponent.html",[0,0.464,1,0.92,2,1.246,3,0.35,4,0.35,5,1.104,6,1.104,7,1.104,8,0.302,15,3.057,22,1.104,23,2.117,24,2.117,26,1.494,27,1.494,28,1.494,32,4.007,33,4.007,34,2.466,35,3.465,36,4.007,37,1.494,39,1.494,41,0.302,42,0.474,44,0.35,45,0.036,47,1.136,48,0.851,49,2.699,50,3.535,51,3.535,52,1.364,54,1.31,56,0.92,59,2.612,60,2.612,61,1.608,62,2.259,63,2.612,64,0.35,65,0.35,66,4.294,67,0.764,69,0.694,71,1.008,74,1.104,75,1.494,76,1.494,77,1.104,78,1.814,79,1.104,80,0.767,81,1.104,82,0.92,83,1.104,84,0.92,85,1.104,86,1.104,87,0.92,88,0.92,89,1.104,90,0.92,91,0.92,92,0.629,93,0.027,94,1.104,95,1.513,96,1.104,97,0.92,98,1.104,99,0.92,100,1.104,101,0.92,102,1.104,103,0.92,104,1.104,105,1.104,106,1.104,107,0.024,112,4.625,130,2.236,154,3.465,208,1.636,231,1.784,232,1.608,237,2.259,240,1.995,253,2.414,339,3.535,583,2.612,584,4.831,585,4.262,586,4.262,587,5.177,588,5.409,589,4.262,590,3.15,591,4.262,592,4.262,593,4.262,594,4.262,595,4.831,596,3.15,597,3.15,598,3.15,599,3.15,600,3.057]],["title/components/NotFoundComponent.html",[0,0.297,97,0.905]],["body/components/NotFoundComponent.html",[0,0.516,1,1.145,2,1.436,3,0.436,4,0.436,5,1.373,6,1.373,7,1.373,8,0.376,12,4.076,22,1.373,23,2.185,24,2.185,26,1.722,27,1.722,28,1.373,37,1.722,39,1.722,45,0.035,54,0.863,56,1.145,64,0.436,65,0.436,67,0.951,69,0.863,71,1.254,74,1.373,75,1.722,76,1.722,77,1.373,78,1.973,79,1.373,80,0.884,81,1.373,82,1.145,83,1.373,84,1.145,85,1.373,86,1.373,87,1.145,88,1.145,89,1.373,90,1.145,91,1.145,92,0.782,93,0.03,94,1.373,95,1.145,96,1.373,97,1.645,98,1.373,99,1.145,100,1.373,101,1.145,102,1.373,103,1.145,104,1.373,105,1.373,106,1.373,107,0.028,601,3.249,602,3.249,603,3.249,604,4.67,605,4.914,606,4.914]],["title/components/OverlayComponent.html",[0,0.297,99,0.905]],["body/components/OverlayComponent.html",[0,0.31,1,0.468,2,0.753,3,0.178,4,0.178,5,0.561,6,0.561,7,0.561,8,0.154,22,0.561,23,1.834,24,1.834,26,0.903,27,0.903,28,0.903,34,1.651,37,0.903,39,0.903,41,0.154,42,0.287,44,0.178,45,0.036,47,0.988,48,0.739,52,1.3,54,1.005,56,0.468,61,0.818,64,0.178,65,0.178,67,0.389,69,0.353,71,0.513,74,0.561,75,0.903,76,0.903,77,0.561,78,1.298,79,0.561,80,1.157,81,0.561,82,0.468,83,0.561,84,0.468,85,0.561,86,0.561,87,0.468,88,0.468,89,0.561,90,0.468,91,0.468,92,0.32,93,0.018,94,0.561,95,0.468,96,0.561,97,0.468,98,0.561,99,1.083,100,0.561,101,0.468,102,0.561,103,0.468,104,0.561,105,0.561,106,0.561,107,0.014,123,2.319,124,2.047,125,2.319,127,2.047,130,1.496,141,1.085,165,0.615,166,1.316,197,0.825,204,1.662,232,0.818,242,0.818,243,1.149,244,1.149,248,1.014,340,1.632,404,4.168,513,1.632,607,1.328,608,2.577,609,3.233,610,2.577,611,2.577,612,3.233,613,3.233,614,4.061,615,4.561,616,3.705,617,1.601,618,2.577,619,2.577,620,3.956,621,2.577,622,4.472,623,2.577,624,3.705,625,2.577,626,3.705,627,4.743,628,2.577,629,2.577,630,2.577,631,2.577,632,5.025,633,3.705,634,1.601,635,2.577,636,1.601,637,2.577,638,1.601,639,2.577,640,6.421,641,2.577,642,2.577,643,2.577,644,2.577,645,2.577,646,2.577,647,2.577,648,2.577,649,2.577,650,2.577,651,2.577,652,2.577,653,2.577,654,2.577,655,2.577,656,2.577,657,2.577,658,2.577,659,2.577,660,2.137,661,2.577,662,2.577,663,2.577,664,2.577,665,2.577,666,2.577,667,2.577,668,2.577,669,2.577,670,2.577,671,2.577,672,2.577,673,2.137,674,2.577,675,2.577,676,2.577,677,2.577,678,2.577,679,2.577,680,2.577,681,2.577,682,2.577,683,2.577,684,2.577,685,2.577,686,2.577,687,4.338,688,2.577,689,2.577,690,2.577,691,2.577,692,2.577,693,2.577,694,2.577,695,2.577,696,2.577,697,2.577,698,2.577,699,2.577,700,2.577,701,2.577,702,2.577,703,2.577,704,2.577,705,2.577,706,2.577,707,2.577,708,2.577,709,2.577,710,2.577,711,2.577,712,2.577,713,2.577,714,2.577,715,3.705,716,3.705,717,2.577,718,3.705,719,2.577,720,2.577,721,2.577,722,2.577,723,2.577,724,2.577,725,2.577,726,2.577,727,2.577,728,2.577,729,2.577,730,2.577,731,2.577,732,2.577,733,2.577,734,2.577,735,2.577,736,2.577,737,2.577,738,3.705,739,2.577,740,2.577,741,2.577,742,2.577,743,2.577,744,2.577,745,2.577,746,2.577,747,2.577,748,2.577,749,2.577,750,2.577,751,3.705,752,2.577,753,2.577,754,2.577,755,2.577,756,2.577,757,2.577,758,2.577,759,2.577,760,2.577,761,1.601,762,1.601,763,1.328,764,1.601,765,1.601,766,1.601,767,2.577,768,1.601,769,2.577,770,1.601,771,2.137,772,2.577,773,2.577,774,2.577,775,2.577,776,1.601,777,2.577,778,1.601,779,2.577,780,2.137,781,2.577,782,2.577,783,2.137,784,1.601,785,1.601,786,1.601,787,1.601,788,1.601]],["title/components/SkillCheckComponent.html",[0,0.297,101,0.905]],["body/components/SkillCheckComponent.html",[0,0.393,1,0.475,2,0.762,3,0.181,4,0.181,5,0.569,6,0.569,7,0.569,8,0.156,10,0.394,22,0.569,23,1.841,24,1.841,26,0.913,27,0.913,28,0.913,34,1.666,37,0.913,39,0.913,41,0.313,42,0.29,44,0.486,45,0.036,47,1.375,48,1.124,52,1.788,54,1.158,56,0.475,61,1.331,64,0.181,65,0.181,67,1.113,69,1.084,70,1.57,71,0.52,74,0.569,75,0.913,76,0.913,77,0.569,78,1.309,79,0.569,80,0.908,81,0.569,82,0.475,83,0.569,84,0.475,85,0.569,86,0.569,87,1.092,88,0.954,89,0.569,90,0.762,91,0.762,92,0.651,93,0.026,94,0.569,95,0.475,96,0.569,97,0.475,98,0.569,99,0.475,100,0.569,101,1.092,102,0.569,103,0.475,104,0.569,105,0.569,106,0.569,107,0.015,113,2.708,114,1.651,120,0.913,121,2.708,122,2.341,123,2.341,124,2.067,125,2.341,127,2.067,130,1.206,131,2.708,135,2.708,140,2.708,141,1.097,146,3.099,148,2.679,150,1.848,157,1.848,165,1.57,166,1.907,177,1.347,182,1.511,183,1.097,188,1.045,190,1.573,191,3.392,193,2.162,197,0.834,199,0.752,202,2.708,204,2.028,205,2.933,206,1.029,208,1.83,218,2.067,219,1.869,227,2.162,228,2.162,229,2.708,231,0.92,232,0.829,233,1.347,242,0.829,243,1.165,244,1.165,246,1.029,247,1.165,248,1.029,249,1.029,250,1.347,251,1.164,252,1.165,253,2.115,257,1.347,262,1.608,286,0.834,305,1.347,306,1.347,307,1.347,308,1.347,309,1.347,310,1.347,315,1.347,327,1.347,340,2.366,344,3.099,399,1.476,400,1.476,401,1.476,402,1.476,403,1.476,433,1.476,454,4.357,470,1.848,487,1.476,488,2.366,490,2.115,491,2.921,497,2.765,499,1.651,504,1.476,580,1.165,600,2.679,620,1.869,622,3.099,660,3.805,673,3.622,763,1.347,783,1.347,789,4.673,790,4.673,791,1.165,792,2.606,793,3.736,794,2.606,795,2.162,796,2.606,797,3.264,798,2.606,799,2.606,800,3.264,801,3.264,802,3.264,803,3.264,804,4.09,805,4.09,806,3.264,807,3.264,808,2.606,809,2.606,810,3.736,811,1.624,812,2.606,813,1.624,814,1.624,815,2.606,816,1.624,817,2.606,818,1.347,819,1.624,820,1.624,821,1.624,822,3.736,823,1.624,824,3.736,825,1.624,826,1.624,827,1.624,828,2.162,829,2.162,830,1.624,831,1.624,832,1.624,833,1.624,834,2.606,835,2.606,836,2.606,837,2.606,838,2.606,839,1.624,840,1.624,841,1.624,842,1.624,843,1.624,844,1.624,845,1.624,846,1.624,847,1.624,848,1.624,849,1.624,850,1.624,851,1.624,852,1.624,853,1.624,854,1.624,855,1.624,856,1.624,857,1.624,858,1.624,859,1.624,860,1.624,861,1.624,862,1.624,863,1.624,864,1.624,865,1.624,866,1.624,867,1.624,868,1.624,869,1.624,870,1.624,871,1.624,872,1.624,873,1.624,874,1.624,875,1.624,876,1.624,877,1.624,878,1.624,879,1.624,880,1.624,881,1.624,882,2.606,883,2.606,884,2.162,885,2.606,886,2.606,887,3.736,888,3.736,889,2.606,890,2.606,891,2.606,892,2.606,893,2.606,894,2.606,895,2.606,896,2.606,897,2.606,898,3.736,899,2.606,900,2.606,901,4.768,902,3.955,903,2.606,904,4.768,905,2.606,906,2.606,907,2.606,908,2.606]],["title/classes/Spell.html",[65,0.344,116,1.188]],["body/classes/Spell.html",[3,0.327,4,0.327,8,0.283,10,0.714,41,0.391,42,0.452,44,0.669,45,0.036,46,1.795,52,1.792,54,0.649,64,0.56,65,0.327,80,1.055,93,0.026,107,0.023,116,1.931,119,2.641,120,1.426,141,1.713,150,1.667,158,1.426,159,1.502,164,2.494,165,1.562,166,1.502,172,2.304,175,1.562,182,1.883,183,1.713,188,1.493,197,1.302,198,2.158,200,1.502,201,1.302,204,1.426,212,1.592,223,2.223,241,1.13,251,1.341,286,0.942,289,2.304,352,0.724,455,2.027,461,1.931,462,1.362,463,1.883,514,2.111,515,2.849,534,1.713,552,1.502,909,1.667,910,2.304,911,2.304,912,2.077,913,2.577,914,2.304,915,2.077,916,2.994,917,4.069,918,2.577,919,4.069,920,4.069,921,3.869,922,2.943,923,2.943,924,2.943,925,2.577,926,2.943,927,2.849,928,2.943,929,1.667,930,1.864,931,1.864,932,2.577,933,1.864,934,1.864,935,2.577,936,2.953,937,2.577,938,1.864,939,1.864,940,1.864,941,1.864,942,3.186,943,1.864,944,1.864,945,2.577,946,2.577,947,2.577,948,1.667,949,1.864,950,1.864,951,1.864]],["title/interfaces/SpellI.html",[223,1.303,352,0.445]],["body/interfaces/SpellI.html",[3,0.358,4,0.358,8,0.309,10,0.78,41,0.415,42,0.481,44,0.656,45,0.036,46,1.792,54,0.709,64,0.581,65,0.358,80,1.048,93,0.027,107,0.024,116,2.004,119,2.652,120,1.127,158,1.127,159,1.642,164,2.511,172,1.821,175,1.659,188,1.563,197,1.563,198,2,200,1.642,201,1.563,204,1.515,212,1.573,223,2.198,241,1.234,251,1.392,286,1.029,289,2.448,352,0.783,354,1.234,455,1.874,461,1.874,462,2,463,2,515,1.821,534,2.055,552,1.642,909,1.821,910,1.821,911,1.821,912,1.642,913,2.036,914,1.821,915,1.642,916,3.013,918,2.036,921,3.585,925,2.036,927,2.765,929,2.448,930,2.036,931,2.036,932,2.737,933,2.036,934,2.036,935,2.737,936,3.092,937,2.737,938,2.036,939,2.036,940,2.036,941,2.036,942,3.306,943,2.036,944,2.036,945,2.737,946,2.737,947,2.737,948,1.821,949,2.036,950,2.036,951,2.036]],["title/interfaces/SpellResponse.html",[241,1.188,352,0.445]],["body/interfaces/SpellResponse.html",[3,0.366,4,0.366,8,0.316,10,0.798,41,0.421,42,0.488,44,0.628,45,0.036,46,1.75,54,0.725,64,0.586,65,0.366,80,0.988,93,0.032,107,0.025,116,1.896,119,2.438,120,1.153,158,1.153,159,2.24,164,2.427,172,1.863,175,2.022,188,1.581,197,1.405,198,2.031,200,1.679,201,1.405,204,1.538,212,1.58,223,2.079,241,1.684,251,1.404,286,1.053,289,2.485,352,0.758,354,1.262,455,1.896,461,2.022,462,1.522,463,2.285,515,1.863,534,1.847,552,1.679,909,1.863,910,1.863,911,1.863,912,1.679,913,2.083,914,1.863,915,1.679,916,2.882,918,2.083,925,2.083,927,2.983,929,1.863,930,2.083,931,2.083,932,2.779,933,2.083,934,2.083,935,2.779,936,3.127,937,2.779,938,2.083,939,2.083,940,2.083,941,2.083,942,3.336,943,2.083,944,2.083,945,3.127,946,3.127,947,3.127,948,2.983,949,2.083,950,2.083,951,2.083]],["title/interfaces/SpellResponseResults.html",[175,1.188,352,0.445]],["body/interfaces/SpellResponseResults.html",[3,0.355,4,0.355,8,0.306,10,0.775,41,0.522,42,0.478,44,0.647,45,0.036,46,1.806,54,0.704,64,0.579,65,0.355,80,1.046,93,0.027,107,0.024,116,1.998,119,2.409,120,1.118,158,1.118,159,1.629,164,2.507,172,1.807,175,1.867,188,1.557,197,1.557,198,1.99,200,1.629,201,1.557,204,1.507,212,1.571,223,2.048,241,1.225,251,1.387,286,1.022,289,2.435,352,0.748,354,1.225,455,1.867,461,1.998,462,1.477,463,2.251,515,1.807,534,2.048,552,2.196,909,1.807,910,1.807,911,1.807,912,1.629,913,2.021,914,1.807,915,1.629,916,3.009,918,2.021,925,2.021,927,2.754,929,1.807,930,2.021,931,2.021,932,2.723,933,2.021,934,2.021,935,2.723,936,3.08,937,2.723,938,2.021,939,2.021,940,2.021,941,2.021,942,3.296,943,2.021,944,2.021,945,3.08,946,3.08,947,3.08,948,1.807,949,2.723,950,2.723,951,2.723]],["title/injectables/SpellsService.html",[139,1.961,952,2.221]],["body/injectables/SpellsService.html",[3,0.45,4,0.254,8,0.22,10,1.088,13,1.923,25,1.897,41,0.22,42,0.378,44,0.646,45,0.036,46,1.518,47,1.079,48,1.001,52,1.662,54,0.988,56,0.668,64,0.254,65,0.254,80,0.862,93,0.019,107,0.019,114,2.15,116,2.312,119,1.571,139,2.15,141,1.429,150,1.295,154,4.129,159,1.733,164,2.295,165,2.048,171,2.816,175,1.303,181,2.816,182,1.874,183,1.705,197,1.435,198,2.636,199,2.074,201,1.435,204,1.678,212,1.384,223,2.187,237,1.64,240,1.448,241,1.72,262,1.419,285,3.718,286,1.662,455,2.048,461,1.72,490,1.923,534,1.429,546,2.816,548,2.838,553,3.718,911,1.923,912,1.733,915,2.561,916,2.966,927,1.923,929,1.923,952,2.435,953,1.897,954,1.897,955,3.395,956,5.335,957,2.816,958,4.521,959,4.775,960,3.395,961,3.395,962,3.395,963,2.816,964,4.482,965,5.017,966,4.482,967,4.05,968,4.05,969,3.395,970,5.017,971,2.287,972,3.395,973,2.287,974,3.718,975,4.482,976,3.395,977,3.972,978,4.05,979,5.017,980,3.395,981,3.395,982,2.287,983,3.395,984,3.395,985,2.287,986,3.718,987,3.395,988,4.482,989,3.395,990,3.395,991,3.395,992,3.395,993,3.395,994,2.816,995,3.395,996,3.395,997,3.395,998,2.287,999,2.287,1000,3.395,1001,2.287,1002,2.287,1003,2.287,1004,3.395,1005,2.287,1006,2.287,1007,2.287,1008,3.395,1009,2.287,1010,2.287,1011,2.287,1012,2.287,1013,2.287,1014,4.05,1015,2.287,1016,2.287,1017,2.287,1018,4.05,1019,2.287,1020,1.897,1021,2.287,1022,2.287,1023,2.287]],["title/components/StepperComponent.html",[0,0.297,103,0.905]],["body/components/StepperComponent.html",[0,0.355,1,0.752,2,1.082,3,0.286,4,0.286,5,0.902,6,0.902,7,0.902,8,0.247,10,0.625,22,0.902,23,2.023,24,2.023,26,0.902,27,1.519,28,0.902,34,1.89,35,2.655,37,1.297,39,1.297,41,0.247,42,0.412,44,0.599,45,0.036,46,1.082,47,0.686,48,1.075,49,2.344,52,1.825,54,1.107,56,0.752,61,1.314,62,1.846,64,0.286,65,0.286,67,0.625,69,0.567,71,0.824,74,0.902,75,1.297,76,1.297,77,0.902,78,1.661,79,0.902,80,0.992,81,0.902,82,0.752,83,0.902,84,0.752,85,0.902,86,0.902,87,0.752,88,0.752,89,0.902,90,0.752,91,0.752,92,0.514,93,0.024,94,0.902,95,0.752,96,0.902,97,0.752,98,0.902,99,0.752,100,0.902,101,0.752,102,0.902,103,1.528,104,1.297,105,0.902,106,0.902,107,0.021,120,1.297,141,1.558,156,3.071,157,2.096,165,2.156,166,2.867,182,2.42,183,2.322,206,1.63,208,1.928,212,1.436,242,1.314,262,1.661,382,3.071,386,2.135,433,1.457,548,2.344,620,4.028,771,3.071,818,3.071,1024,2.135,1025,3.702,1026,3.071,1027,4.335,1028,3.702,1029,3.071,1030,3.702,1031,3.702,1032,3.702,1033,3.702,1034,3.702,1035,3.702,1036,3.702,1037,2.574,1038,4.335,1039,2.135,1040,3.702,1041,2.574,1042,3.702,1043,3.702,1044,3.702,1045,3.702,1046,3.702,1047,3.702,1048,4.741,1049,4.741,1050,3.702,1051,4.741,1052,3.702,1053,3.702,1054,3.702,1055,3.702,1056,3.702,1057,2.574,1058,2.574,1059,3.702,1060,2.574,1061,2.574,1062,2.574,1063,2.574,1064,3.702,1065,2.574,1066,2.574,1067,2.574,1068,2.574,1069,2.574,1070,2.574,1071,2.574,1072,2.574,1073,2.574,1074,2.574,1075,2.574,1076,2.574,1077,5.023,1078,3.702,1079,3.702]],["title/coverage.html",[1080,3.495]],["body/coverage.html",[0,0.582,1,1.024,8,0.336,9,2.906,44,0.39,45,0.036,65,0.509,73,2.512,82,1.024,84,1.024,87,1.024,88,1.337,90,1.024,92,0.913,93,0.03,95,1.024,97,1.024,99,1.024,101,1.024,103,1.024,107,0.026,108,2.906,109,2.906,110,2.512,116,1.345,139,2.218,175,1.345,188,1.121,190,1.475,200,2.757,204,1.228,218,2.218,223,1.475,241,1.345,246,2.218,249,2.218,251,0.934,262,2.138,345,2.906,346,2.906,347,2.906,352,0.854,353,2.512,355,2.512,377,3.795,378,2.512,460,2.885,500,2.218,503,2.218,504,2.591,542,2.218,544,2.906,545,2.512,547,2.512,578,2.218,579,3.281,582,2.218,583,2.906,601,2.906,602,2.906,603,2.906,607,2.906,780,2.906,789,2.906,790,2.906,791,2.512,884,2.906,909,3.058,952,3.281,954,2.906,1024,2.906,1080,2.906,1081,3.503,1082,3.503,1083,3.503,1084,3.503,1085,2.906,1086,2.906,1087,5.746,1088,4.575,1089,3.503,1090,3.503,1091,3.503,1092,3.503,1093,3.503,1094,3.503,1095,3.503,1096,3.503,1097,3.503,1098,3.503,1099,3.503,1100,5.094,1101,3.503,1102,3.503,1103,3.503,1104,4.575,1105,3.503,1106,3.503,1107,3.503,1108,3.503,1109,3.503,1110,3.503,1111,4.225,1112,2.906,1113,2.906,1114,2.906,1115,3.503]],["title/dependencies.html",[1116,2.15,1117,3.086]],["body/dependencies.html",[45,0.036,56,1.298,58,3.685,93,0.03,107,0.03,231,2.516,240,2.813,242,2.268,1117,3.685,1118,4.442,1119,6.215,1120,4.442,1121,4.442,1122,4.442,1123,4.442,1124,4.442,1125,5.307,1126,5.307,1127,3.685,1128,4.442,1129,4.442,1130,4.442,1131,3.685,1132,4.442,1133,4.442,1134,4.442,1135,4.442,1136,4.442,1137,4.442,1138,4.442,1139,4.442,1140,4.442]],["title/miscellaneous/enumerations.html",[1141,1.641,1142,3.086]],["body/miscellaneous/enumerations.html",[41,0.43,45,0.034,48,1.177,69,0.987,70,1.719,92,0.894,93,0.03,107,0.03,117,3.212,208,1.719,253,2.537,262,1.57,340,2.837,355,3.212,363,3.715,364,4.424,365,3.715,366,3.715,367,3.715,368,3.715,369,3.715,370,3.715,371,3.715,372,3.715,373,3.715,374,3.715,375,3.715,376,3.715,460,2.537,491,3.339,600,3.212,828,3.715,829,4.424,1141,2.837,1142,3.715,1143,4.479,1144,4.479,1145,4.479,1146,4.479,1147,4.479,1148,4.479]],["title/index.html",[41,0.249,1149,2.592,1150,2.592]],["body/index.html",[0,0.323,2,1.459,13,3.131,17,4.408,45,0.028,49,2.819,67,1.481,68,2.788,69,1.1,70,1.916,71,1.425,72,2.101,73,2.41,88,1.301,91,1.301,92,0.996,93,0.03,107,0.025,110,2.41,116,1.709,117,2.41,119,1.555,157,3.009,158,1.56,180,2.788,197,1.076,198,2.31,201,1.953,247,2.41,251,0.896,378,2.41,381,3.693,433,1.903,461,2.122,464,2.819,471,1.903,479,1.903,487,2.827,494,2.128,534,1.415,542,2.128,545,2.41,547,3.193,548,2.819,549,2.788,552,1.716,559,2.788,604,2.788,791,2.41,795,3.693,902,2.788,912,2.273,914,1.903,915,2.713,957,2.788,958,2.788,959,2.788,963,2.788,974,2.788,977,3.693,986,2.788,994,2.788,1020,2.788,1026,2.788,1029,2.788,1127,2.788,1131,3.693,1151,4.452,1152,3.361,1153,2.788,1154,3.361,1155,3.361,1156,3.361,1157,3.361,1158,3.361,1159,4.992,1160,3.361,1161,3.361,1162,3.361,1163,3.361,1164,3.361,1165,3.361,1166,3.361,1167,3.361,1168,3.361,1169,3.361,1170,3.361,1171,3.361,1172,3.361,1173,4.452,1174,3.361,1175,3.361,1176,3.361,1177,3.361,1178,3.361,1179,5.314,1180,4.452,1181,3.361,1182,3.361,1183,3.361,1184,3.361,1185,3.361,1186,3.361,1187,3.361,1188,3.361,1189,4.992,1190,3.361,1191,4.452,1192,3.361,1193,3.361,1194,3.361,1195,3.361,1196,3.361,1197,3.361,1198,4.452,1199,3.361,1200,4.452,1201,3.361,1202,3.361,1203,3.361,1204,3.361,1205,3.361,1206,3.361,1207,3.361,1208,3.361,1209,3.361,1210,3.361,1211,4.452,1212,3.361]],["title/modules.html",[1213,3.495]],["body/modules.html",[45,0.032,93,0.032,107,0.032,1213,4.137]],["title/overview.html",[1214,3.495]],["body/overview.html",[2,1.431,45,0.032,93,0.032,107,0.032,253,3.182,354,1.88,501,3.101,502,3.101,514,3.512,953,4.062,1214,4.062]],["title/properties.html",[42,0.414,1116,2.15]],["body/properties.html",[42,0.551,45,0.033,93,0.032,107,0.032,910,2.805,1215,4.953]],["title/miscellaneous/variables.html",[493,2.107,1141,1.641]],["body/miscellaneous/variables.html",[41,0.523,44,0.633,45,0.036,47,1.518,48,1.136,80,0.902,93,0.031,107,0.028,164,2.293,175,1.923,208,2.247,241,1.552,262,1.756,493,2.289,916,2.558,948,2.289,1039,3.353,1085,3.353,1086,4.156,1111,3.353,1112,4.156,1113,4.517,1114,4.517,1141,2.56,1153,4.947,1216,4.042,1217,5.446,1218,4.042,1219,4.042,1220,4.042,1221,4.042,1222,5.011,1223,5.011,1224,5.011,1225,5.011,1226,5.011,1227,5.011,1228,5.011,1229,4.042,1230,4.042,1231,4.042]]],"invertedIndex":[["",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":262,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["0.0.0",{"_index":1215,"title":{},"body":{"properties.html":{}}}],["0.14.3",{"_index":1140,"title":{},"body":{"dependencies.html":{}}}],["0.26.11",{"_index":1138,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1087,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1100,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1101,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1090,"title":{},"body":{"coverage.html":{}}}],["00",{"_index":1153,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["1",{"_index":208,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/NavbarComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["1/11",{"_index":1110,"title":{},"body":{"coverage.html":{}}}],["1/15",{"_index":1095,"title":{},"body":{"coverage.html":{}}}],["1/18",{"_index":1102,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1084,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1106,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1099,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":1104,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":1092,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":1103,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":502,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"overview.html":{}}}],["100",{"_index":884,"title":{},"body":{"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["12",{"_index":503,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"coverage.html":{}}}],["13.25.0",{"_index":1133,"title":{},"body":{"dependencies.html":{}}}],["16",{"_index":1091,"title":{},"body":{"coverage.html":{}}}],["18",{"_index":1097,"title":{},"body":{"coverage.html":{}}}],["18.0.1",{"_index":1122,"title":{},"body":{"dependencies.html":{}}}],["18.2.13",{"_index":1124,"title":{},"body":{"dependencies.html":{}}}],["18.2.4",{"_index":1119,"title":{},"body":{"dependencies.html":{}}}],["18/22",{"_index":1094,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":253,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{},"overview.html":{}}}],["2.3.0",{"_index":1136,"title":{},"body":{"dependencies.html":{}}}],["2/11",{"_index":1098,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":504,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["25",{"_index":1088,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":600,"title":{},"body":{"components/NavbarComponent.html":{},"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{}}}],["3/8",{"_index":1108,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1105,"title":{},"body":{"coverage.html":{}}}],["37",{"_index":1107,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":499,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["5",{"_index":780,"title":{},"body":{"components/OverlayComponent.html":{},"coverage.html":{}}}],["5.2.0",{"_index":1130,"title":{},"body":{"dependencies.html":{}}}],["5/20",{"_index":1089,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":1096,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1083,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":500,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"coverage.html":{}}}],["6th",{"_index":980,"title":{},"body":{"injectables/SpellsService.html":{}}}],["7.8.0",{"_index":1134,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":501,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"overview.html":{}}}],["81",{"_index":1093,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1109,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":882,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["9pdf6ttr0j7hmkk_7t6xtpun",{"_index":1036,"title":{},"body":{"components/StepperComponent.html":{}}}],["abbreviation",{"_index":640,"title":{},"body":{"components/OverlayComponent.html":{}}}],["access",{"_index":1188,"title":{},"body":{"index.html":{}}}],["accessors",{"_index":397,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["act",{"_index":1182,"title":{},"body":{"index.html":{}}}],["action",{"_index":1163,"title":{},"body":{"index.html":{}}}],["actions",{"_index":1180,"title":{},"body":{"index.html":{}}}],["actual_component",{"_index":106,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["add",{"_index":771,"title":{},"body":{"components/OverlayComponent.html":{},"components/StepperComponent.html":{}}}],["added",{"_index":381,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"index.html":{}}}],["adding",{"_index":475,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["additional",{"_index":911,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["addobservabletoautocomplete",{"_index":142,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["addobservabletoleveldropdown",{"_index":143,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["address",{"_index":624,"title":{},"body":{"components/OverlayComponent.html":{}}}],["address2",{"_index":625,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform",{"_index":612,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls['address'].haserror('required",{"_index":770,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls['city'].haserror('required",{"_index":776,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls['firstname'].haserror('required",{"_index":766,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls['lastname'].haserror('required",{"_index":768,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls['state'].haserror('required",{"_index":778,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls[\\'address\\'].haserror(\\'required",{"_index":786,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls[\\'city\\'].haserror(\\'required",{"_index":787,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls[\\'firstname\\'].haserror(\\'required",{"_index":784,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls[\\'lastname\\'].haserror(\\'required",{"_index":785,"title":{},"body":{"components/OverlayComponent.html":{}}}],["addressform.controls[\\'state\\'].haserror(\\'required",{"_index":788,"title":{},"body":{"components/OverlayComponent.html":{}}}],["advantage",{"_index":491,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{}}}],["advantage.advantage",{"_index":822,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantage.disadvantage",{"_index":824,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantage.none",{"_index":497,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["advantageadvantage",{"_index":800,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantagedisadvantage",{"_index":801,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantageenum",{"_index":802,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantagenone",{"_index":803,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["advantageoptions",{"_index":804,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["ak",{"_index":643,"title":{},"body":{"components/OverlayComponent.html":{}}}],["al",{"_index":641,"title":{},"body":{"components/OverlayComponent.html":{}}}],["alabama",{"_index":639,"title":{},"body":{"components/OverlayComponent.html":{}}}],["alaska",{"_index":642,"title":{},"body":{"components/OverlayComponent.html":{}}}],["alert('thanks",{"_index":765,"title":{},"body":{"components/OverlayComponent.html":{}}}],["algorithm",{"_index":1197,"title":{},"body":{"index.html":{}}}],["allow",{"_index":913,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["allows",{"_index":113,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["american",{"_index":644,"title":{},"body":{"components/OverlayComponent.html":{}}}],["amount",{"_index":118,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["amounts",{"_index":1157,"title":{},"body":{"index.html":{}}}],["angular",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["angular/animations",{"_index":1118,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/layout",{"_index":598,"title":{},"body":{"components/NavbarComponent.html":{}}}],["angular/common",{"_index":231,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/SkillCheckComponent.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":1002,"title":{},"body":{"injectables/SpellsService.html":{}}}],["angular/compiler",{"_index":1120,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":56,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"dependencies.html":{}}}],["angular/fire",{"_index":1121,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":242,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":1123,"title":{},"body":{"dependencies.html":{}}}],["angular/material/autocomplete",{"_index":245,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["angular/material/button",{"_index":61,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["angular/material/card",{"_index":248,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["angular/material/form",{"_index":1076,"title":{},"body":{"components/StepperComponent.html":{}}}],["angular/material/icon",{"_index":62,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{},"components/StepperComponent.html":{}}}],["angular/material/input",{"_index":243,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["angular/material/list",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["angular/material/radio",{"_index":764,"title":{},"body":{"components/OverlayComponent.html":{}}}],["angular/material/select",{"_index":244,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["angular/material/sidenav",{"_index":59,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["angular/material/table",{"_index":571,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["angular/material/toolbar",{"_index":60,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["angular/platform",{"_index":1125,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":58,"title":{},"body":{"components/AppComponent.html":{},"dependencies.html":{}}}],["api",{"_index":198,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["api/spells/cantrip",{"_index":1230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/spells/level",{"_index":1231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":24,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["app.component.html",{"_index":38,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":40,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":1086,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appears",{"_index":558,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["applicationconfig",{"_index":1218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apt",{"_index":773,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ar",{"_index":649,"title":{},"body":{"components/OverlayComponent.html":{}}}],["arizona",{"_index":646,"title":{},"body":{"components/OverlayComponent.html":{}}}],["arkansas",{"_index":648,"title":{},"body":{"components/OverlayComponent.html":{}}}],["array",{"_index":162,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["array(6",{"_index":213,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["array(7).keys()].slice(spell.level",{"_index":264,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["arrays",{"_index":535,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["async",{"_index":339,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{}}}],["asyncpipe",{"_index":584,"title":{},"body":{"components/NavbarComponent.html":{}}}],["attack",{"_index":71,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["attackrollscomponent",{"_index":82,"title":{"components/AttackRollsComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["attackrollsform",{"_index":132,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["attackrollsformsubmit",{"_index":144,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["attempts",{"_index":490,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{}}}],["attemptsoptions",{"_index":805,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["autocomplete",{"_index":155,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["automatic",{"_index":888,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["automatically",{"_index":383,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["az",{"_index":647,"title":{},"body":{"components/OverlayComponent.html":{}}}],["bar",{"_index":554,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["barbarian",{"_index":365,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["bard",{"_index":366,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["based",{"_index":159,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["bg3",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["block",{"_index":572,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["bonus",{"_index":88,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{},"index.html":{}}}],["boolean",{"_index":818,"title":{},"body":{"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["both",{"_index":380,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{}}}],["breakpointobserver",{"_index":587,"title":{},"body":{"components/NavbarComponent.html":{}}}],["breakpoints",{"_index":597,"title":{},"body":{"components/NavbarComponent.html":{}}}],["browser",{"_index":1126,"title":{},"body":{"dependencies.html":{}}}],["build",{"_index":1166,"title":{},"body":{"index.html":{}}}],["built",{"_index":1176,"title":{},"body":{"index.html":{}}}],["buttons",{"_index":1203,"title":{},"body":{"index.html":{}}}],["c/o",{"_index":772,"title":{},"body":{"components/OverlayComponent.html":{}}}],["c77de\",\"appid\":\"1:864287131419:web:4b60183cca62591db7b5be\",\"storagebucket\":\"test",{"_index":1224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["c77de.firebaseapp.com\",\"messagingsenderid\":\"864287131419",{"_index":1226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["c77de.firebasestorage.app\",\"apikey\":\"aizasydp4kd1dombpfosirbe7i6dyljmbbnbtay\",\"authdomain\":\"test",{"_index":1225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["c77de.web.app",{"_index":1154,"title":{},"body":{"index.html":{}}}],["ca",{"_index":651,"title":{},"body":{"components/OverlayComponent.html":{}}}],["calc",{"_index":344,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["calculate",{"_index":117,"title":{},"body":{"components/AttackRollsComponent.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["calculating",{"_index":464,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"index.html":{}}}],["calculations",{"_index":487,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"index.html":{}}}],["calculations.serivce.ts",{"_index":496,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["calculations.service",{"_index":252,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{}}}],["calculations.service.ts",{"_index":542,"title":{},"body":{"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"coverage.html":{},"index.html":{}}}],["calculator",{"_index":68,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["california",{"_index":650,"title":{},"body":{"components/OverlayComponent.html":{}}}],["call",{"_index":975,"title":{},"body":{"injectables/SpellsService.html":{}}}],["calls",{"_index":957,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["cantrip",{"_index":1229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["carolina",{"_index":716,"title":{},"body":{"components/OverlayComponent.html":{}}}],["case",{"_index":1030,"title":{},"body":{"components/StepperComponent.html":{}}}],["catch(e",{"_index":1022,"title":{},"body":{"injectables/SpellsService.html":{}}}],["certain",{"_index":1156,"title":{},"body":{"index.html":{}}}],["chance",{"_index":470,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{}}}],["change",{"_index":156,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/StepperComponent.html":{}}}],["changes",{"_index":163,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["character",{"_index":85,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["characterclass",{"_index":364,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["charactersheetcomponent",{"_index":84,"title":{"components/CharacterSheetComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["characterstats",{"_index":353,"title":{"interfaces/CharacterStats.html":{}},"body":{"interfaces/CharacterStats.html":{},"coverage.html":{}}}],["charisma",{"_index":356,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["cheats",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["check",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["check'},{'name",{"_index":102,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["check.component.html",{"_index":798,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.scss",{"_index":799,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts",{"_index":791,"title":{},"body":{"components/SkillCheckComponent.html":{},"coverage.html":{},"index.html":{}}}],["check.component.ts:105",{"_index":819,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:110",{"_index":811,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:30",{"_index":832,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:31",{"_index":840,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:32",{"_index":821,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:33",{"_index":839,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:44",{"_index":833,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:52",{"_index":826,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:53",{"_index":827,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:54",{"_index":823,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:55",{"_index":825,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:56",{"_index":830,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:61",{"_index":831,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:63",{"_index":816,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:67",{"_index":814,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:79",{"_index":813,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check.component.ts:88",{"_index":820,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["check/skill",{"_index":790,"title":{},"body":{"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["checking",{"_index":792,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["city",{"_index":626,"title":{},"body":{"components/OverlayComponent.html":{}}}],["class",{"_index":65,"title":{"classes/DiceSet.html":{},"classes/Spell.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["classes",{"_index":514,"title":{},"body":{"classes/DiceSet.html":{},"classes/Spell.html":{},"overview.html":{}}}],["cleric",{"_index":367,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["co",{"_index":653,"title":{},"body":{"components/OverlayComponent.html":{}}}],["colorado",{"_index":652,"title":{},"body":{"components/OverlayComponent.html":{}}}],["columbia",{"_index":659,"title":{},"body":{"components/OverlayComponent.html":{}}}],["commonmodule",{"_index":122,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{}}}],["company",{"_index":619,"title":{},"body":{"components/OverlayComponent.html":{}}}],["compodoc",{"_index":1177,"title":{},"body":{"index.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":79,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["componentref",{"_index":202,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"index.html":{},"overview.html":{}}}],["connecticut",{"_index":654,"title":{},"body":{"components/OverlayComponent.html":{}}}],["console.log('attack",{"_index":336,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["console.log('damage",{"_index":937,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["console.log('pipe",{"_index":1011,"title":{},"body":{"injectables/SpellsService.html":{}}}],["console.log('skill",{"_index":869,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["console.log('submit",{"_index":313,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["console.log('table",{"_index":860,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["console.log(skillchecksuccesschance",{"_index":872,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["const",{"_index":255,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["constitution",{"_index":357,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["construction",{"_index":849,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["constructor",{"_index":150,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/DiceSet.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{}}}],["constructor(http",{"_index":969,"title":{},"body":{"injectables/SpellsService.html":{}}}],["constructor(name",{"_index":918,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["constructor(undefined",{"_index":516,"title":{},"body":{"classes/DiceSet.html":{}}}],["contains",{"_index":977,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["control",{"_index":382,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/StepperComponent.html":{}}}],["controlcontainer",{"_index":387,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["controlkey",{"_index":395,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["controlvalueaccessor",{"_index":1038,"title":{},"body":{"components/StepperComponent.html":{}}}],["converts",{"_index":177,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["count",{"_index":948,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":1080,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":992,"title":{},"body":{"injectables/SpellsService.html":{}}}],["created",{"_index":482,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["creates",{"_index":546,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"injectables/SpellsService.html":{}}}],["createtablecomponent",{"_index":808,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["createtablecomponent(tableinput",{"_index":812,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["ct",{"_index":655,"title":{},"body":{"components/OverlayComponent.html":{}}}],["cum",{"_index":569,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["cumpercentageresults",{"_index":465,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["current",{"_index":185,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["currentadvantagevalue",{"_index":817,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["currentspellrange",{"_index":133,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["custom",{"_index":1026,"title":{},"body":{"components/StepperComponent.html":{},"index.html":{}}}],["d10",{"_index":402,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["d10(dicenum",{"_index":448,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["d10num",{"_index":539,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["d12",{"_index":403,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["d12(dicenum",{"_index":451,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["d12num",{"_index":540,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["d20",{"_index":486,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["d20num",{"_index":541,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["d4",{"_index":399,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["d4(dicenum",{"_index":439,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["d4num",{"_index":536,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["d6",{"_index":400,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["d6(dicenum",{"_index":442,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["d6num",{"_index":537,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["d8",{"_index":401,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["d8(dicenum",{"_index":445,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["d8num",{"_index":538,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["dakota",{"_index":718,"title":{},"body":{"components/OverlayComponent.html":{}}}],["damage",{"_index":119,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["damage={0",{"_index":931,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["data",{"_index":461,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["day",{"_index":782,"title":{},"body":{"components/OverlayComponent.html":{}}}],["dc",{"_index":660,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["de",{"_index":657,"title":{},"body":{"components/OverlayComponent.html":{}}}],["decimals",{"_index":894,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["decision",{"_index":1160,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":215,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["decrement",{"_index":1048,"title":{},"body":{"components/StepperComponent.html":{}}}],["default",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["delaware",{"_index":656,"title":{},"body":{"components/OverlayComponent.html":{}}}],["dependencies",{"_index":1117,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["deploy",{"_index":1211,"title":{},"body":{"index.html":{}}}],["deployed",{"_index":1178,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1184,"title":{},"body":{"index.html":{}}}],["described",{"_index":480,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["description",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["designed",{"_index":1155,"title":{},"body":{"index.html":{}}}],["details",{"_index":1196,"title":{},"body":{"index.html":{}}}],["determine",{"_index":1158,"title":{},"body":{"index.html":{}}}],["dexterity",{"_index":358,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["dice",{"_index":67,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["dicebonuscomponent",{"_index":134,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["dicebonusformcomponent",{"_index":87,"title":{"components/DiceBonusFormComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["dicecalcresults",{"_index":326,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["dicecalcservice",{"_index":135,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["dicecalculations",{"_index":563,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["dicecalculationsservice",{"_index":218,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["dicenum",{"_index":416,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["diceresults",{"_index":190,"title":{"interfaces/DiceResults.html":{}},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["dicerollresults",{"_index":868,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["dicerolls",{"_index":170,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["diceset",{"_index":251,"title":{"classes/DiceSet.html":{}},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"coverage.html":{},"index.html":{}}}],["diceset(diedict",{"_index":858,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diceset(json.parse",{"_index":311,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["diceset.target.tostring",{"_index":877,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diceset.ts",{"_index":1193,"title":{},"body":{"index.html":{}}}],["diceseti",{"_index":188,"title":{"interfaces/DiceSetI.html":{}},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"coverage.html":{}}}],["dicestring",{"_index":517,"title":{},"body":{"classes/DiceSet.html":{}}}],["dict",{"_index":847,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["die",{"_index":91,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["diebonuses",{"_index":846,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diebonusform",{"_index":806,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diedict",{"_index":310,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["diedict['advantage",{"_index":854,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diedict['attempts",{"_index":856,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diedict['d20",{"_index":851,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["diedict['target",{"_index":852,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["dierollresultstablecomponent",{"_index":90,"title":{"components/DieRollResultsTableComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["different",{"_index":543,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["directive",{"_index":77,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["directives",{"_index":105,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["disadvantage",{"_index":829,"title":{},"body":{"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{}}}],["display",{"_index":796,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["displayedcolumns",{"_index":564,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["displayspellautocompletevalue",{"_index":145,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["displayspellautocompletevalue(selectedvalue",{"_index":174,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["district",{"_index":658,"title":{},"body":{"components/OverlayComponent.html":{}}}],["dnd",{"_index":915,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["dnd5eapi",{"_index":976,"title":{},"body":{"injectables/SpellsService.html":{}}}],["document.getelementbyid('damage",{"_index":317,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["document.getelementbyid('success",{"_index":865,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["document.getelementbyid('target",{"_index":867,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["documentation",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{},"index.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["done",{"_index":1174,"title":{},"body":{"index.html":{}}}],["dropdown",{"_index":168,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["dropdowngroup",{"_index":578,"title":{"interfaces/DropdownGroup.html":{}},"body":{"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"coverage.html":{}}}],["dropdownitem",{"_index":582,"title":{"interfaces/DropdownItem.html":{}},"body":{"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"coverage.html":{}}}],["druid",{"_index":368,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["dynamic",{"_index":1127,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["dynamically",{"_index":1208,"title":{},"body":{"index.html":{}}}],["each",{"_index":534,"title":{},"body":{"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["easier",{"_index":914,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"index.html":{}}}],["easy",{"_index":848,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["edit",{"_index":379,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["element",{"_index":76,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["element.cumpercentageresults",{"_index":575,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["element.numresults",{"_index":574,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["element.percentageresults",{"_index":576,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["element.rollresult",{"_index":573,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["empty",{"_index":186,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["enum",{"_index":363,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":1142,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":473,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["export",{"_index":64,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["extends",{"_index":484,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["fail",{"_index":890,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["false",{"_index":637,"title":{},"body":{"components/OverlayComponent.html":{}}}],["fb",{"_index":613,"title":{},"body":{"components/OverlayComponent.html":{}}}],["federated",{"_index":661,"title":{},"body":{"components/OverlayComponent.html":{}}}],["field",{"_index":1027,"title":{},"body":{"components/StepperComponent.html":{}}}],["fighter",{"_index":369,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["filter",{"_index":983,"title":{},"body":{"injectables/SpellsService.html":{}}}],["filter(spelllist",{"_index":303,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["filteredgroupspelllist",{"_index":136,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["firebase",{"_index":1131,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["first",{"_index":767,"title":{},"body":{"components/OverlayComponent.html":{}}}],["firstname",{"_index":621,"title":{},"body":{"components/OverlayComponent.html":{}}}],["fl",{"_index":665,"title":{},"body":{"components/OverlayComponent.html":{}}}],["flat",{"_index":1147,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["florida",{"_index":664,"title":{},"body":{"components/OverlayComponent.html":{}}}],["flowicon",{"_index":908,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["fm",{"_index":663,"title":{},"body":{"components/OverlayComponent.html":{}}}],["fn",{"_index":1064,"title":{},"body":{"components/StepperComponent.html":{}}}],["for(item",{"_index":899,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["for(let",{"_index":289,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["for(spell",{"_index":341,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["for(spellgroup",{"_index":338,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["forkjoin",{"_index":236,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["forkjoin(spellsgroups).pipe",{"_index":298,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["form",{"_index":157,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["form'},{'name",{"_index":89,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["form.component",{"_index":247,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{},"index.html":{}}}],["form.component.html",{"_index":384,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.scss",{"_index":391,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts",{"_index":378,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"coverage.html":{},"index.html":{}}}],["form.component.ts:25",{"_index":409,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:26",{"_index":405,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:27",{"_index":406,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:29",{"_index":411,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:33",{"_index":413,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:37",{"_index":415,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:41",{"_index":418,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:45",{"_index":420,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:49",{"_index":422,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:53",{"_index":424,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:57",{"_index":426,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:61",{"_index":428,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:65",{"_index":430,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:69",{"_index":432,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:73",{"_index":408,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form.component.ts:86",{"_index":407,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["form/dice",{"_index":246,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["formbuilder",{"_index":762,"title":{},"body":{"components/OverlayComponent.html":{}}}],["formcontrol",{"_index":206,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["formcontrol(0",{"_index":454,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{}}}],["formcontrol(1",{"_index":837,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["formcontrol(advantage.none",{"_index":836,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["formcontrol(this.selectedspell?.level",{"_index":207,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["formgroup",{"_index":205,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{}}}],["formreusable",{"_index":1205,"title":{},"body":{"index.html":{}}}],["forms",{"_index":559,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"index.html":{}}}],["formsmodule",{"_index":1044,"title":{},"body":{"components/StepperComponent.html":{}}}],["forwardref",{"_index":1042,"title":{},"body":{"components/StepperComponent.html":{}}}],["found",{"_index":604,"title":{},"body":{"components/NotFoundComponent.html":{},"index.html":{}}}],["found'},{'name",{"_index":98,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["found.component.html",{"_index":605,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found.component.scss",{"_index":606,"title":{},"body":{"components/NotFoundComponent.html":{}}}],["found.component.ts",{"_index":603,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["found/not",{"_index":602,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["free",{"_index":633,"title":{},"body":{"components/OverlayComponent.html":{}}}],["freepik",{"_index":903,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["frontend",{"_index":795,"title":{},"body":{"components/SkillCheckComponent.html":{},"index.html":{}}}],["function",{"_index":986,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["functions",{"_index":912,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["ga",{"_index":667,"title":{},"body":{"components/OverlayComponent.html":{}}}],["generated",{"_index":463,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["generatediceset",{"_index":146,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["generates",{"_index":794,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["generatetable",{"_index":147,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["generatetable(tableinput",{"_index":189,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["georgia",{"_index":666,"title":{},"body":{"components/OverlayComponent.html":{}}}],["getallspells",{"_index":965,"title":{},"body":{"injectables/SpellsService.html":{}}}],["getallspellsoflevel",{"_index":964,"title":{},"body":{"injectables/SpellsService.html":{}}}],["getallspellsoflevel(level",{"_index":981,"title":{},"body":{"injectables/SpellsService.html":{}}}],["getauth",{"_index":1228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getd10",{"_index":425,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["getd12",{"_index":429,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["getd4",{"_index":412,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["getd6",{"_index":417,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["getd8",{"_index":421,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["getparentformgroup",{"_index":410,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["gets",{"_index":196,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["getspell",{"_index":966,"title":{},"body":{"injectables/SpellsService.html":{}}}],["getspell(url",{"_index":984,"title":{},"body":{"injectables/SpellsService.html":{}}}],["getting",{"_index":1149,"title":{"index.html":{}},"body":{}}],["github",{"_index":1179,"title":{},"body":{"index.html":{}}}],["give",{"_index":997,"title":{},"body":{"injectables/SpellsService.html":{}}}],["given",{"_index":989,"title":{},"body":{"injectables/SpellsService.html":{}}}],["gotten",{"_index":1192,"title":{},"body":{"index.html":{}}}],["group",{"_index":580,"title":{},"body":{"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/SkillCheckComponent.html":{}}}],["groupname",{"_index":581,"title":{},"body":{"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{}}}],["gu",{"_index":669,"title":{},"body":{"components/OverlayComponent.html":{}}}],["guam",{"_index":668,"title":{},"body":{"components/OverlayComponent.html":{}}}],["guide",{"_index":1028,"title":{},"body":{"components/StepperComponent.html":{}}}],["hampshire",{"_index":707,"title":{},"body":{"components/OverlayComponent.html":{}}}],["handled",{"_index":1185,"title":{},"body":{"index.html":{}}}],["hardcodedautocomplete",{"_index":210,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["hasunitnumber",{"_index":614,"title":{},"body":{"components/OverlayComponent.html":{}}}],["hawaii",{"_index":670,"title":{},"body":{"components/OverlayComponent.html":{}}}],["here",{"_index":1029,"title":{},"body":{"components/StepperComponent.html":{},"index.html":{}}}],["hi",{"_index":671,"title":{},"body":{"components/OverlayComponent.html":{}}}],["higher",{"_index":472,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{}}}],["hold",{"_index":462,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["holds",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceSetI.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["home",{"_index":11,"title":{},"body":{"components/AppComponent.html":{}}}],["html",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["http",{"_index":956,"title":{},"body":{"injectables/SpellsService.html":{}}}],["httpclient",{"_index":970,"title":{},"body":{"injectables/SpellsService.html":{}}}],["https://flowbite.com/docs/forms/number",{"_index":1037,"title":{},"body":{"components/StepperComponent.html":{}}}],["https://jsonplaceholder.typicode.com",{"_index":962,"title":{},"body":{"injectables/SpellsService.html":{}}}],["https://test",{"_index":1152,"title":{},"body":{"index.html":{}}}],["https://transform.tools/json",{"_index":945,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["https://v5.material.angular.io/guide/creating",{"_index":1025,"title":{},"body":{"components/StepperComponent.html":{}}}],["https://www.dnd5eapi.co",{"_index":1168,"title":{},"body":{"index.html":{}}}],["https://www.dnd5eapi.co/api",{"_index":960,"title":{},"body":{"injectables/SpellsService.html":{}}}],["https://www.dnd5eapi.co/api/spells",{"_index":947,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["https://www.youtube.com/watch?v=xtcjqawij2c&list=plw5h0dij",{"_index":1035,"title":{},"body":{"components/StepperComponent.html":{}}}],["ia",{"_index":678,"title":{},"body":{"components/OverlayComponent.html":{}}}],["icons",{"_index":901,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["id",{"_index":673,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["idaho",{"_index":672,"title":{},"body":{"components/OverlayComponent.html":{}}}],["identifier",{"_index":1081,"title":{},"body":{"coverage.html":{}}}],["if(minelement",{"_index":321,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["if(spell.level",{"_index":261,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["if(spelllevel",{"_index":1017,"title":{},"body":{"injectables/SpellsService.html":{}}}],["if(successelement",{"_index":871,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["if(tableinput",{"_index":308,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["if(targetdcelement",{"_index":875,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["il",{"_index":675,"title":{},"body":{"components/OverlayComponent.html":{}}}],["illinois",{"_index":674,"title":{},"body":{"components/OverlayComponent.html":{}}}],["implement",{"_index":494,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"index.html":{}}}],["implementation",{"_index":492,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["implements",{"_index":120,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"components/StepperComponent.html":{}}}],["import",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["imports",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["impossible",{"_index":885,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["increment",{"_index":1049,"title":{},"body":{"components/StepperComponent.html":{}}}],["index",{"_index":41,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["indiana",{"_index":676,"title":{},"body":{"components/OverlayComponent.html":{}}}],["individual",{"_index":950,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["information",{"_index":197,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["initialize",{"_index":153,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["initializeapp({\"projectid\":\"test",{"_index":1223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":232,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["inject(breakpointobserver",{"_index":589,"title":{},"body":{"components/NavbarComponent.html":{}}}],["inject(controlcontainer",{"_index":389,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["inject(dicecalculationsservice",{"_index":219,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{}}}],["inject(formbuilder",{"_index":635,"title":{},"body":{"components/OverlayComponent.html":{}}}],["inject(spellsservice",{"_index":225,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["injectable",{"_index":952,"title":{"injectables/SpellsService.html":{}},"body":{"injectables/SpellsService.html":{},"coverage.html":{}}}],["injectables",{"_index":953,"title":{},"body":{"injectables/SpellsService.html":{},"overview.html":{}}}],["injection",{"_index":972,"title":{},"body":{"injectables/SpellsService.html":{}}}],["input",{"_index":433,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["input({required",{"_index":435,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["inputmodified",{"_index":1201,"title":{},"body":{"index.html":{}}}],["inputs",{"_index":394,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{}}}],["inputted",{"_index":996,"title":{},"body":{"injectables/SpellsService.html":{}}}],["intelligence",{"_index":359,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["interface",{"_index":352,"title":{"interfaces/CharacterStats.html":{},"interfaces/DiceResults.html":{},"interfaces/DiceSetI.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}},"body":{"interfaces/CharacterStats.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"coverage.html":{}}}],["interfaces",{"_index":354,"title":{},"body":{"interfaces/CharacterStats.html":{},"interfaces/DiceResults.html":{},"interfaces/DiceSetI.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"overview.html":{}}}],["iowa",{"_index":677,"title":{},"body":{"components/OverlayComponent.html":{}}}],["isadvantagenone",{"_index":809,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["isadvantagenone(currentadvantagevalue",{"_index":815,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["isdisabled",{"_index":1069,"title":{},"body":{"components/StepperComponent.html":{}}}],["ishandset",{"_index":588,"title":{},"body":{"components/NavbarComponent.html":{}}}],["island",{"_index":736,"title":{},"body":{"components/OverlayComponent.html":{}}}],["islands",{"_index":687,"title":{},"body":{"components/OverlayComponent.html":{}}}],["item",{"_index":900,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["iterable",{"_index":485,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["iterator",{"_index":495,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["jersey",{"_index":709,"title":{},"body":{"components/OverlayComponent.html":{}}}],["json",{"_index":1129,"title":{},"body":{"dependencies.html":{}}}],["json.parse",{"_index":842,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["json.stringify(this.attackrollsform.value))['diebonuses",{"_index":312,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["json.stringify(this.skillcheckform.value))['diebonuses",{"_index":843,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["kansas",{"_index":679,"title":{},"body":{"components/OverlayComponent.html":{}}}],["karma",{"_index":1175,"title":{},"body":{"index.html":{}}}],["kentucky",{"_index":681,"title":{},"body":{"components/OverlayComponent.html":{}}}],["key",{"_index":936,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["keys",{"_index":498,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["ks",{"_index":680,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ky",{"_index":682,"title":{},"body":{"components/OverlayComponent.html":{}}}],["la",{"_index":684,"title":{},"body":{"components/OverlayComponent.html":{}}}],["label",{"_index":396,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{}}}],["last",{"_index":769,"title":{},"body":{"components/OverlayComponent.html":{}}}],["lastname",{"_index":623,"title":{},"body":{"components/OverlayComponent.html":{}}}],["layout",{"_index":1172,"title":{},"body":{"index.html":{}}}],["legend",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["level",{"_index":164,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/CharacterStats.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"miscellaneous/variables.html":{}}}],["level=1",{"_index":930,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["levelnum",{"_index":279,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["likelihood",{"_index":1159,"title":{},"body":{"index.html":{}}}],["line",{"_index":845,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["link",{"_index":112,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{}}}],["linked",{"_index":111,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["links",{"_index":16,"title":{},"body":{"components/AppComponent.html":{}}}],["list",{"_index":958,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["literal",{"_index":921,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{}}}],["local",{"_index":1181,"title":{},"body":{"index.html":{}}}],["looks",{"_index":557,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["louisiana",{"_index":683,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ma",{"_index":692,"title":{},"body":{"components/OverlayComponent.html":{}}}],["made",{"_index":902,"title":{},"body":{"components/SkillCheckComponent.html":{},"index.html":{}}}],["main",{"_index":963,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["maine",{"_index":685,"title":{},"body":{"components/OverlayComponent.html":{}}}],["make",{"_index":1033,"title":{},"body":{"components/StepperComponent.html":{}}}],["makes",{"_index":974,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["making",{"_index":987,"title":{},"body":{"injectables/SpellsService.html":{}}}],["many",{"_index":533,"title":{},"body":{"interfaces/DiceSetI.html":{}}}],["map",{"_index":237,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"injectables/SpellsService.html":{}}}],["map(result",{"_index":593,"title":{},"body":{"components/NavbarComponent.html":{}}}],["map(spellgroup",{"_index":299,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["mariana",{"_index":721,"title":{},"body":{"components/OverlayComponent.html":{}}}],["marshall",{"_index":686,"title":{},"body":{"components/OverlayComponent.html":{}}}],["maryland",{"_index":689,"title":{},"body":{"components/OverlayComponent.html":{}}}],["massachusetts",{"_index":691,"title":{},"body":{"components/OverlayComponent.html":{}}}],["matautocompletemodule",{"_index":126,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["matbuttonmodule",{"_index":34,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["matbuttontogglemodule",{"_index":797,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["matcardmodule",{"_index":127,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["matching",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":549,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"index.html":{}}}],["matformfieldmodule",{"_index":1045,"title":{},"body":{"components/StepperComponent.html":{}}}],["maticonmodule",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{},"components/StepperComponent.html":{}}}],["matinputmodule",{"_index":123,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["matlistmodule",{"_index":36,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["matradiomodule",{"_index":609,"title":{},"body":{"components/OverlayComponent.html":{}}}],["matselectmodule",{"_index":125,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["matsidenavmodule",{"_index":32,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["mattablemodule",{"_index":560,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["mattoolbarmodule",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["max",{"_index":320,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["maxelement",{"_index":319,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["maxelement.innertext",{"_index":324,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["md",{"_index":690,"title":{},"body":{"components/OverlayComponent.html":{}}}],["menu",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"components/NavbarComponent.html":{}}}],["metadata",{"_index":22,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["methods",{"_index":141,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["mexico",{"_index":711,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mh",{"_index":688,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mi",{"_index":694,"title":{},"body":{"components/OverlayComponent.html":{}}}],["michigan",{"_index":693,"title":{},"body":{"components/OverlayComponent.html":{}}}],["micronesia",{"_index":662,"title":{},"body":{"components/OverlayComponent.html":{}}}],["min",{"_index":318,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["mind",{"_index":1032,"title":{},"body":{"components/StepperComponent.html":{}}}],["minelement",{"_index":316,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["minelement.innertext",{"_index":322,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["minlevel",{"_index":266,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["minnesota",{"_index":695,"title":{},"body":{"components/OverlayComponent.html":{}}}],["miscellaneous",{"_index":1141,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mississippi",{"_index":697,"title":{},"body":{"components/OverlayComponent.html":{}}}],["missouri",{"_index":699,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mn",{"_index":696,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mo",{"_index":700,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mockspellresponse",{"_index":1112,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockspellresult0",{"_index":1113,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockspellresult1",{"_index":1114,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["modifier",{"_index":455,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["modifier=0",{"_index":1007,"title":{},"body":{"injectables/SpellsService.html":{}}}],["modules",{"_index":1213,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monk",{"_index":370,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["montana",{"_index":701,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mp",{"_index":722,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ms",{"_index":698,"title":{},"body":{"components/OverlayComponent.html":{}}}],["mt",{"_index":702,"title":{},"body":{"components/OverlayComponent.html":{}}}],["multi",{"_index":1043,"title":{},"body":{"components/StepperComponent.html":{}}}],["nadiinko",{"_index":907,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["name",{"_index":80,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":179,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["natural",{"_index":887,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["navbar",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{}}}],["navbar'},{'name",{"_index":96,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["navbar.component.html",{"_index":585,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbar.component.scss",{"_index":586,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbarcomponent",{"_index":95,"title":{"components/NavbarComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["nbsp",{"_index":577,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["nbsp;d4",{"_index":457,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["nbsp;d6",{"_index":458,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["nbsp;d8",{"_index":459,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["nc",{"_index":717,"title":{},"body":{"components/OverlayComponent.html":{}}}],["nd",{"_index":719,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ne",{"_index":704,"title":{},"body":{"components/OverlayComponent.html":{}}}],["nebraska",{"_index":703,"title":{},"body":{"components/OverlayComponent.html":{}}}],["necessary",{"_index":929,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["needs",{"_index":995,"title":{},"body":{"injectables/SpellsService.html":{}}}],["nektos",{"_index":1183,"title":{},"body":{"index.html":{}}}],["nevada",{"_index":705,"title":{},"body":{"components/OverlayComponent.html":{}}}],["new",{"_index":204,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"coverage.html":{}}}],["newvalue",{"_index":1072,"title":{},"body":{"components/StepperComponent.html":{}}}],["next",{"_index":513,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/OverlayComponent.html":{}}}],["ng_value_accessor",{"_index":1040,"title":{},"body":{"components/StepperComponent.html":{}}}],["ngondestroy",{"_index":393,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["ngoninit",{"_index":148,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{}}}],["nh",{"_index":708,"title":{},"body":{"components/OverlayComponent.html":{}}}],["nj",{"_index":710,"title":{},"body":{"components/OverlayComponent.html":{}}}],["nm",{"_index":712,"title":{},"body":{"components/OverlayComponent.html":{}}}],["none",{"_index":828,"title":{},"body":{"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{}}}],["north",{"_index":715,"title":{},"body":{"components/OverlayComponent.html":{}}}],["northern",{"_index":720,"title":{},"body":{"components/OverlayComponent.html":{}}}],["note",{"_index":883,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["notfoundcomponent",{"_index":97,"title":{"components/NotFoundComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["npmcli/package",{"_index":1128,"title":{},"body":{"dependencies.html":{}}}],["null",{"_index":620,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["num",{"_index":568,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["number",{"_index":212,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["numresults",{"_index":466,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["nv",{"_index":706,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ny",{"_index":714,"title":{},"body":{"components/OverlayComponent.html":{}}}],["object",{"_index":919,"title":{},"body":{"classes/Spell.html":{}}}],["observable",{"_index":154,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"injectables/SpellsService.html":{}}}],["oh",{"_index":724,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ohio",{"_index":723,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ok",{"_index":726,"title":{},"body":{"components/OverlayComponent.html":{}}}],["oklahoma",{"_index":725,"title":{},"body":{"components/OverlayComponent.html":{}}}],["once",{"_index":850,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["onchange",{"_index":1050,"title":{},"body":{"components/StepperComponent.html":{}}}],["onchange(value",{"_index":1059,"title":{},"body":{"components/StepperComponent.html":{}}}],["one",{"_index":1034,"title":{},"body":{"components/StepperComponent.html":{}}}],["oninit",{"_index":121,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["onsubmit",{"_index":616,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ontouch",{"_index":1051,"title":{},"body":{"components/StepperComponent.html":{}}}],["option",{"_index":895,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["option.id",{"_index":896,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["option.name",{"_index":898,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["option.value",{"_index":897,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["optional",{"_index":183,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["order",{"_index":993,"title":{},"body":{"injectables/SpellsService.html":{}}}],["oregon",{"_index":727,"title":{},"body":{"components/OverlayComponent.html":{}}}],["organize",{"_index":1191,"title":{},"body":{"index.html":{}}}],["organizes",{"_index":18,"title":{},"body":{"components/AppComponent.html":{},"components/DieRollResultsTableComponent.html":{}}}],["organizing",{"_index":1171,"title":{},"body":{"index.html":{}}}],["outlet",{"_index":20,"title":{},"body":{"components/AppComponent.html":{}}}],["overlay",{"_index":608,"title":{},"body":{"components/OverlayComponent.html":{}}}],["overlay'},{'name",{"_index":100,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["overlay.component.html",{"_index":610,"title":{},"body":{"components/OverlayComponent.html":{}}}],["overlay.component.scss",{"_index":611,"title":{},"body":{"components/OverlayComponent.html":{}}}],["overlaycomponent",{"_index":99,"title":{"components/OverlayComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["overview",{"_index":1214,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["pa",{"_index":731,"title":{},"body":{"components/OverlayComponent.html":{}}}],["package",{"_index":1116,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"components/NotFoundComponent.html":{}}}],["pageit",{"_index":1198,"title":{},"body":{"index.html":{}}}],["pages",{"_index":17,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["paladin",{"_index":371,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["palau",{"_index":728,"title":{},"body":{"components/OverlayComponent.html":{}}}],["param",{"_index":285,"title":{},"body":{"components/AttackRollsComponent.html":{},"injectables/SpellsService.html":{}}}],["parameters",{"_index":182,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["parentcontainer",{"_index":392,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["parentformgroup",{"_index":398,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["parseint(key",{"_index":938,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["pennsylvania",{"_index":730,"title":{},"body":{"components/OverlayComponent.html":{}}}],["percent",{"_index":469,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["percentage",{"_index":481,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{}}}],["percentageresults",{"_index":467,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["percentages",{"_index":891,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["perfect",{"_index":906,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["pipe",{"_index":592,"title":{},"body":{"components/NavbarComponent.html":{}}}],["pipe(map((response",{"_index":1010,"title":{},"body":{"injectables/SpellsService.html":{}}}],["pixel",{"_index":905,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["playing",{"_index":1161,"title":{},"body":{"index.html":{}}}],["possibility",{"_index":1146,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["possible",{"_index":479,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"index.html":{}}}],["postalcode",{"_index":628,"title":{},"body":{"components/OverlayComponent.html":{}}}],["postalcode.value.length",{"_index":779,"title":{},"body":{"components/OverlayComponent.html":{}}}],["pr",{"_index":734,"title":{},"body":{"components/OverlayComponent.html":{}}}],["previous",{"_index":844,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["priority",{"_index":781,"title":{},"body":{"components/OverlayComponent.html":{}}}],["private",{"_index":130,"title":{},"body":{"components/AttackRollsComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["proficiency",{"_index":360,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["properly",{"_index":994,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["properties",{"_index":42,"title":{"properties.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"properties.html":{}}}],["protected",{"_index":967,"title":{},"body":{"injectables/SpellsService.html":{}}}],["provide",{"_index":386,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/StepperComponent.html":{}}}],["provideanimationsasync",{"_index":1220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideauth",{"_index":1227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providedin",{"_index":1003,"title":{},"body":{"injectables/SpellsService.html":{}}}],["providefirebaseapp",{"_index":1222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providehttpclient",{"_index":1221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":1219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":1039,"title":{},"body":{"components/StepperComponent.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":437,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["puerto",{"_index":732,"title":{},"body":{"components/OverlayComponent.html":{}}}],["pw",{"_index":729,"title":{},"body":{"components/OverlayComponent.html":{}}}],["range:0",{"_index":337,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["ranger",{"_index":372,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["rawspelllist",{"_index":137,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["reactiveformsmodule",{"_index":124,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["read",{"_index":228,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["received",{"_index":314,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["recreated",{"_index":861,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["regardless",{"_index":886,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["registeronchange",{"_index":1052,"title":{},"body":{"components/StepperComponent.html":{}}}],["registeronchange(fn",{"_index":1062,"title":{},"body":{"components/StepperComponent.html":{}}}],["registerontouched",{"_index":1053,"title":{},"body":{"components/StepperComponent.html":{}}}],["registerontouched(fn",{"_index":1065,"title":{},"body":{"components/StepperComponent.html":{}}}],["related",{"_index":1194,"title":{},"body":{"index.html":{}}}],["remove",{"_index":1079,"title":{},"body":{"components/StepperComponent.html":{}}}],["represents",{"_index":555,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["request",{"_index":988,"title":{},"body":{"injectables/SpellsService.html":{}}}],["required",{"_index":404,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{}}}],["resources",{"_index":1210,"title":{},"body":{"index.html":{}}}],["response",{"_index":927,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["response.results",{"_index":290,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["response['damage']['damage_at_character_level']['1",{"_index":1019,"title":{},"body":{"injectables/SpellsService.html":{}}}],["response['damage']['damage_at_slot_level",{"_index":1021,"title":{},"body":{"injectables/SpellsService.html":{}}}],["response['heal_at_slot_level",{"_index":1023,"title":{},"body":{"injectables/SpellsService.html":{}}}],["response['level",{"_index":1015,"title":{},"body":{"injectables/SpellsService.html":{}}}],["response['name",{"_index":1013,"title":{},"body":{"injectables/SpellsService.html":{}}}],["response[key",{"_index":940,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["result",{"_index":552,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"index.html":{}}}],["result.matches",{"_index":594,"title":{},"body":{"components/NavbarComponent.html":{}}}],["resulted",{"_index":477,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["results",{"_index":93,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retstring",{"_index":942,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["return",{"_index":286,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{}}}],["returned",{"_index":951,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["returns",{"_index":165,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["reusable",{"_index":1212,"title":{},"body":{"index.html":{}}}],["rhode",{"_index":735,"title":{},"body":{"components/OverlayComponent.html":{}}}],["ri",{"_index":737,"title":{},"body":{"components/OverlayComponent.html":{}}}],["rico",{"_index":733,"title":{},"body":{"components/OverlayComponent.html":{}}}],["rogue",{"_index":373,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["roll",{"_index":92,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["rolled",{"_index":483,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["rolling",{"_index":471,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"index.html":{}}}],["rollresult",{"_index":468,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["rolls",{"_index":72,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"index.html":{}}}],["rolls'},{'name",{"_index":83,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["rolls.component.html",{"_index":128,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.scss",{"_index":129,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts",{"_index":110,"title":{},"body":{"components/AttackRollsComponent.html":{},"coverage.html":{},"index.html":{}}}],["rolls.component.ts:105",{"_index":195,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:131",{"_index":192,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:139",{"_index":187,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:146",{"_index":173,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:158",{"_index":151,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:162",{"_index":194,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:33",{"_index":226,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:34",{"_index":220,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:35",{"_index":222,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:36",{"_index":214,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:37",{"_index":224,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:38",{"_index":211,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:44",{"_index":221,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:45",{"_index":217,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:46",{"_index":230,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:47",{"_index":203,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:54",{"_index":152,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:79",{"_index":167,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls.component.ts:98",{"_index":176,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["rolls/attack",{"_index":109,"title":{},"body":{"components/AttackRollsComponent.html":{},"coverage.html":{}}}],["root",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"injectables/SpellsService.html":{}}}],["root'},{'name",{"_index":81,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["rounded",{"_index":892,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["router",{"_index":19,"title":{},"body":{"components/AppComponent.html":{}}}],["routerlink",{"_index":30,"title":{},"body":{"components/AppComponent.html":{}}}],["routerlink,routermodule",{"_index":57,"title":{},"body":{"components/AppComponent.html":{}}}],["routermodule",{"_index":31,"title":{},"body":{"components/AppComponent.html":{}}}],["routeroutlet",{"_index":29,"title":{},"body":{"components/AppComponent.html":{}}}],["row",{"_index":551,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["rxjs",{"_index":240,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/NavbarComponent.html":{},"injectables/SpellsService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":599,"title":{},"body":{"components/NavbarComponent.html":{}}}],["samoa",{"_index":645,"title":{},"body":{"components/OverlayComponent.html":{}}}],["savageattacker",{"_index":1148,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sc",{"_index":739,"title":{},"body":{"components/OverlayComponent.html":{}}}],["sd",{"_index":740,"title":{},"body":{"components/OverlayComponent.html":{}}}],["search",{"_index":115,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["searching",{"_index":990,"title":{},"body":{"injectables/SpellsService.html":{}}}],["selected",{"_index":160,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selectedspell",{"_index":138,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selectedvalue",{"_index":184,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selectedvalue.name",{"_index":287,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selectedvalue?.url",{"_index":258,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selectedvalueasstring",{"_index":256,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["selector",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["separate",{"_index":991,"title":{},"body":{"injectables/SpellsService.html":{}}}],["service",{"_index":955,"title":{},"body":{"injectables/SpellsService.html":{}}}],["services",{"_index":1186,"title":{},"body":{"index.html":{}}}],["set",{"_index":199,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{}}}],["setd10(dicenum",{"_index":427,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["setd12(dicenum",{"_index":431,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["setd4(dicenum",{"_index":414,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["setd6(dicenum",{"_index":419,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["setd8(dicenum",{"_index":423,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["setdamagefromapi",{"_index":917,"title":{},"body":{"classes/Spell.html":{}}}],["setdamagefromapi(response",{"_index":925,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["setdisabledstate",{"_index":1054,"title":{},"body":{"components/StepperComponent.html":{}}}],["setdisabledstate(isdisabled",{"_index":1067,"title":{},"body":{"components/StepperComponent.html":{}}}],["setgroupedspelllist",{"_index":149,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["setting",{"_index":172,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["sharereplay",{"_index":595,"title":{},"body":{"components/NavbarComponent.html":{}}}],["sheet",{"_index":348,"title":{},"body":{"components/CharacterSheetComponent.html":{}}}],["sheet'},{'name",{"_index":86,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["sheet.component.html",{"_index":349,"title":{},"body":{"components/CharacterSheetComponent.html":{}}}],["sheet.component.scss",{"_index":350,"title":{},"body":{"components/CharacterSheetComponent.html":{}}}],["sheet.component.ts",{"_index":347,"title":{},"body":{"components/CharacterSheetComponent.html":{},"coverage.html":{}}}],["sheet/character",{"_index":346,"title":{},"body":{"components/CharacterSheetComponent.html":{},"coverage.html":{}}}],["shipping",{"_index":632,"title":{},"body":{"components/OverlayComponent.html":{}}}],["show",{"_index":180,"title":{},"body":{"components/AttackRollsComponent.html":{},"index.html":{}}}],["shown",{"_index":21,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{}}}],["side",{"_index":14,"title":{},"body":{"components/AppComponent.html":{}}}],["sides",{"_index":1204,"title":{},"body":{"index.html":{}}}],["skill",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["skillcheckcalc",{"_index":1195,"title":{},"body":{"index.html":{}}}],["skillcheckcomponent",{"_index":101,"title":{"components/SkillCheckComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["skillcheckform",{"_index":807,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["skillchecksubmit",{"_index":810,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["skillchecksuccesschance",{"_index":862,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["skillchecksuccesschance).tostring",{"_index":874,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["skipself",{"_index":390,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["sorcerer",{"_index":374,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["south",{"_index":738,"title":{},"body":{"components/OverlayComponent.html":{}}}],["specific",{"_index":553,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"injectables/SpellsService.html":{}}}],["spell",{"_index":116,"title":{"classes/Spell.html":{}},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"coverage.html":{},"index.html":{}}}],["spell(spellname",{"_index":1016,"title":{},"body":{"injectables/SpellsService.html":{}}}],["spell.damage[minlevel].d10",{"_index":275,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.damage[minlevel].d12",{"_index":277,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.damage[minlevel].d4",{"_index":269,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.damage[minlevel].d6",{"_index":271,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.damage[minlevel].d8",{"_index":273,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.name",{"_index":343,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.name.tolowercase().startswith(spellstring",{"_index":302,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spell.setdamagefromapi",{"_index":1018,"title":{},"body":{"injectables/SpellsService.html":{}}}],["spell.ts",{"_index":1190,"title":{},"body":{"index.html":{}}}],["spellgroup",{"_index":342,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellgroup.map(spelllist",{"_index":300,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spelli",{"_index":223,"title":{"interfaces/SpellI.html":{}},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"coverage.html":{}}}],["spelllevel",{"_index":171,"title":{},"body":{"components/AttackRollsComponent.html":{},"injectables/SpellsService.html":{}}}],["spelllist.filter(spell",{"_index":301,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spelllist.length",{"_index":304,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellname",{"_index":1012,"title":{},"body":{"injectables/SpellsService.html":{}}}],["spellresponse",{"_index":241,"title":{"interfaces/SpellResponse.html":{}},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["spellresponse.results",{"_index":978,"title":{},"body":{"injectables/SpellsService.html":{}}}],["spellresponseresults",{"_index":175,"title":{"interfaces/SpellResponseResults.html":{}},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["spells",{"_index":959,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["spells.service",{"_index":235,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spells.service.ts",{"_index":1187,"title":{},"body":{"index.html":{}}}],["spellsearchinput",{"_index":295,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellsearchinput?.name",{"_index":296,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellsgroups",{"_index":288,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellslist",{"_index":968,"title":{},"body":{"injectables/SpellsService.html":{}}}],["spellsservice",{"_index":139,"title":{"injectables/SpellsService.html":{}},"body":{"components/AttackRollsComponent.html":{},"injectables/SpellsService.html":{},"coverage.html":{}}}],["spellstring",{"_index":294,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["spellstring?.tolowercase",{"_index":297,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["src/.../app.config.ts",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../characterstats.ts",{"_index":1144,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../diceset.ts",{"_index":1143,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../mockspells.ts",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app.component.ts",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:24",{"_index":53,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":1085,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/attack",{"_index":108,"title":{},"body":{"components/AttackRollsComponent.html":{},"coverage.html":{}}}],["src/app/character",{"_index":345,"title":{},"body":{"components/CharacterSheetComponent.html":{},"coverage.html":{}}}],["src/app/characterstats.ts",{"_index":355,"title":{},"body":{"interfaces/CharacterStats.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/app/dice",{"_index":377,"title":{},"body":{"components/DiceBonusFormComponent.html":{},"coverage.html":{}}}],["src/app/diceset.ts",{"_index":460,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/app/diceset.ts:112",{"_index":531,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:41",{"_index":525,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:42",{"_index":526,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:43",{"_index":527,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:44",{"_index":522,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:45",{"_index":523,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:46",{"_index":524,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:47",{"_index":529,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:48",{"_index":530,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:49",{"_index":521,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:50",{"_index":520,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:51",{"_index":528,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:53",{"_index":532,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/diceset.ts:70",{"_index":518,"title":{},"body":{"classes/DiceSet.html":{}}}],["src/app/die",{"_index":544,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"coverage.html":{}}}],["src/app/dropdown.ts",{"_index":579,"title":{},"body":{"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"coverage.html":{}}}],["src/app/navbar/navbar.component.ts",{"_index":583,"title":{},"body":{"components/NavbarComponent.html":{},"coverage.html":{}}}],["src/app/navbar/navbar.component.ts:27",{"_index":590,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/navbar/navbar.component.ts:29",{"_index":596,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/not",{"_index":601,"title":{},"body":{"components/NotFoundComponent.html":{},"coverage.html":{}}}],["src/app/overlay/overlay.component.ts",{"_index":607,"title":{},"body":{"components/OverlayComponent.html":{},"coverage.html":{}}}],["src/app/overlay/overlay.component.ts:106",{"_index":617,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/overlay/overlay.component.ts:27",{"_index":636,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/overlay/overlay.component.ts:28",{"_index":634,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/overlay/overlay.component.ts:42",{"_index":638,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/overlay/overlay.component.ts:44",{"_index":761,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/skill",{"_index":789,"title":{},"body":{"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["src/app/spell.ts",{"_index":909,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"coverage.html":{}}}],["src/app/spell.ts:17",{"_index":923,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spell.ts:18",{"_index":924,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spell.ts:19",{"_index":922,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spell.ts:20",{"_index":920,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spell.ts:29",{"_index":926,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spell.ts:39",{"_index":928,"title":{},"body":{"classes/Spell.html":{}}}],["src/app/spells.service.ts",{"_index":954,"title":{},"body":{"injectables/SpellsService.html":{},"coverage.html":{}}}],["src/app/spells.service.ts:19",{"_index":998,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:20",{"_index":1001,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:21",{"_index":999,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:28",{"_index":973,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:39",{"_index":982,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:53",{"_index":985,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/spells.service.ts:82",{"_index":971,"title":{},"body":{"injectables/SpellsService.html":{}}}],["src/app/stepper/stepper.component.ts",{"_index":1024,"title":{},"body":{"components/StepperComponent.html":{},"coverage.html":{}}}],["src/app/stepper/stepper.component.ts:29",{"_index":1075,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:30",{"_index":1060,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:33",{"_index":1061,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:34",{"_index":1058,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:37",{"_index":1057,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:44",{"_index":1074,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:47",{"_index":1063,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:50",{"_index":1066,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:53",{"_index":1071,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/app/stepper/stepper.component.ts:60",{"_index":1068,"title":{},"body":{"components/StepperComponent.html":{}}}],["src/mocks/mockspells.ts",{"_index":1111,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["standalone",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["started",{"_index":1150,"title":{"index.html":{}},"body":{}}],["startwith",{"_index":238,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["state",{"_index":627,"title":{},"body":{"components/OverlayComponent.html":{}}}],["state.name",{"_index":777,"title":{},"body":{"components/OverlayComponent.html":{}}}],["statements",{"_index":1082,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":615,"title":{},"body":{"components/OverlayComponent.html":{}}}],["stepper",{"_index":104,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["stepper.component.html",{"_index":1046,"title":{},"body":{"components/StepperComponent.html":{}}}],["stepper.component.scss",{"_index":1047,"title":{},"body":{"components/StepperComponent.html":{}}}],["stepper.component.ts",{"_index":1200,"title":{},"body":{"index.html":{}}}],["stepper/stepper.component",{"_index":434,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["steppercomponent",{"_index":103,"title":{"components/StepperComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{},"coverage.html":{}}}],["store",{"_index":949,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["stored",{"_index":178,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["strength",{"_index":361,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["string",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"classes/DiceSet.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{}}}],["styleurl",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["styling",{"_index":1170,"title":{},"body":{"index.html":{}}}],["submit",{"_index":783,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["subscribe",{"_index":260,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["subscribed",{"_index":979,"title":{},"body":{"injectables/SpellsService.html":{}}}],["subsection",{"_index":1206,"title":{},"body":{"index.html":{}}}],["succeed",{"_index":793,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["success",{"_index":889,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["successelement",{"_index":864,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["successelement.innerhtml",{"_index":873,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["suceed",{"_index":1164,"title":{},"body":{"index.html":{}}}],["suceeeding",{"_index":1199,"title":{},"body":{"index.html":{}}}],["suite",{"_index":774,"title":{},"body":{"components/OverlayComponent.html":{}}}],["supposed",{"_index":489,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["switchmap",{"_index":239,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["switchmap(spellsearchinput",{"_index":293,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["symbol.iterator",{"_index":505,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["table",{"_index":547,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"coverage.html":{},"index.html":{}}}],["table'},{'name",{"_index":94,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["table.component",{"_index":250,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["table.component.html",{"_index":561,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["table.component.scss",{"_index":562,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["table.component.ts",{"_index":545,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"coverage.html":{},"index.html":{}}}],["table.component.ts:24",{"_index":567,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["table.component.ts:25",{"_index":566,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["table.component.ts:29",{"_index":570,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["table/die",{"_index":249,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/SkillCheckComponent.html":{},"coverage.html":{}}}],["tableinput",{"_index":193,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["tableref",{"_index":131,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["tablereusable",{"_index":1207,"title":{},"body":{"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1115,"title":{},"body":{"coverage.html":{}}}],["tailwindcss",{"_index":1169,"title":{},"body":{"index.html":{}}}],["target",{"_index":488,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/SkillCheckComponent.html":{}}}],["targetdc",{"_index":834,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["targetdcelement",{"_index":866,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["targetdcelement.innerhtml",{"_index":876,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["technologies",{"_index":1165,"title":{},"body":{"index.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["templateurl",{"_index":37,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["tennessee",{"_index":741,"title":{},"body":{"components/OverlayComponent.html":{}}}],["test",{"_index":961,"title":{},"body":{"injectables/SpellsService.html":{}}}],["testautocomplete",{"_index":209,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["testing",{"_index":1173,"title":{},"body":{"index.html":{}}}],["texas",{"_index":743,"title":{},"body":{"components/OverlayComponent.html":{}}}],["this.#tableref",{"_index":306,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["this.#tableref?.setinput('diceresults",{"_index":309,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["this.addobservabletoautocomplete",{"_index":331,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.addobservabletoleveldropdown",{"_index":332,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.attackrollsform.get('spell')!.valuechanges.pipe",{"_index":292,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.attackrollsform.get('spell')!.valuechanges.subscribe",{"_index":254,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.attackrollsform.get('spelllevel')!.valuechanges.subscribe",{"_index":278,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.attackrollsform.valuechanges.subscribe(value",{"_index":335,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.breakpointobserver.observe(breakpoints.handset",{"_index":591,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this.createtablecomponent",{"_index":879,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.createtablecomponent(dicerollresults",{"_index":878,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.currentspellrange",{"_index":263,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.currentspellrange[0",{"_index":267,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.d10",{"_index":510,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.d12",{"_index":511,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.d20",{"_index":512,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.d4",{"_index":507,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.d6",{"_index":508,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.d8",{"_index":509,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.damage",{"_index":935,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.damage[1",{"_index":941,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.damage[key]}\\n",{"_index":944,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.damage[parseint(key",{"_index":939,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.dicebonuscomponent.d10",{"_index":274,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicebonuscomponent.d12",{"_index":276,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicebonuscomponent.d4",{"_index":268,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicebonuscomponent.d6",{"_index":270,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicebonuscomponent.d8",{"_index":272,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicecalcservice.dicecalcresults(diceset",{"_index":327,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["this.dicecalcservice.maxroll(diceset).tostring",{"_index":325,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicecalcservice.minroll(diceset).tostring",{"_index":323,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.dicecalcservice.skillcheckcalc(diceset",{"_index":863,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.dicecalculations.defaultd20rollresults",{"_index":565,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["this.fb.group",{"_index":618,"title":{},"body":{"components/OverlayComponent.html":{}}}],["this.filteredgroupspelllist",{"_index":291,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.generatediceset",{"_index":315,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["this.generatetable(dicecalcresults",{"_index":328,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.generatetable(undefined",{"_index":334,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.http",{"_index":1008,"title":{},"body":{"injectables/SpellsService.html":{}}}],["this.http.get",{"_index":1004,"title":{},"body":{"injectables/SpellsService.html":{}}}],["this.keys",{"_index":506,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["this.level",{"_index":934,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.name",{"_index":932,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.parentcontainer.control",{"_index":436,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.addcontrol(this.controlkey",{"_index":453,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d10",{"_index":447,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d10')?.setvalue(dicenum",{"_index":449,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d12",{"_index":450,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d12')?.setvalue(dicenum",{"_index":452,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d4",{"_index":438,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d4')?.setvalue(dicenum",{"_index":440,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d6",{"_index":441,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d6')?.setvalue(dicenum",{"_index":443,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d8",{"_index":444,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.get(this.controlkey)?.get('d8')?.setvalue(dicenum",{"_index":446,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.parentformgroup.removecontrol(this.controlkey",{"_index":456,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["this.rawspelllist",{"_index":329,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell",{"_index":265,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell?.damage[levelnum].d10",{"_index":283,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell?.damage[levelnum].d12",{"_index":284,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell?.damage[levelnum].d4",{"_index":280,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell?.damage[levelnum].d6",{"_index":281,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.selectedspell?.damage[levelnum].d8",{"_index":282,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.setgroupedspelllist",{"_index":333,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.skillcheckform.value",{"_index":870,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.skillcheckform.value.advantage",{"_index":855,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.skillcheckform.value.attempts",{"_index":857,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.skillcheckform.value.targetdc",{"_index":853,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.skillcheckform.valuechanges.subscribe",{"_index":880,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.skillchecksubmit",{"_index":881,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["this.spellsservice.getallspells",{"_index":330,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.spellsservice.getspell(selectedvalueasstring",{"_index":259,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["this.updatevalue(this.value",{"_index":1078,"title":{},"body":{"components/StepperComponent.html":{}}}],["this.url",{"_index":933,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.url.href}/spells?level=${level",{"_index":1006,"title":{},"body":{"injectables/SpellsService.html":{}}}],["this.url.href}/spells?level=0&level=1&level=2&level=3&level=4&level=5&level=6",{"_index":1005,"title":{},"body":{"injectables/SpellsService.html":{}}}],["this.url.origin}${url",{"_index":1009,"title":{},"body":{"injectables/SpellsService.html":{}}}],["this.url}\\n",{"_index":943,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["this.value",{"_index":1077,"title":{},"body":{"components/StepperComponent.html":{}}}],["this.vcr()?.clear",{"_index":305,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["this.vcr()?.createcomponent(dierollresultstablecomponent",{"_index":307,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["times",{"_index":474,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["title",{"_index":43,"title":{},"body":{"components/AppComponent.html":{}}}],["tn",{"_index":742,"title":{},"body":{"components/OverlayComponent.html":{}}}],["together",{"_index":476,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["toggle",{"_index":841,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["tools",{"_index":1132,"title":{},"body":{"dependencies.html":{}}}],["tostring",{"_index":515,"title":{},"body":{"classes/DiceSet.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["total",{"_index":478,"title":{},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{}}}],["track",{"_index":340,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"miscellaneous/enumerations.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["true",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["try",{"_index":1020,"title":{},"body":{"injectables/SpellsService.html":{},"index.html":{}}}],["tslib",{"_index":1135,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":893,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["tx",{"_index":744,"title":{},"body":{"components/OverlayComponent.html":{}}}],["type",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"interfaces/CharacterStats.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type=\"number",{"_index":1202,"title":{},"body":{"index.html":{}}}],["typedoc",{"_index":1137,"title":{},"body":{"dependencies.html":{}}}],["typeof",{"_index":257,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["types",{"_index":1189,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":946,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{}}}],["ui",{"_index":550,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["undefined",{"_index":191,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["undefined=undefined",{"_index":859,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["understand",{"_index":1162,"title":{},"body":{"index.html":{}}}],["unit",{"_index":775,"title":{},"body":{"components/OverlayComponent.html":{}}}],["unknown",{"_index":1014,"title":{},"body":{"injectables/SpellsService.html":{}}}],["up",{"_index":181,"title":{},"body":{"components/AttackRollsComponent.html":{},"injectables/SpellsService.html":{}}}],["update",{"_index":169,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["updatevalue",{"_index":1055,"title":{},"body":{"components/StepperComponent.html":{}}}],["updatevalue(newvalue",{"_index":1070,"title":{},"body":{"components/StepperComponent.html":{}}}],["url",{"_index":916,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"miscellaneous/variables.html":{}}}],["url('https://www.dnd5eapi.co/api",{"_index":1000,"title":{},"body":{"injectables/SpellsService.html":{}}}],["use",{"_index":161,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["used",{"_index":201,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"injectables/SpellsService.html":{},"index.html":{}}}],["useexisting",{"_index":1041,"title":{},"body":{"components/StepperComponent.html":{}}}],["usefactory",{"_index":388,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["user",{"_index":114,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{}}}],["using",{"_index":548,"title":{},"body":{"components/DieRollResultsTableComponent.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"index.html":{}}}],["ut",{"_index":746,"title":{},"body":{"components/OverlayComponent.html":{}}}],["utah",{"_index":745,"title":{},"body":{"components/OverlayComponent.html":{}}}],["va",{"_index":752,"title":{},"body":{"components/OverlayComponent.html":{}}}],["validators",{"_index":763,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["validators.compose",{"_index":629,"title":{},"body":{"components/OverlayComponent.html":{}}}],["validators.maxlength(5",{"_index":631,"title":{},"body":{"components/OverlayComponent.html":{}}}],["validators.min(0",{"_index":835,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["validators.min(1",{"_index":838,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["validators.minlength(5",{"_index":630,"title":{},"body":{"components/OverlayComponent.html":{}}}],["validators.required",{"_index":622,"title":{},"body":{"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{}}}],["value",{"_index":48,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"components/DieRollResultsTableComponent.html":{},"interfaces/DropdownGroup.html":{},"interfaces/DropdownItem.html":{},"components/NavbarComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"injectables/SpellsService.html":{},"components/StepperComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":158,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"index.html":{}}}],["var",{"_index":78,"title":{},"body":{"components/AppComponent.html":{},"components/AttackRollsComponent.html":{},"components/CharacterSheetComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/DieRollResultsTableComponent.html":{},"components/NavbarComponent.html":{},"components/NotFoundComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"components/StepperComponent.html":{}}}],["variable",{"_index":200,"title":{},"body":{"components/AttackRollsComponent.html":{},"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"coverage.html":{}}}],["variables",{"_index":493,"title":{"miscellaneous/variables.html":{}},"body":{"interfaces/DiceResults.html":{},"classes/DiceSet.html":{},"interfaces/DiceSetI.html":{},"miscellaneous/variables.html":{}}}],["vcr",{"_index":140,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["vermont",{"_index":747,"title":{},"body":{"components/OverlayComponent.html":{}}}],["version",{"_index":910,"title":{},"body":{"classes/Spell.html":{},"interfaces/SpellI.html":{},"interfaces/SpellResponse.html":{},"interfaces/SpellResponseResults.html":{},"properties.html":{}}}],["vi",{"_index":750,"title":{},"body":{"components/OverlayComponent.html":{}}}],["video",{"_index":1209,"title":{},"body":{"index.html":{}}}],["viewchild",{"_index":233,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["viewchild('dieform",{"_index":216,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["viewchild('tablecontainer",{"_index":227,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["viewchildren",{"_index":234,"title":{},"body":{"components/AttackRollsComponent.html":{}}}],["viewcontainerref",{"_index":229,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/SkillCheckComponent.html":{}}}],["viewencapsulation",{"_index":55,"title":{},"body":{"components/AppComponent.html":{}}}],["viewproviders",{"_index":385,"title":{},"body":{"components/DiceBonusFormComponent.html":{}}}],["virgin",{"_index":749,"title":{},"body":{"components/OverlayComponent.html":{}}}],["virginia",{"_index":751,"title":{},"body":{"components/OverlayComponent.html":{}}}],["visually",{"_index":556,"title":{},"body":{"components/DieRollResultsTableComponent.html":{}}}],["void",{"_index":166,"title":{},"body":{"components/AttackRollsComponent.html":{},"components/DiceBonusFormComponent.html":{},"components/OverlayComponent.html":{},"components/SkillCheckComponent.html":{},"classes/Spell.html":{},"components/StepperComponent.html":{}}}],["vt",{"_index":748,"title":{},"body":{"components/OverlayComponent.html":{}}}],["wa",{"_index":754,"title":{},"body":{"components/OverlayComponent.html":{}}}],["want",{"_index":1031,"title":{},"body":{"components/StepperComponent.html":{}}}],["warlock",{"_index":375,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["washington",{"_index":753,"title":{},"body":{"components/OverlayComponent.html":{}}}],["webpage",{"_index":1151,"title":{},"body":{"index.html":{}}}],["website",{"_index":1167,"title":{},"body":{"index.html":{}}}],["west",{"_index":755,"title":{},"body":{"components/OverlayComponent.html":{}}}],["whether",{"_index":1145,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["wi",{"_index":758,"title":{},"body":{"components/OverlayComponent.html":{}}}],["wisconsin",{"_index":757,"title":{},"body":{"components/OverlayComponent.html":{}}}],["wisdom",{"_index":362,"title":{},"body":{"interfaces/CharacterStats.html":{}}}],["wizard",{"_index":376,"title":{},"body":{"interfaces/CharacterStats.html":{},"miscellaneous/enumerations.html":{}}}],["works",{"_index":351,"title":{},"body":{"components/CharacterSheetComponent.html":{}}}],["writevalue",{"_index":1056,"title":{},"body":{"components/StepperComponent.html":{}}}],["writevalue(value",{"_index":1073,"title":{},"body":{"components/StepperComponent.html":{}}}],["wv",{"_index":756,"title":{},"body":{"components/OverlayComponent.html":{}}}],["www.flaticon.com",{"_index":904,"title":{},"body":{"components/SkillCheckComponent.html":{}}}],["wy",{"_index":760,"title":{},"body":{"components/OverlayComponent.html":{}}}],["wyoming",{"_index":759,"title":{},"body":{"components/OverlayComponent.html":{}}}],["yes",{"_index":519,"title":{},"body":{"classes/DiceSet.html":{}}}],["york",{"_index":713,"title":{},"body":{"components/OverlayComponent.html":{}}}],["zone.js",{"_index":1139,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n    \n        Description\n    \n    \n        Home page component -- holds side navbar with links to components of other pages, and organizes router-outlet where the other components are shown\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                            RouterLink\n                            RouterModule\n                            MatSidenavModule\n                            MatToolbarModule\n                            MatButtonModule\n                            MatIconModule\n                            MatListModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'angular-bg3-cheats'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, ViewEncapsulation } from '@angular/core';\nimport { RouterLink,RouterModule, RouterOutlet } from '@angular/router';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\n\n/**\n * Home page component -- holds side navbar with links to components of other pages, and organizes router-outlet where the other components are shown\n */\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [\n    RouterOutlet, RouterLink,\n    RouterModule, MatSidenavModule,\n    MatToolbarModule, MatButtonModule, MatIconModule, MatListModule\n  ],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss'\n})\nexport class AppComponent {\n  title = 'angular-bg3-cheats';\n}\n\n    \n\n    \n         -->\n -->\n -->\n\n  \n    menu\n  \n  Dice Calculator\n\n\n  \n    \n      \n        Skill Check\n      \n      \n        Attack Rolls\n      \n      \n        Documentation\n      \n    \n  \n  \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ' --> --> -->      menu    Dice Calculator                    Skill Check                    Attack Rolls                    Documentation                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AttackRollsComponent.html":{"url":"components/AttackRollsComponent.html","title":"component - AttackRollsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AttackRollsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/attack-rolls/attack-rolls.component.ts\n\n\n\n    \n        Description\n    \n    \n        This is the component linked to with attack-rolls link in the navbar\nIt allows the user to search a spell and calculate the amount of damage that the spell can do\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-attack-rolls\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            MatInputModule\n                            ReactiveFormsModule\n                            MatSelectModule\n                            MatAutocompleteModule\n                            MatCardModule\n                                DiceBonusFormComponent\n                            MatButtonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./attack-rolls.component.html\n            \n\n\n\n            \n                styleUrl\n                ./attack-rolls.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                #tableRef\n                            \n                            \n                                attackRollsForm\n                            \n                            \n                                currentSpellRange\n                            \n                            \n                                    \n                                diceBonusComponent\n                            \n                            \n                                diceCalcService\n                            \n                            \n                                filteredGroupSpellList\n                            \n                            \n                                rawSpellList$\n                            \n                            \n                                selectedSpell\n                            \n                            \n                                spellsService\n                            \n                            \n                                vcr\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addObservableToAutocomplete\n                            \n                            \n                                addObservableToLevelDropdown\n                            \n                            \n                                attackRollsFormSubmit\n                            \n                            \n                                displaySpellAutocompleteValue\n                            \n                            \n                                generateDiceSet\n                            \n                            \n                                generateTable\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                setGroupedSpellList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:158\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addObservableToAutocomplete\n                        \n                    \n                \n            \n            \n                \naddObservableToAutocomplete()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:54\n                        \n                    \n\n\n            \n                \n                        initialize observable to autocomplete to change form values based on selected spell\n\nuse spell value to change currentSpellRange array (this changes values shown in level selector)\nuse spell value to change diceBonusComponent dice values\n\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addObservableToLevelDropdown\n                        \n                    \n                \n            \n            \n                \naddObservableToLevelDropdown()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:79\n                        \n                    \n\n\n            \n                \n                        The level dropdown observable will update the value of the dicerolls based on the spellLevel setting\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attackRollsFormSubmit\n                        \n                    \n                \n            \n            \n                \nattackRollsFormSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:146\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        displaySpellAutocompleteValue\n                        \n                    \n                \n            \n            \n                \ndisplaySpellAutocompleteValue(selectedValue: SpellResponseResults)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Converts the SpellResponseResults type that the autocomplete values\nare stored as into the spell names that they show up as\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selectedValue\n                                            \n                                                            SpellResponseResults\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    current selected spell value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                spell name or empty string\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateDiceSet\n                        \n                    \n                \n            \n            \n                \ngenerateDiceSet()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:139\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         DiceSetI\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateTable\n                        \n                    \n                \n            \n            \n                \ngenerateTable(tableInput: DiceResults[] | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tableInput\n                                            \n                                                            DiceResults[] | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:162\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setGroupedSpellList\n                        \n                    \n                \n            \n            \n                \nsetGroupedSpellList()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/attack-rolls/attack-rolls.component.ts:105\n                        \n                    \n\n\n            \n                \n                        Gets spell information from API to set filteredGroupSpellList variable that is used in spell autocomplete\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        #tableRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attackRollsForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    spell: new FormControl(''),\n    spellLevel: new FormControl(this.selectedSpell?.level || 1),\n    testAutocomplete: new FormControl(''),\n    hardCodedAutocomplete: new FormControl('')\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentSpellRange\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Default value : new Array(6)\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        diceBonusComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DiceBonusFormComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('dieForm')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        diceCalcService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DiceCalculationsService\n\n                    \n                \n                \n                    \n                        Default value : inject(DiceCalculationsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filteredGroupSpellList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rawSpellList$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedSpell\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellI | undefined\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        spellsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellsService\n\n                    \n                \n                \n                    \n                        Default value : inject(SpellsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        vcr\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('tableContainer', {read: ViewContainerRef})\n                    \n                \n                    \n                        \n                                Defined in src/app/attack-rolls/attack-rolls.component.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, ComponentRef, inject, OnInit, ViewChild, viewChild, viewChildren, ViewContainerRef } from '@angular/core';\nimport { SpellsService } from '../spells.service';\nimport { forkJoin, map, Observable, startWith, switchMap } from 'rxjs';\nimport { Spell, SpellI, SpellResponse, SpellResponseResults } from '../spell';\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { DiceBonusFormComponent } from '../dice-bonus-form/dice-bonus-form.component';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { DieRollResultsTableComponent } from '../die-roll-results-table/die-roll-results-table.component';\nimport { DiceResults, DiceSet, DiceSetI } from '../diceset';\nimport { DiceCalculationsService } from '../dice-calculations.service';\n\n/**\n * This is the component linked to with attack-rolls link in the navbar\n * It allows the user to search a spell and calculate the amount of damage that the spell can do\n */\n@Component({\n  selector: 'app-attack-rolls',\n  standalone: true,\n  imports: [\n    CommonModule, MatInputModule, ReactiveFormsModule,\n    MatSelectModule, MatAutocompleteModule, MatCardModule,\n    DiceBonusFormComponent, MatButtonModule\n],\n  templateUrl: './attack-rolls.component.html',\n  styleUrl: './attack-rolls.component.scss'\n})\nexport class AttackRollsComponent implements OnInit{\n  spellsService: SpellsService = inject(SpellsService);\n  diceCalcService: DiceCalculationsService = inject(DiceCalculationsService);\n  rawSpellList$!: Observable;\n  currentSpellRange: number[] = new Array(6);\n  selectedSpell: SpellI | undefined = undefined;\n  attackRollsForm = new FormGroup({\n    spell: new FormControl(''),\n    spellLevel: new FormControl(this.selectedSpell?.level || 1),\n    testAutocomplete: new FormControl(''),\n    hardCodedAutocomplete: new FormControl('')\n  });\n  filteredGroupSpellList!: Observable;\n  @ViewChild('dieForm') diceBonusComponent!: DiceBonusFormComponent;\n  vcr = viewChild('tableContainer', {read: ViewContainerRef});\n  #tableRef!: ComponentRef | undefined;\n\n  /**\n   * initialize observable to autocomplete to change form values based on selected spell\n   * 1. use spell value to change currentSpellRange array (this changes values shown in level selector)\n   * 2. use spell value to change diceBonusComponent dice values\n   */\n  addObservableToAutocomplete() {\n    this.attackRollsForm.get('spell')!.valueChanges.subscribe(\n      (selectedValue) => {\n        const selectedValueAsString = typeof selectedValue === 'string' ? '' : selectedValue?.url;\n        this.spellsService.getSpell(selectedValueAsString || '').subscribe(\n          (spell) => {\n            if(spell.level == 0) this.currentSpellRange = [0];\n            else this.currentSpellRange = [...Array(7).keys()].slice(spell.level);\n            this.selectedSpell = spell;\n\n            let minLevel = this.currentSpellRange[0];\n            this.diceBonusComponent.d4 = spell.damage[minLevel].d4 || 0;\n            this.diceBonusComponent.d6 = spell.damage[minLevel].d6 || 0;\n            this.diceBonusComponent.d8 = spell.damage[minLevel].d8 || 0;\n            this.diceBonusComponent.d10 = spell.damage[minLevel].d10 || 0;\n            this.diceBonusComponent.d12 = spell.damage[minLevel].d12 || 0;\n          }\n        )\n      }\n    )\n  }\n\n  /**\n   * The level dropdown observable will update the value of the dicerolls based on the spellLevel setting\n   */\n  addObservableToLevelDropdown() {\n    this.attackRollsForm.get('spellLevel')!.valueChanges.subscribe(\n      (levelNum) => {\n        levelNum = levelNum ?? this.currentSpellRange[0];\n        this.diceBonusComponent.d4 = this.selectedSpell?.damage[levelNum].d4 || 0;\n        this.diceBonusComponent.d6 = this.selectedSpell?.damage[levelNum].d6 || 0;\n        this.diceBonusComponent.d8 = this.selectedSpell?.damage[levelNum].d8 || 0;\n        this.diceBonusComponent.d10 = this.selectedSpell?.damage[levelNum].d10 || 0;\n        this.diceBonusComponent.d12 = this.selectedSpell?.damage[levelNum].d12 || 0;\n      }\n    )\n  }\n\n  /**\n   * Converts the SpellResponseResults type that the autocomplete values\n   * are stored as into the spell names that they show up as\n   * @param selectedValue current selected spell value\n   * @returns spell name or empty string\n   */\n  displaySpellAutocompleteValue(selectedValue: SpellResponseResults): string {\n    return selectedValue && selectedValue.name ? selectedValue.name : '';\n  }\n\n  /**\n   * Gets spell information from API to set filteredGroupSpellList variable that is used in spell autocomplete\n   */\n  setGroupedSpellList() {\n    let spellsGroups: Observable[] = [];\n    for(let i = 0; i  response.results)\n      ))\n    }\n    this.filteredGroupSpellList = this.attackRollsForm.get('spell')!.valueChanges.pipe(\n      startWith(''),\n      switchMap(spellSearchInput => {\n        let spellString = typeof spellSearchInput === 'string' ? spellSearchInput : spellSearchInput?.name;\n        // let spellString = spellSearchInput;\n        spellString = spellString?.toLowerCase() || '';\n        return forkJoin(spellsGroups).pipe(\n          map(spellGroup => \n            spellGroup.map(spellList => \n              spellList.filter(spell =>\n                spell.name.toLowerCase().startsWith(spellString || '')\n              )\n            ).filter(spellList => spellList.length > 0)\n          )\n        )\n      })\n    )\n  }\n\n  generateTable(tableInput: DiceResults[] | undefined) {\n    this.vcr()?.clear();\n    this.#tableRef = this.vcr()?.createComponent(DieRollResultsTableComponent);\n    if(tableInput) {\n      this.#tableRef?.setInput('diceResults', tableInput);\n    }\n  }\n\n  generateDiceSet(): DiceSetI {\n    let dieDict: DiceSetI = new DiceSet(JSON.parse(\n      JSON.stringify(this.attackRollsForm.value))['dieBonuses']);\n    console.log('submit received (attack-rolls)', dieDict);\n    return dieDict;\n  }\n\n  attackRollsFormSubmit() {\n    let diceSet = this.generateDiceSet();\n    // console.log('submit', diceSet);\n    let minElement = document.getElementById('damage-min');\n    let maxElement = document.getElementById('damage-max');\n    if(minElement && maxElement) {\n      minElement.innerText = this.diceCalcService.minRoll(diceSet).toString();\n      maxElement.innerText = this.diceCalcService.maxRoll(diceSet).toString();\n    }\n\n    let diceCalcResults = this.diceCalcService.diceCalcResults(diceSet);\n    this.generateTable(diceCalcResults);\n  }\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.rawSpellList$ = this.spellsService.getAllSpells();\n    this.addObservableToAutocomplete();\n    this.addObservableToLevelDropdown();\n    this.setGroupedSpellList();\n    // this.generateTable(undefined);\n    this.attackRollsForm.valueChanges.subscribe(value => \n      console.log('attack rolls form', value));\n  }\n\n}\n\n    \n\n    \n        \n  \n    \n      Damage Range:0-0\n    \n  \n  \n    \n      \n        \n          Spell\n          \n           -->\n          \n            @for(spellGroup of filteredGroupSpellList | async; track $index) {\n              \n                @for(spell of spellGroup; track $index) {\n                  {{spell.name}}\n                }\n              \n            }\n          \n        \n        \n          Level\n          \n            @for (level of currentSpellRange; track $index) {\n              {{level}}\n            }\n          \n        \n      \n      \n      \n        Calc!\n      \n    \n  \n\n\n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Damage Range:0-0                                    Spell                     -->                      @for(spellGroup of filteredGroupSpellList | async; track $index) {                              @for(spell of spellGroup; track $index) {                  {{spell.name}}                }                          }                                    Level                      @for (level of currentSpellRange; track $index) {              {{level}}            }                                            Calc!            '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AttackRollsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CharacterSheetComponent.html":{"url":"components/CharacterSheetComponent.html","title":"component - CharacterSheetComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CharacterSheetComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/character-sheet/character-sheet.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-character-sheet\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./character-sheet.component.html\n            \n\n\n\n            \n                styleUrl\n                ./character-sheet.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-character-sheet',\n  standalone: true,\n  imports: [],\n  templateUrl: './character-sheet.component.html',\n  styleUrl: './character-sheet.component.scss'\n})\nexport class CharacterSheetComponent {\n\n}\n\n    \n\n    \n        character-sheet works!\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'character-sheet works!'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CharacterSheetComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CharacterStats.html":{"url":"interfaces/CharacterStats.html","title":"interface - CharacterStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CharacterStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/characterstats.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            charisma\n                                        \n                                \n                                \n                                        \n                                            constitution\n                                        \n                                \n                                \n                                        \n                                            dexterity\n                                        \n                                \n                                \n                                        \n                                            intelligence\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            proficiency\n                                        \n                                \n                                \n                                        \n                                            strength\n                                        \n                                \n                                \n                                        \n                                            wisdom\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        charisma\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        charisma:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        constitution\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        constitution:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dexterity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dexterity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        intelligence\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        intelligence:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        proficiency\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        proficiency:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strength\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        strength:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wisdom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        wisdom:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CharacterStats {\n    strength: number,\n    dexterity: number,\n    constitution: number,\n    intelligence: number,\n    wisdom: number,\n    charisma: number,\n    proficiency: number,\n    level: number\n}\n\n\nexport enum CharacterClass {\n    Barbarian,\n    Bard,\n    Cleric,\n    Druid,\n    Fighter,\n    Monk,\n    Paladin,\n    Ranger,\n    Rogue,\n    Sorcerer,\n    Warlock,\n    Wizard\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DiceBonusFormComponent.html":{"url":"components/DiceBonusFormComponent.html","title":"component - DiceBonusFormComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DiceBonusFormComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/dice-bonus-form/dice-bonus-form.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component holds all the dice values that the user is able to set and edit.\nThis component is used on both skill check component and attack rolls component\nThe dice values are added to the form control automatically\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-dice-bonus-form\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            ReactiveFormsModule\n                                StepperComponent\n                            MatCardModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./dice-bonus-form.component.html\n            \n\n            \n                viewProviders\n                \n                    \n                            {\n    provide: ControlContainer, useFactory: () => inject(ControlContainer, { skipSelf: true })\n}\n                    \n                \n            \n\n\n            \n                styleUrl\n                ./dice-bonus-form.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                parentContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                controlKey\n                            \n                            \n                                label\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    parentFormGroup\n                                \n                                \n                                    d4\n                                \n                                \n                                    d6\n                                \n                                \n                                    d8\n                                \n                                \n                                    d10\n                                \n                                \n                                    d12\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        controlKey\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                        \n                            \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Bonus Dice'\n                    \n                \n                        \n                            \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:27\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:86\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:73\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        parentContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ControlContainer)\n                    \n                \n                    \n                        \n                                Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:25\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        parentFormGroup\n                    \n                \n\n                \n                    \n                        getparentFormGroup()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:29\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        d4\n                    \n                \n\n                \n                    \n                        getd4()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:33\n                                \n                            \n\n                \n                    \n                        setd4(diceNum: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:37\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            diceNum\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        d6\n                    \n                \n\n                \n                    \n                        getd6()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:41\n                                \n                            \n\n                \n                    \n                        setd6(diceNum: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:45\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            diceNum\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        d8\n                    \n                \n\n                \n                    \n                        getd8()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:49\n                                \n                            \n\n                \n                    \n                        setd8(diceNum: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:53\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            diceNum\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        d10\n                    \n                \n\n                \n                    \n                        getd10()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:57\n                                \n                            \n\n                \n                    \n                        setd10(diceNum: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:61\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            diceNum\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        d12\n                    \n                \n\n                \n                    \n                        getd12()\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:65\n                                \n                            \n\n                \n                    \n                        setd12(diceNum: number)\n                    \n                \n                            \n                                \n                                    Defined in src/app/dice-bonus-form/dice-bonus-form.component.ts:69\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            diceNum\n                                                    \n                                                            \n                                                                            number\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, inject, Input } from '@angular/core';\nimport { ControlContainer, FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\nimport { StepperComponent } from '../stepper/stepper.component';\nimport { MatCardModule } from '@angular/material/card';\n\n/**\n * This component holds all the dice values that the user is able to set and edit.\n * This component is used on both skill check component and attack rolls component\n * The dice values are added to the form control automatically\n */\n@Component({\n  selector: 'app-dice-bonus-form',\n  standalone: true,\n  viewProviders: [\n    {\n      provide: ControlContainer,\n      useFactory: () => inject(ControlContainer, {skipSelf: true})\n    }\n  ],\n  imports: [ReactiveFormsModule, StepperComponent, MatCardModule],\n  templateUrl: './dice-bonus-form.component.html',\n  styleUrl: './dice-bonus-form.component.scss'\n})\nexport class DiceBonusFormComponent {\n  parentContainer = inject(ControlContainer);\n  @Input({required: true}) controlKey = '';\n  @Input() label = 'Bonus Dice';\n\n  get parentFormGroup() {\n    return this.parentContainer.control as FormGroup;\n  }\n\n  public get d4(): FormControl {\n    return this.parentFormGroup.get(this.controlKey)?.get('d4') as FormControl\n  }\n\n  public set d4(diceNum: number) {\n    this.parentFormGroup.get(this.controlKey)?.get('d4')?.setValue(diceNum);\n  }\n\n  public get d6(): FormControl {\n    return this.parentFormGroup.get(this.controlKey)?.get('d6') as FormControl\n  }\n\n  public set d6(diceNum: number) {\n    this.parentFormGroup.get(this.controlKey)?.get('d6')?.setValue(diceNum);\n  }\n\n  public get d8(): FormControl {\n    return this.parentFormGroup.get(this.controlKey)?.get('d8') as FormControl\n  }\n\n  public set d8(diceNum: number) {\n    this.parentFormGroup.get(this.controlKey)?.get('d8')?.setValue(diceNum);\n  }\n  \n  public get d10(): FormControl {\n    return this.parentFormGroup.get(this.controlKey)?.get('d10') as FormControl\n  }\n\n  public set d10(diceNum: number) {\n    this.parentFormGroup.get(this.controlKey)?.get('d10')?.setValue(diceNum);\n  }\n  \n  public get d12(): FormControl {\n    return this.parentFormGroup.get(this.controlKey)?.get('d12') as FormControl\n  }\n\n  public set d12(diceNum: number) {\n    this.parentFormGroup.get(this.controlKey)?.get('d12')?.setValue(diceNum);\n  }\n\n  ngOnInit() {\n    this.parentFormGroup.addControl(this.controlKey,\n      new FormGroup({\n        d4: new FormControl(0),\n        d6: new FormControl(0),\n        d8: new FormControl(0),\n        d10: new FormControl(0),\n        d12: new FormControl(0),\n        modifier: new FormControl(0),\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.parentFormGroup.removeControl(this.controlKey);\n  }\n}\n\n    \n\n    \n        \n  {{label}}\n  \n  d4:\n  \n  \n  d6:\n  \n  \n  d8:\n  \n  \n  d10:\n  \n  \n  d12:\n  \n -->\n\n\n  \n    {{label}}\n    \n      \n       -->\n        &nbsp;d4:\n        \n        \n      \n      \n        &nbsp;d6:\n        \n        \n      \n      \n        &nbsp;d8:\n        \n        \n      \n      \n        d10:\n        \n        \n      \n      \n        d12:\n        \n        \n      \n      \n        modifier:\n        \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  {{label}}    d4:      d6:      d8:      d10:      d12:   -->      {{label}}                 -->         d4:                                     d6:                                     d8:                                    d10:                                    d12:                                    modifier:                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DiceBonusFormComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DiceResults.html":{"url":"interfaces/DiceResults.html","title":"interface - DiceResults","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DiceResults\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/diceset.ts\n        \n\n\n            \n                Description\n            \n            \n                This interface is a data type to hold the number generated from calculating the dice roll results.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cumPercentageResults\n                                        \n                                \n                                \n                                        \n                                            numResults\n                                        \n                                \n                                \n                                        \n                                            percentageResults\n                                        \n                                \n                                \n                                        \n                                            rollResult\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cumPercentageResults\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cumPercentageResults:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the percent chance when rolling a diceset that you would get a rollResult higher than or equal to the current rollResult\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        numResults\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        numResults:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the number of times adding the dice together resulted in the rollResult\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        percentageResults\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        percentageResults:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    number of rolls with rollResult / total number of rolls possible from all the diceRolls. Can also be described as the percentage when rolling a diceset, that you would get rollResult as the roll.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rollResult\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rollResult:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    the number created by adding together all the dice rolled in a DiceSetI\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface DiceSetI extends Iterable {\n    d4?: number;\n    d6?: number;\n    d8?: number;\n    d10?: number;\n    d12?: number;\n    d20?: number;\n    modifier: number;\n    /** Used in skill check dice calculations for the target value that the diceset is supposed to be equal */\n    target: number;\n    attempts: number;\n    advantage: Advantage;\n}\n\n/**\n * This interface is a data type to hold the number generated from calculating the dice roll results.\n */\nexport interface DiceResults {\n    /** the number created by adding together all the dice rolled in a DiceSetI */\n    rollResult: number;\n    /** the number of times adding the dice together resulted in the rollResult */\n    numResults: number;\n    /** number of rolls with rollResult / total number of rolls possible from all the diceRolls. Can also be described as the percentage when rolling a diceset, that you would get rollResult as the roll. */\n    percentageResults: number;\n    /** the percent chance when rolling a diceset that you would get a rollResult higher than or equal to the current rollResult */\n    cumPercentageResults: number;\n}\n\n/**\n * DiceSet data type implementation of DiceSetI\n * DiceSet class is used to set default values for variables in DiceSetI\n * DiceSet class is also used to implement iterator used in dice-calculations.serivce.ts\n */\nexport class DiceSet implements DiceSetI {\n    d4!: number;\n    d6!: number;\n    d8!: number;\n    d10!: number;\n    d12!: number;\n    d20!: number;\n    modifier: number = 0;\n    target: number = 0;\n    attempts: number = 1;\n    advantage: Advantage = Advantage.None;\n    private keys = [4, 6, 8, 10, 12, 20];\n\n    [Symbol.iterator](): Iterator {\n        let i = 0;\n        let keys = this.keys;\n        let values = [\n            this.d4 ?? 0, this.d6 ?? 0, this.d8 ?? 0, \n            this.d10 ?? 0, this.d12 ?? 0, this.d20 ?? 0\n        ]\n\n        return {\n            next() {\n                if (i \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DiceSet.html":{"url":"classes/DiceSet.html","title":"class - DiceSet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DiceSet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/diceset.ts\n        \n\n\n            \n                Description\n            \n            \n                DiceSet data type implementation of DiceSetI\nDiceSet class is used to set default values for variables in DiceSetI\nDiceSet class is also used to implement iterator used in dice-calculations.serivce.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                            DiceSetI\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                advantage\n                            \n                            \n                                attempts\n                            \n                            \n                                d10\n                            \n                            \n                                d12\n                            \n                            \n                                d20\n                            \n                            \n                                d4\n                            \n                            \n                                d6\n                            \n                            \n                                d8\n                            \n                            \n                                    Private\n                                keys\n                            \n                            \n                                modifier\n                            \n                            \n                                target\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toString\n                            \n                            \n                                \n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined, dicestring?: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/diceset.ts:70\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dicestring\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        advantage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Advantage\n\n                    \n                \n                \n                    \n                        Default value : Advantage.None\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attempts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d10\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d12\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d20\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d4\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d6\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        d8\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [4, 6, 8, 10, 12, 20]\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        modifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/diceset.ts:48\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/diceset.ts:112\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n            \n                \n()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/diceset.ts:53\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Iterator\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export interface DiceSetI extends Iterable {\n    d4?: number;\n    d6?: number;\n    d8?: number;\n    d10?: number;\n    d12?: number;\n    d20?: number;\n    modifier: number;\n    /** Used in skill check dice calculations for the target value that the diceset is supposed to be equal */\n    target: number;\n    attempts: number;\n    advantage: Advantage;\n}\n\n/**\n * This interface is a data type to hold the number generated from calculating the dice roll results.\n */\nexport interface DiceResults {\n    /** the number created by adding together all the dice rolled in a DiceSetI */\n    rollResult: number;\n    /** the number of times adding the dice together resulted in the rollResult */\n    numResults: number;\n    /** number of rolls with rollResult / total number of rolls possible from all the diceRolls. Can also be described as the percentage when rolling a diceset, that you would get rollResult as the roll. */\n    percentageResults: number;\n    /** the percent chance when rolling a diceset that you would get a rollResult higher than or equal to the current rollResult */\n    cumPercentageResults: number;\n}\n\n/**\n * DiceSet data type implementation of DiceSetI\n * DiceSet class is used to set default values for variables in DiceSetI\n * DiceSet class is also used to implement iterator used in dice-calculations.serivce.ts\n */\nexport class DiceSet implements DiceSetI {\n    d4!: number;\n    d6!: number;\n    d8!: number;\n    d10!: number;\n    d12!: number;\n    d20!: number;\n    modifier: number = 0;\n    target: number = 0;\n    attempts: number = 1;\n    advantage: Advantage = Advantage.None;\n    private keys = [4, 6, 8, 10, 12, 20];\n\n    [Symbol.iterator](): Iterator {\n        let i = 0;\n        let keys = this.keys;\n        let values = [\n            this.d4 ?? 0, this.d6 ?? 0, this.d8 ?? 0, \n            this.d10 ?? 0, this.d12 ?? 0, this.d20 ?? 0\n        ]\n\n        return {\n            next() {\n                if (i \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DiceSetI.html":{"url":"interfaces/DiceSetI.html","title":"interface - DiceSetI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DiceSetI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/diceset.ts\n        \n\n\n            \n                Description\n            \n            \n                This interface holds how many dice are rolled for each type of die\nIterable: returns arrays of all the dice values:\n[4, d4num], [6, d6num], [8, d8num], [10, d10num], [12, d12num], [20, d20num]\nThis data type is used in dice-calculations.service.ts where the dice information is used in different calculations.\n\n            \n\n            \n                Extends\n            \n            \n                        Iterable\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            advantage\n                                        \n                                \n                                \n                                        \n                                            attempts\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d10\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d12\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d20\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d4\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d6\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            d8\n                                        \n                                \n                                \n                                        \n                                            modifier\n                                        \n                                \n                                \n                                        \n                                            target\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        advantage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        advantage:         Advantage\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Advantage\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        attempts\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        attempts:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d10\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d10:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d12\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d12:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d20\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d20:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d4\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d4:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d6\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d6:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        d8\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        d8:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        modifier\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        modifier:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        target:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Used in skill check dice calculations for the target value that the diceset is supposed to be equal\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface DiceSetI extends Iterable {\n    d4?: number;\n    d6?: number;\n    d8?: number;\n    d10?: number;\n    d12?: number;\n    d20?: number;\n    modifier: number;\n    /** Used in skill check dice calculations for the target value that the diceset is supposed to be equal */\n    target: number;\n    attempts: number;\n    advantage: Advantage;\n}\n\n/**\n * This interface is a data type to hold the number generated from calculating the dice roll results.\n */\nexport interface DiceResults {\n    /** the number created by adding together all the dice rolled in a DiceSetI */\n    rollResult: number;\n    /** the number of times adding the dice together resulted in the rollResult */\n    numResults: number;\n    /** number of rolls with rollResult / total number of rolls possible from all the diceRolls. Can also be described as the percentage when rolling a diceset, that you would get rollResult as the roll. */\n    percentageResults: number;\n    /** the percent chance when rolling a diceset that you would get a rollResult higher than or equal to the current rollResult */\n    cumPercentageResults: number;\n}\n\n/**\n * DiceSet data type implementation of DiceSetI\n * DiceSet class is used to set default values for variables in DiceSetI\n * DiceSet class is also used to implement iterator used in dice-calculations.serivce.ts\n */\nexport class DiceSet implements DiceSetI {\n    d4!: number;\n    d6!: number;\n    d8!: number;\n    d10!: number;\n    d12!: number;\n    d20!: number;\n    modifier: number = 0;\n    target: number = 0;\n    attempts: number = 1;\n    advantage: Advantage = Advantage.None;\n    private keys = [4, 6, 8, 10, 12, 20];\n\n    [Symbol.iterator](): Iterator {\n        let i = 0;\n        let keys = this.keys;\n        let values = [\n            this.d4 ?? 0, this.d6 ?? 0, this.d8 ?? 0, \n            this.d10 ?? 0, this.d12 ?? 0, this.d20 ?? 0\n        ]\n\n        return {\n            next() {\n                if (i \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DieRollResultsTableComponent.html":{"url":"components/DieRollResultsTableComponent.html","title":"component - DieRollResultsTableComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DieRollResultsTableComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/die-roll-results-table/die-roll-results-table.component.ts\n\n\n\n    \n        Description\n    \n    \n        This creates a table using Material UI that organizes information from dice-calculations.service.ts.\nEach row of the table has the possible roll value from rolling the diceset,\nthe number of possible rolls that result in said roll value,\nthe percentage chance of rolling higher than that specific roll,\nthe percentage chance of rolling that specific roll,\nand a bar that represents how rolling that specific roll visually looks.\nThis component appears on both skill-check and attack-rolls forms.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-die-roll-results-table\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            MatTableModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./die-roll-results-table.component.html\n            \n\n\n\n            \n                styleUrl\n                ./die-roll-results-table.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                diceCalculations\n                            \n                            \n                                displayedColumns\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                diceResults\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        diceResults\n                    \n                \n                \n                    \n                        Type :         DiceResults[]\n\n                    \n                \n                \n                    \n                        Default value : this.diceCalculations.defaultD20RollResults()\n                    \n                \n                        \n                            \n                                    Defined in src/app/die-roll-results-table/die-roll-results-table.component.ts:25\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        diceCalculations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DiceCalculationsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/die-roll-results-table/die-roll-results-table.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        displayedColumns\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    'roll-result', 'num-result', 'percentage-cum-result', 'percentage-result'\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/die-roll-results-table/die-roll-results-table.component.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject, Input } from '@angular/core';\nimport { MatTableModule } from '@angular/material/table';\nimport { DiceResults } from '../diceset';\nimport { CommonModule } from '@angular/common';\nimport { DiceCalculationsService } from '../dice-calculations.service';\n\n/**\n * This creates a table using Material UI that organizes information from dice-calculations.service.ts.\n * Each row of the table has the possible roll value from rolling the diceset,\n * the number of possible rolls that result in said roll value,\n * the percentage chance of rolling higher than that specific roll,\n * the percentage chance of rolling that specific roll,\n * and a bar that represents how rolling that specific roll visually looks.\n * This component appears on both skill-check and attack-rolls forms.\n */\n@Component({\n  selector: 'app-die-roll-results-table',\n  standalone: true,\n  imports: [CommonModule, MatTableModule],\n  templateUrl: './die-roll-results-table.component.html',\n  styleUrl: './die-roll-results-table.component.scss'\n})\nexport class DieRollResultsTableComponent {\n  diceCalculations = inject(DiceCalculationsService);\n  @Input() diceResults: DiceResults[] = this.diceCalculations.defaultD20RollResults();\n  // displayedColumns = [\n  //   'roll-result', 'num-result', 'percentage-result', 'percentage-block'\n  // ];\n  displayedColumns = [\n    'roll-result', 'num-result', 'percentage-cum-result', 'percentage-result'\n  ];\n}\n\n    \n\n    \n        \n  \n    Roll\n    {{element.rollResult}}\n  \n  \n    #\n    {{element.numResults}}\n  \n  \n    % cum\n    \n      {{element.cumPercentageResults}}%\n    \n  \n  \n    %\n    \n      {{element.percentageResults}}%\n      \n      \n        &nbsp;\n      \n    \n  \n  \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Roll    {{element.rollResult}}        #    {{element.numResults}}        % cum          {{element.cumPercentageResults}}%            %          {{element.percentageResults}}%                                     '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DieRollResultsTableComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropdownGroup.html":{"url":"interfaces/DropdownGroup.html","title":"interface - DropdownGroup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DropdownGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/dropdown.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            group\n                                        \n                                \n                                \n                                        \n                                            groupName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        group\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        group:         DropdownItem[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DropdownItem[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        groupName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        groupName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface DropdownGroup {\n    groupName: string;\n    group: DropdownItem[];\n}\nexport interface DropdownItem {\n    label: string;\n    value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropdownItem.html":{"url":"interfaces/DropdownItem.html","title":"interface - DropdownItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DropdownItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/dropdown.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface DropdownGroup {\n    groupName: string;\n    group: DropdownItem[];\n}\nexport interface DropdownItem {\n    label: string;\n    value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavbarComponent.html":{"url":"components/NavbarComponent.html","title":"component - NavbarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NavbarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/navbar/navbar.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-navbar\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatToolbarModule\n                            MatButtonModule\n                            MatSidenavModule\n                            MatListModule\n                            MatIconModule\n                            AsyncPipe\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./navbar.component.html\n            \n\n\n\n            \n                styleUrl\n                ./navbar.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                breakpointObserver\n                            \n                            \n                                isHandset$\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        breakpointObserver\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(BreakpointObserver)\n                    \n                \n                    \n                        \n                                Defined in src/app/navbar/navbar.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isHandset$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    )\n                    \n                \n                    \n                        \n                                Defined in src/app/navbar/navbar.component.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { AsyncPipe } from '@angular/common';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrl: './navbar.component.scss',\n  standalone: true,\n  imports: [\n    MatToolbarModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatListModule,\n    MatIconModule,\n    AsyncPipe,\n  ]\n})\nexport class NavbarComponent {\n  private breakpointObserver = inject(BreakpointObserver);\n\n  isHandset$: Observable = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    );\n}\n\n    \n\n    \n        \n  \n    Menu\n    \n      Link 1\n      Link 2\n      Link 3\n    \n  \n  \n    \n      @if (isHandset$ | async) {\n        \n          menu\n        \n      }\n      angular-bg3-cheats\n    \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Menu          Link 1      Link 2      Link 3                  @if (isHandset$ | async) {                  menu              }      angular-bg3-cheats          '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NavbarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NotFoundComponent.html":{"url":"components/NotFoundComponent.html","title":"component - NotFoundComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NotFoundComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/not-found/not-found.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-not-found\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./not-found.component.html\n            \n\n\n\n            \n                styleUrl\n                ./not-found.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  standalone: true,\n  imports: [],\n  templateUrl: './not-found.component.html',\n  styleUrl: './not-found.component.scss'\n})\nexport class NotFoundComponent {\n\n}\n\n    \n\n    \n        page not found\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'page not found'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NotFoundComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OverlayComponent.html":{"url":"components/OverlayComponent.html","title":"component - OverlayComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  OverlayComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/overlay/overlay.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-overlay\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            MatInputModule\n                            MatButtonModule\n                            MatSelectModule\n                            MatRadioModule\n                            MatCardModule\n                            ReactiveFormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./overlay.component.html\n            \n\n\n\n            \n                styleUrl\n                ./overlay.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                addressForm\n                            \n                            \n                                    Private\n                                fb\n                            \n                            \n                                hasUnitNumber\n                            \n                            \n                                states\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/overlay/overlay.component.ts:106\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        addressForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.fb.group({\n    company: null,\n    firstName: [null, Validators.required],\n    lastName: [null, Validators.required],\n    address: [null, Validators.required],\n    address2: null,\n    city: [null, Validators.required],\n    state: [null, Validators.required],\n    postalCode: [null, Validators.compose([\n      Validators.required, Validators.minLength(5), Validators.maxLength(5)])\n    ],\n    shipping: ['free', Validators.required]\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/overlay/overlay.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        fb\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(FormBuilder)\n                    \n                \n                    \n                        \n                                Defined in src/app/overlay/overlay.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasUnitNumber\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/overlay/overlay.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        states\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {name: 'Alabama', abbreviation: 'AL'},\n    {name: 'Alaska', abbreviation: 'AK'},\n    {name: 'American Samoa', abbreviation: 'AS'},\n    {name: 'Arizona', abbreviation: 'AZ'},\n    {name: 'Arkansas', abbreviation: 'AR'},\n    {name: 'California', abbreviation: 'CA'},\n    {name: 'Colorado', abbreviation: 'CO'},\n    {name: 'Connecticut', abbreviation: 'CT'},\n    {name: 'Delaware', abbreviation: 'DE'},\n    {name: 'District Of Columbia', abbreviation: 'DC'},\n    {name: 'Federated States Of Micronesia', abbreviation: 'FM'},\n    {name: 'Florida', abbreviation: 'FL'},\n    {name: 'Georgia', abbreviation: 'GA'},\n    {name: 'Guam', abbreviation: 'GU'},\n    {name: 'Hawaii', abbreviation: 'HI'},\n    {name: 'Idaho', abbreviation: 'ID'},\n    {name: 'Illinois', abbreviation: 'IL'},\n    {name: 'Indiana', abbreviation: 'IN'},\n    {name: 'Iowa', abbreviation: 'IA'},\n    {name: 'Kansas', abbreviation: 'KS'},\n    {name: 'Kentucky', abbreviation: 'KY'},\n    {name: 'Louisiana', abbreviation: 'LA'},\n    {name: 'Maine', abbreviation: 'ME'},\n    {name: 'Marshall Islands', abbreviation: 'MH'},\n    {name: 'Maryland', abbreviation: 'MD'},\n    {name: 'Massachusetts', abbreviation: 'MA'},\n    {name: 'Michigan', abbreviation: 'MI'},\n    {name: 'Minnesota', abbreviation: 'MN'},\n    {name: 'Mississippi', abbreviation: 'MS'},\n    {name: 'Missouri', abbreviation: 'MO'},\n    {name: 'Montana', abbreviation: 'MT'},\n    {name: 'Nebraska', abbreviation: 'NE'},\n    {name: 'Nevada', abbreviation: 'NV'},\n    {name: 'New Hampshire', abbreviation: 'NH'},\n    {name: 'New Jersey', abbreviation: 'NJ'},\n    {name: 'New Mexico', abbreviation: 'NM'},\n    {name: 'New York', abbreviation: 'NY'},\n    {name: 'North Carolina', abbreviation: 'NC'},\n    {name: 'North Dakota', abbreviation: 'ND'},\n    {name: 'Northern Mariana Islands', abbreviation: 'MP'},\n    {name: 'Ohio', abbreviation: 'OH'},\n    {name: 'Oklahoma', abbreviation: 'OK'},\n    {name: 'Oregon', abbreviation: 'OR'},\n    {name: 'Palau', abbreviation: 'PW'},\n    {name: 'Pennsylvania', abbreviation: 'PA'},\n    {name: 'Puerto Rico', abbreviation: 'PR'},\n    {name: 'Rhode Island', abbreviation: 'RI'},\n    {name: 'South Carolina', abbreviation: 'SC'},\n    {name: 'South Dakota', abbreviation: 'SD'},\n    {name: 'Tennessee', abbreviation: 'TN'},\n    {name: 'Texas', abbreviation: 'TX'},\n    {name: 'Utah', abbreviation: 'UT'},\n    {name: 'Vermont', abbreviation: 'VT'},\n    {name: 'Virgin Islands', abbreviation: 'VI'},\n    {name: 'Virginia', abbreviation: 'VA'},\n    {name: 'Washington', abbreviation: 'WA'},\n    {name: 'West Virginia', abbreviation: 'WV'},\n    {name: 'Wisconsin', abbreviation: 'WI'},\n    {name: 'Wyoming', abbreviation: 'WY'}\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/overlay/overlay.component.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\n\nimport { ReactiveFormsModule, FormBuilder, Validators } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatCardModule } from '@angular/material/card';\n\n\n@Component({\n  selector: 'app-overlay',\n  templateUrl: './overlay.component.html',\n  styleUrl: './overlay.component.scss',\n  standalone: true,\n  imports: [\n    MatInputModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatCardModule,\n    ReactiveFormsModule\n  ]\n})\nexport class OverlayComponent {\n  private fb = inject(FormBuilder);\n  addressForm = this.fb.group({\n    company: null,\n    firstName: [null, Validators.required],\n    lastName: [null, Validators.required],\n    address: [null, Validators.required],\n    address2: null,\n    city: [null, Validators.required],\n    state: [null, Validators.required],\n    postalCode: [null, Validators.compose([\n      Validators.required, Validators.minLength(5), Validators.maxLength(5)])\n    ],\n    shipping: ['free', Validators.required]\n  });\n\n  hasUnitNumber = false;\n\n  states = [\n    {name: 'Alabama', abbreviation: 'AL'},\n    {name: 'Alaska', abbreviation: 'AK'},\n    {name: 'American Samoa', abbreviation: 'AS'},\n    {name: 'Arizona', abbreviation: 'AZ'},\n    {name: 'Arkansas', abbreviation: 'AR'},\n    {name: 'California', abbreviation: 'CA'},\n    {name: 'Colorado', abbreviation: 'CO'},\n    {name: 'Connecticut', abbreviation: 'CT'},\n    {name: 'Delaware', abbreviation: 'DE'},\n    {name: 'District Of Columbia', abbreviation: 'DC'},\n    {name: 'Federated States Of Micronesia', abbreviation: 'FM'},\n    {name: 'Florida', abbreviation: 'FL'},\n    {name: 'Georgia', abbreviation: 'GA'},\n    {name: 'Guam', abbreviation: 'GU'},\n    {name: 'Hawaii', abbreviation: 'HI'},\n    {name: 'Idaho', abbreviation: 'ID'},\n    {name: 'Illinois', abbreviation: 'IL'},\n    {name: 'Indiana', abbreviation: 'IN'},\n    {name: 'Iowa', abbreviation: 'IA'},\n    {name: 'Kansas', abbreviation: 'KS'},\n    {name: 'Kentucky', abbreviation: 'KY'},\n    {name: 'Louisiana', abbreviation: 'LA'},\n    {name: 'Maine', abbreviation: 'ME'},\n    {name: 'Marshall Islands', abbreviation: 'MH'},\n    {name: 'Maryland', abbreviation: 'MD'},\n    {name: 'Massachusetts', abbreviation: 'MA'},\n    {name: 'Michigan', abbreviation: 'MI'},\n    {name: 'Minnesota', abbreviation: 'MN'},\n    {name: 'Mississippi', abbreviation: 'MS'},\n    {name: 'Missouri', abbreviation: 'MO'},\n    {name: 'Montana', abbreviation: 'MT'},\n    {name: 'Nebraska', abbreviation: 'NE'},\n    {name: 'Nevada', abbreviation: 'NV'},\n    {name: 'New Hampshire', abbreviation: 'NH'},\n    {name: 'New Jersey', abbreviation: 'NJ'},\n    {name: 'New Mexico', abbreviation: 'NM'},\n    {name: 'New York', abbreviation: 'NY'},\n    {name: 'North Carolina', abbreviation: 'NC'},\n    {name: 'North Dakota', abbreviation: 'ND'},\n    {name: 'Northern Mariana Islands', abbreviation: 'MP'},\n    {name: 'Ohio', abbreviation: 'OH'},\n    {name: 'Oklahoma', abbreviation: 'OK'},\n    {name: 'Oregon', abbreviation: 'OR'},\n    {name: 'Palau', abbreviation: 'PW'},\n    {name: 'Pennsylvania', abbreviation: 'PA'},\n    {name: 'Puerto Rico', abbreviation: 'PR'},\n    {name: 'Rhode Island', abbreviation: 'RI'},\n    {name: 'South Carolina', abbreviation: 'SC'},\n    {name: 'South Dakota', abbreviation: 'SD'},\n    {name: 'Tennessee', abbreviation: 'TN'},\n    {name: 'Texas', abbreviation: 'TX'},\n    {name: 'Utah', abbreviation: 'UT'},\n    {name: 'Vermont', abbreviation: 'VT'},\n    {name: 'Virgin Islands', abbreviation: 'VI'},\n    {name: 'Virginia', abbreviation: 'VA'},\n    {name: 'Washington', abbreviation: 'WA'},\n    {name: 'West Virginia', abbreviation: 'WV'},\n    {name: 'Wisconsin', abbreviation: 'WI'},\n    {name: 'Wyoming', abbreviation: 'WY'}\n  ];\n\n  onSubmit(): void {\n    alert('Thanks!');\n  }\n}\n\n    \n\n    \n        \n\n  \n    \n      Shipping Information\n    \n    \n      \n        \n          \n            \n          \n        \n      \n      \n        \n          \n            \n            @if (addressForm.controls['firstName'].hasError('required')) {\n              First name is required\n            }\n          \n        \n        \n          \n            \n            @if (addressForm.controls['lastName'].hasError('required')) {\n              Last name is required\n            }\n          \n        \n      \n      \n        \n          \n            \n            @if (addressForm.controls['address'].hasError('required')) {\n              Address is required\n            }\n          \n        \n      \n      \n        \n          @if (hasUnitNumber) {\n            \n              \n            \n          } @else {\n            \n              + Add C/O, Apt, Suite, Unit\n            \n          }\n        \n      \n      \n        \n          \n            \n            @if (addressForm.controls['city'].hasError('required')) {\n              City is required\n            }\n          \n        \n        \n          \n            \n              @for (state of states; track state) {\n                {{ state.name }}\n              }\n            \n            @if (addressForm.controls['state'].hasError('required')) {\n              State is required\n            }\n          \n        \n      \n      \n        \n          \n            \n            {{postalCode.value.length}} / 5\n          \n        \n      \n      \n        \n          \n            Free Shipping\n            Priority Shipping\n            Next Day Shipping\n          \n        \n      \n    \n    \n      Submit\n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Shipping Information                                                                                                                    @if (addressForm.controls[\\'firstName\\'].hasError(\\'required\\')) {              First name is required            }                                                            @if (addressForm.controls[\\'lastName\\'].hasError(\\'required\\')) {              Last name is required            }                                                                        @if (addressForm.controls[\\'address\\'].hasError(\\'required\\')) {              Address is required            }                                                @if (hasUnitNumber) {                                                } @else {                          + Add C/O, Apt, Suite, Unit                      }                                                              @if (addressForm.controls[\\'city\\'].hasError(\\'required\\')) {              City is required            }                                                              @for (state of states; track state) {                {{ state.name }}              }                        @if (addressForm.controls[\\'state\\'].hasError(\\'required\\')) {              State is required            }                                                                        {{postalCode.value.length}} / 5                                                            Free Shipping            Priority Shipping            Next Day Shipping                                      Submit      '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'OverlayComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SkillCheckComponent.html":{"url":"components/SkillCheckComponent.html","title":"component - SkillCheckComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SkillCheckComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/skill-check/skill-check.component.ts\n\n\n\n    \n        Description\n    \n    \n        This component allows for the checking of how likely a skill check is to succeed.\nIt generates a frontend to display results from dice calculations, and a form for the user to input their dice calc information\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-skill-check\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            ReactiveFormsModule\n                            CommonModule\n                            MatCardModule\n                            MatSelectModule\n                                DiceBonusFormComponent\n                            MatButtonModule\n                            MatButtonToggleModule\n                            MatInputModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./skill-check.component.html\n            \n\n\n\n            \n                styleUrl\n                ./skill-check.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                #tableRef\n                            \n                            \n                                advantageAdvantage\n                            \n                            \n                                advantageDisadvantage\n                            \n                            \n                                advantageEnum\n                            \n                            \n                                advantageNone\n                            \n                            \n                                advantageOptions\n                            \n                            \n                                attemptsOptions\n                            \n                            \n                                diceCalcService\n                            \n                            \n                                dieBonusForm\n                            \n                            \n                                skillCheckForm\n                            \n                            \n                                vcr\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTableComponent\n                            \n                            \n                                generateDiceSet\n                            \n                            \n                                isAdvantageNone\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                skillCheckSubmit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/skill-check/skill-check.component.ts:110\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createTableComponent\n                        \n                    \n                \n            \n            \n                \ncreateTableComponent(tableInput: DiceResults[] | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/skill-check/skill-check.component.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                tableInput\n                                            \n                                                            DiceResults[] | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    undefined\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateDiceSet\n                        \n                    \n                \n            \n            \n                \ngenerateDiceSet()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/skill-check/skill-check.component.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         DiceSetI\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isAdvantageNone\n                        \n                    \n                \n            \n            \n                \nisAdvantageNone(currentAdvantageValue: Advantage)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/skill-check/skill-check.component.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                currentAdvantageValue\n                                            \n                                                            Advantage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/skill-check/skill-check.component.ts:105\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skillCheckSubmit\n                        \n                    \n                \n            \n            \n                \nskillCheckSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/skill-check/skill-check.component.ts:88\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        #tableRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        advantageAdvantage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Advantage.Advantage\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        advantageDisadvantage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Advantage.Disadvantage\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        advantageEnum\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Advantage\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        advantageNone\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Advantage.None\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        advantageOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {id: 1, name: 'None', value: Advantage.None},\n    {id: 2, name: 'Advantage', value: Advantage.Advantage},\n    {id: 3, name: 'Disadvantage', value: Advantage.Disadvantage},\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attemptsOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [1, 2, 3, 4]\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        diceCalcService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DiceCalculationsService\n\n                    \n                \n                \n                    \n                        Default value : inject(DiceCalculationsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dieBonusForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    ' d4': new FormControl(0),\n    ' d6': new FormControl(0),\n    ' d8': new FormControl(0),\n    'd10': new FormControl(0),\n    'd12': new FormControl(0),\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skillCheckForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    targetDC: new FormControl(0, [\n      Validators.required,\n      Validators.min(0)\n    ]),\n    advantage: new FormControl(Advantage.None),\n    attempts: new FormControl(1, [\n      Validators.required,\n      Validators.min(1)\n    ])\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        vcr\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('tableContainer', {read: ViewContainerRef})\n                    \n                \n                    \n                        \n                                Defined in src/app/skill-check/skill-check.component.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, ComponentRef, inject, OnInit, viewChild, ViewContainerRef } from '@angular/core';\nimport { FormControl, ReactiveFormsModule, FormGroup, Validators } from '@angular/forms';\nimport { DiceSet, DiceSetI, Advantage, DiceResults } from '../diceset';\nimport { DiceCalculationsService } from '../dice-calculations.service';\nimport { DiceBonusFormComponent } from '../dice-bonus-form/dice-bonus-form.component';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle'\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { DieRollResultsTableComponent } from '../die-roll-results-table/die-roll-results-table.component';\n\n/**\n * This component allows for the checking of how likely a skill check is to succeed.\n * It generates a frontend to display results from dice calculations, and a form for the user to input their dice calc information\n */\n@Component({\n  selector: 'app-skill-check',\n  standalone: true,\n  imports: [\n    ReactiveFormsModule, CommonModule, MatCardModule, MatSelectModule,\n    DiceBonusFormComponent, MatButtonModule,\n    MatButtonToggleModule, MatInputModule\n  ],\n  templateUrl: './skill-check.component.html',\n  styleUrl: './skill-check.component.scss'\n})\nexport class SkillCheckComponent implements OnInit {\n  diceCalcService: DiceCalculationsService = inject(DiceCalculationsService);\n  vcr = viewChild('tableContainer', {read: ViewContainerRef});\n  #tableRef!: ComponentRef | undefined;\n  skillCheckForm = new FormGroup({\n    targetDC: new FormControl(0, [\n      Validators.required,\n      Validators.min(0)\n    ]),\n    advantage: new FormControl(Advantage.None),\n    attempts: new FormControl(1, [\n      Validators.required,\n      Validators.min(1)\n    ])\n  });\n  dieBonusForm = new FormGroup({\n    ' d4': new FormControl(0),\n    ' d6': new FormControl(0),\n    ' d8': new FormControl(0),\n    'd10': new FormControl(0),\n    'd12': new FormControl(0),\n  });\n  // diceSet!: DiceSet;\n  advantageEnum: typeof Advantage = Advantage;\n  advantageNone = Advantage.None;\n  advantageAdvantage = Advantage.Advantage\n  advantageDisadvantage = Advantage.Disadvantage;\n  advantageOptions = [\n    {id: 1, name: 'None', value: Advantage.None},\n    {id: 2, name: 'Advantage', value: Advantage.Advantage},\n    {id: 3, name: 'Disadvantage', value: Advantage.Disadvantage},\n  ];\n  attemptsOptions = [1, 2, 3, 4];\n\n  isAdvantageNone(currentAdvantageValue: Advantage) {\n    return currentAdvantageValue === Advantage.None;\n  }\n\n  generateDiceSet(): DiceSetI {\n    let dieDict = JSON.parse(\n      JSON.stringify(this.skillCheckForm.value))['dieBonuses'];\n    // previous line converts diebonuses form group into dict,\n    // this allows easy construction of new DiceSet once other parameters are set\n    dieDict['d20'] = 1;\n    dieDict['target'] = this.skillCheckForm.value.targetDC ?? 0;\n    dieDict['advantage'] = this.skillCheckForm.value.advantage ?? Advantage.None;\n    dieDict['attempts'] = this.skillCheckForm.value.attempts ?? 1;\n    return new DiceSet(dieDict);\n  }\n\n  createTableComponent(tableInput: DiceResults[] | undefined=undefined) {\n    this.vcr()?.clear();\n    this.#tableRef = this.vcr()?.createComponent(DieRollResultsTableComponent);\n    if(tableInput) {\n      console.log('table recreated');\n      this.#tableRef?.setInput('diceResults', tableInput);\n    }\n  }\n\n  skillCheckSubmit() {\n    let diceset = this.generateDiceSet();\n    let skillCheckSuccessChance = this.diceCalcService.skillCheckCalc(diceset);\n    let successElement = document.getElementById('success-chance');\n    let targetDCElement = document.getElementById('target-dc-value');\n    let diceRollResults = this.diceCalcService.diceCalcResults(diceset);\n    console.log('skill check submit', this.skillCheckForm.value);\n    if(successElement !== null) {\n      console.log(skillCheckSuccessChance);\n      successElement.innerHTML = (skillCheckSuccessChance).toString();\n    }\n    if(targetDCElement !== null) {\n      targetDCElement.innerHTML = diceset.target.toString();\n    }\n    this.createTableComponent(diceRollResults);\n  }\n\n  ngOnInit(): void {\n    this.createTableComponent();\n    this.skillCheckForm.valueChanges.subscribe(\n      () => this.skillCheckSubmit()\n    );\n  }\n\n  constructor() {}\n}\n\n    \n\n    \n        \n  \n    \n      95% chance to succeed with target DC 0\n    \n    \n      Note: 100% and 0% are impossible since regardless of DC, a natural 20 is an automatic success, and a natural 1 is an automatic fail. Percentages are rounded to two decimals.\n    \n  \n  \n    \n      \n        \n          Target DC\n          \n        \n      \n      \n        \n        @for (option of advantageOptions; track option.id) {\n          @if (option.value == '0') {\n            \n              {{option.name}}\n            \n          } @else {\n            \n              {{option.name}}\n            \n          }\n        }\n        \n      \n      \n        \n          Attempts\n          \n            @for(item of attemptsOptions; track $index) {\n              {{item}}\n            }\n          \n        \n      \n    \n    \n    \n      Calc!\n    \n  \n\n\n\n\n\n  Icons made by Freepik from www.flaticon.com\n  Icons made by Pixel perfect from\n    www.flaticon.com\n  Icons made by Nadiinko from www.flaticon.com\n  Icons made by Flowicon from www.flaticon.com\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            95% chance to succeed with target DC 0              Note: 100% and 0% are impossible since regardless of DC, a natural 20 is an automatic success, and a natural 1 is an automatic fail. Percentages are rounded to two decimals.                                    Target DC                                              @for (option of advantageOptions; track option.id) {          @if (option.value == \\'0\\') {                          {{option.name}}                      } @else {                          {{option.name}}                      }        }                                      Attempts                      @for(item of attemptsOptions; track $index) {              {{item}}            }                                          Calc!        Icons made by Freepik from www.flaticon.com  Icons made by Pixel perfect from    www.flaticon.com  Icons made by Nadiinko from www.flaticon.com  Icons made by Flowicon from www.flaticon.com'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SkillCheckComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Spell.html":{"url":"classes/Spell.html","title":"class - Spell","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Spell\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/spell.ts\n        \n\n\n            \n                Description\n            \n            \n                The data type version of SpellI, which has additional functions to allow easier setting of values from DnD API\n\n            \n\n\n            \n                Implements\n            \n            \n                            SpellI\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                damage\n                            \n                            \n                                level\n                            \n                            \n                                name\n                            \n                            \n                                url\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setDamageFromAPI\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, url: string, level: number, damage: object)\n                    \n                \n                        \n                            \n                                Defined in src/app/spell.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        level\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        damage\n                                                  \n                                                        \n                                                                        object\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        damage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/app/spell.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/spell.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/spell.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/spell.ts:18\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setDamageFromAPI\n                        \n                    \n                \n            \n            \n                \nsetDamageFromAPI(response: literal type, modifier: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/spell.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                modifier\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/spell.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DiceSetI, DiceSet } from \"./diceset\";\n\n/**\n * Interface used to hold all necessary information about each spell\n */\nexport interface SpellI {\n    name: string\n    url: string\n    level: number\n    damage: { [level: number]: DiceSetI }\n}\n\n/**\n * The data type version of SpellI, which has additional functions to allow easier setting of values from DnD API\n */\nexport class Spell implements SpellI {\n    name: string;\n    url: string;\n    level: number;\n    damage: { [level: number]: DiceSetI; };\n    \n    constructor(name='', url='', level=1, damage={0: new DiceSet({})}) {\n        this.name = name;\n        this.url = url;\n        this.level = level;\n        this.damage = damage;\n    }\n\n    setDamageFromAPI(response: {[level: string]: string}, modifier: number) {\n        for(let key in response) {\n            console.log('damage from api', parseInt(key), response);\n            this.damage[parseInt(key)] = new DiceSet(\n                {modifier: modifier}, response[key]\n            );\n            console.log('damage variable', this.damage[1]);\n        }\n    }\n\n    toString(): string {\n        let retString = `name: ${this.name}, url: ${this.url}\\n`;\n        retString += `damage: `\n        for(let key in this.damage) {\n            retString += `{${key}: ${this.damage[key]}\\n`\n        }\n        return retString;\n    }\n\n}\n\n/**\n * data type generated from: https://transform.tools/json-to-typescript\n * Based on response from https://www.dnd5eapi.co/api/spells\n */\nexport interface SpellResponse {\n    count: number\n    results: SpellResponseResults[]\n}\n\n/**\n * Used to store individual information about each spell returned as a result from https://www.dnd5eapi.co/api/spells\n * data type generated from: https://transform.tools/json-to-typescript\n */\nexport interface SpellResponseResults {\n    index: string\n    name: string\n    level: number\n    url: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpellI.html":{"url":"interfaces/SpellI.html","title":"interface - SpellI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpellI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/spell.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface used to hold all necessary information about each spell\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            damage\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        damage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        damage:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DiceSetI, DiceSet } from \"./diceset\";\n\n/**\n * Interface used to hold all necessary information about each spell\n */\nexport interface SpellI {\n    name: string\n    url: string\n    level: number\n    damage: { [level: number]: DiceSetI }\n}\n\n/**\n * The data type version of SpellI, which has additional functions to allow easier setting of values from DnD API\n */\nexport class Spell implements SpellI {\n    name: string;\n    url: string;\n    level: number;\n    damage: { [level: number]: DiceSetI; };\n    \n    constructor(name='', url='', level=1, damage={0: new DiceSet({})}) {\n        this.name = name;\n        this.url = url;\n        this.level = level;\n        this.damage = damage;\n    }\n\n    setDamageFromAPI(response: {[level: string]: string}, modifier: number) {\n        for(let key in response) {\n            console.log('damage from api', parseInt(key), response);\n            this.damage[parseInt(key)] = new DiceSet(\n                {modifier: modifier}, response[key]\n            );\n            console.log('damage variable', this.damage[1]);\n        }\n    }\n\n    toString(): string {\n        let retString = `name: ${this.name}, url: ${this.url}\\n`;\n        retString += `damage: `\n        for(let key in this.damage) {\n            retString += `{${key}: ${this.damage[key]}\\n`\n        }\n        return retString;\n    }\n\n}\n\n/**\n * data type generated from: https://transform.tools/json-to-typescript\n * Based on response from https://www.dnd5eapi.co/api/spells\n */\nexport interface SpellResponse {\n    count: number\n    results: SpellResponseResults[]\n}\n\n/**\n * Used to store individual information about each spell returned as a result from https://www.dnd5eapi.co/api/spells\n * data type generated from: https://transform.tools/json-to-typescript\n */\nexport interface SpellResponseResults {\n    index: string\n    name: string\n    level: number\n    url: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpellResponse.html":{"url":"interfaces/SpellResponse.html","title":"interface - SpellResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpellResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/spell.ts\n        \n\n\n            \n                Description\n            \n            \n                data type generated from: https://transform.tools/json-to-typescript\nBased on response from https://www.dnd5eapi.co/api/spells\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            results\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        results\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        results:         SpellResponseResults[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SpellResponseResults[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DiceSetI, DiceSet } from \"./diceset\";\n\n/**\n * Interface used to hold all necessary information about each spell\n */\nexport interface SpellI {\n    name: string\n    url: string\n    level: number\n    damage: { [level: number]: DiceSetI }\n}\n\n/**\n * The data type version of SpellI, which has additional functions to allow easier setting of values from DnD API\n */\nexport class Spell implements SpellI {\n    name: string;\n    url: string;\n    level: number;\n    damage: { [level: number]: DiceSetI; };\n    \n    constructor(name='', url='', level=1, damage={0: new DiceSet({})}) {\n        this.name = name;\n        this.url = url;\n        this.level = level;\n        this.damage = damage;\n    }\n\n    setDamageFromAPI(response: {[level: string]: string}, modifier: number) {\n        for(let key in response) {\n            console.log('damage from api', parseInt(key), response);\n            this.damage[parseInt(key)] = new DiceSet(\n                {modifier: modifier}, response[key]\n            );\n            console.log('damage variable', this.damage[1]);\n        }\n    }\n\n    toString(): string {\n        let retString = `name: ${this.name}, url: ${this.url}\\n`;\n        retString += `damage: `\n        for(let key in this.damage) {\n            retString += `{${key}: ${this.damage[key]}\\n`\n        }\n        return retString;\n    }\n\n}\n\n/**\n * data type generated from: https://transform.tools/json-to-typescript\n * Based on response from https://www.dnd5eapi.co/api/spells\n */\nexport interface SpellResponse {\n    count: number\n    results: SpellResponseResults[]\n}\n\n/**\n * Used to store individual information about each spell returned as a result from https://www.dnd5eapi.co/api/spells\n * data type generated from: https://transform.tools/json-to-typescript\n */\nexport interface SpellResponseResults {\n    index: string\n    name: string\n    level: number\n    url: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpellResponseResults.html":{"url":"interfaces/SpellResponseResults.html","title":"interface - SpellResponseResults","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpellResponseResults\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/spell.ts\n        \n\n\n            \n                Description\n            \n            \n                Used to store individual information about each spell returned as a result from https://www.dnd5eapi.co/api/spells\ndata type generated from: https://transform.tools/json-to-typescript\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            index\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        index\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        index:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { DiceSetI, DiceSet } from \"./diceset\";\n\n/**\n * Interface used to hold all necessary information about each spell\n */\nexport interface SpellI {\n    name: string\n    url: string\n    level: number\n    damage: { [level: number]: DiceSetI }\n}\n\n/**\n * The data type version of SpellI, which has additional functions to allow easier setting of values from DnD API\n */\nexport class Spell implements SpellI {\n    name: string;\n    url: string;\n    level: number;\n    damage: { [level: number]: DiceSetI; };\n    \n    constructor(name='', url='', level=1, damage={0: new DiceSet({})}) {\n        this.name = name;\n        this.url = url;\n        this.level = level;\n        this.damage = damage;\n    }\n\n    setDamageFromAPI(response: {[level: string]: string}, modifier: number) {\n        for(let key in response) {\n            console.log('damage from api', parseInt(key), response);\n            this.damage[parseInt(key)] = new DiceSet(\n                {modifier: modifier}, response[key]\n            );\n            console.log('damage variable', this.damage[1]);\n        }\n    }\n\n    toString(): string {\n        let retString = `name: ${this.name}, url: ${this.url}\\n`;\n        retString += `damage: `\n        for(let key in this.damage) {\n            retString += `{${key}: ${this.damage[key]}\\n`\n        }\n        return retString;\n    }\n\n}\n\n/**\n * data type generated from: https://transform.tools/json-to-typescript\n * Based on response from https://www.dnd5eapi.co/api/spells\n */\nexport interface SpellResponse {\n    count: number\n    results: SpellResponseResults[]\n}\n\n/**\n * Used to store individual information about each spell returned as a result from https://www.dnd5eapi.co/api/spells\n * data type generated from: https://transform.tools/json-to-typescript\n */\nexport interface SpellResponseResults {\n    index: string\n    name: string\n    level: number\n    url: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SpellsService.html":{"url":"injectables/SpellsService.html","title":"injectable - SpellsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SpellsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/spells.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This service is for http calls to get a list of all the dnd spells\napi used: https://www.dnd5eapi.co/api\napi used to test: https://jsonplaceholder.typicode.com/\nMain functions: getAllSpellsOfLevel, getAllSpells, getSpell\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                http\n                            \n                            \n                                    Protected\n                                spellsList\n                            \n                            \n                                url\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllSpells\n                            \n                            \n                                getAllSpellsOfLevel\n                            \n                            \n                                getSpell\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/spells.service.ts:82\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                injection\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllSpells\n                        \n                    \n                \n            \n            \n                \ngetAllSpells()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/spells.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Makes call to dnd5eapi to get spell list\nThe return value is a SpellResponse type which contains a list of the spells in SpellResponse.results\n\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable that when subscribed to will get all the spells in dnd up to 6th level\nThe return value is a SpellResponse type which contains a list of the spells in SpellResponse.results\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllSpellsOfLevel\n                        \n                    \n                \n            \n            \n                \ngetAllSpellsOfLevel(level: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/spells.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                level\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    spell level to filter spells\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable that when subscribed to will get a list of all spells of said level\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSpell\n                        \n                    \n                \n            \n            \n                \ngetSpell(url: string, modifier: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/spells.service.ts:53\n                        \n                    \n\n\n            \n                \n                        This function creates a SpellI by making an API request given a specific url.\nDnD API returns a specific url with each spell name when searching all spells that contains additional information about the spell.\nThis function makes a separate API call using that new url, and attempts to create a SpellI data type using the info from the API request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    url from SpellResponseResults type\n\n                                            \n                                        \n                                        \n                                                modifier\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    0\n                                            \n\n                                            \n                                                    In order to properly set spell damage, the spell modifier needs to be set based on what the user had inputted\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable that when subscribed to will give a Spell data type that holds all necessary information about the spell\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        http\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpClient\n\n                    \n                \n                    \n                        \n                                Defined in src/app/spells.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        spellsList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellI[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/spells.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new URL('https://www.dnd5eapi.co/api')\n                    \n                \n                    \n                        \n                                Defined in src/app/spells.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { SpellI, SpellResponse, Spell } from './spell';\nimport { map, Observable } from 'rxjs';\n\n/**\n * This service is for http calls to get a list of all the dnd spells\n * \n * api used: https://www.dnd5eapi.co/api\n * api used to test: https://jsonplaceholder.typicode.com/\n * \n * Main functions: getAllSpellsOfLevel, getAllSpells, getSpell\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SpellsService {\n\n  http!: HttpClient;\n  url = new URL('https://www.dnd5eapi.co/api');\n  protected spellsList: SpellI[] = [];\n\n  /**\n   * Makes call to dnd5eapi to get spell list\n   * @returns Observable that when subscribed to will get all the spells in dnd up to 6th level\n   * The return value is a SpellResponse type which contains a list of the spells in SpellResponse.results\n   */\n  getAllSpells(): Observable {\n    return this.http.get(\n      `${this.url.href}/spells?level=0&level=1&level=2&level=3&level=4&level=5&level=6`,\n      );\n  }\n\n  /**\n   * \n   * @param level spell level to filter spells\n   * @returns Observable that when subscribed to will get a list of all spells of said level\n   */\n  getAllSpellsOfLevel(level: number): Observable {\n    return this.http.get(\n      `${this.url.href}/spells?level=${level}`,\n      );\n  }\n\n  /**\n   * This function creates a SpellI by making an API request given a specific url.\n   * DnD API returns a specific url with each spell name when searching all spells that contains additional information about the spell.\n   * This function makes a separate API call using that new url, and attempts to create a SpellI data type using the info from the API request\n   * @param url url from SpellResponseResults type\n   * @param modifier In order to properly set spell damage, the spell modifier needs to be set based on what the user had inputted\n   * @returns Observable that when subscribed to will give a Spell data type that holds all necessary information about the spell\n   */\n  getSpell(url: string, modifier=0): Observable {\n    return this.http.\n      get(\n        `${this.url.origin}${url}`\n      ).pipe(map((response) => {\n        console.log('pipe response', response)\n        let spellName: string = response['name'] as unknown as string;\n        let spellLevel: number = response['level'] as unknown as number;\n        let spell = new Spell(spellName, url, spellLevel);\n        if(spellLevel == 0) {\n          spell.setDamageFromAPI(\n            {'0': response['damage']['damage_at_character_level']['1']},\n            modifier\n          )\n        } else {\n          try {\n            spell.setDamageFromAPI(\n              response['damage']['damage_at_slot_level'], \n              modifier\n            );\n          } catch(e) {\n            spell.setDamageFromAPI(\n              response['heal_at_slot_level'] as unknown as {[level: string]: string}, modifier\n            )\n          }\n        }\n        return spell;\n    }));\n  }\n\n  /**\n   * \n   * @param http injection\n   */\n  constructor(http: HttpClient) { \n    this.http = http;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/StepperComponent.html":{"url":"components/StepperComponent.html","title":"component - StepperComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  StepperComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/stepper/stepper.component.ts\n\n\n\n    \n        Description\n    \n    \n        https://v5.material.angular.io/guide/creating-a-custom-form-field-control\nguide here in case I want to change my mind and just make one using angular\nhttps://www.youtube.com/watch?v=xTcJQaWiJ2c&list=PLw5h0DiJ-9PDF6TTr0J7HmKK_7t6XTPuN https://flowbite.com/docs/forms/number-input/\n\n    \n\n\n    \n        Implements\n    \n    \n                ControlValueAccessor\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                {\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => StepperComponent), multi: true,\n}\n                \n            \n\n\n            \n                selector\n                app-stepper\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            FormsModule\n                            MatButtonModule\n                            MatIconModule\n                            MatFormFieldModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./stepper.component.html\n            \n\n\n\n            \n                styleUrl\n                ./stepper.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                decrement\n                            \n                            \n                                increment\n                            \n                            \n                                onChange\n                            \n                            \n                                onTouch\n                            \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                    Optional\n                                setDisabledState\n                            \n                            \n                                updateValue\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        decrement\n                        \n                    \n                \n            \n            \n                \ndecrement()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        increment\n                        \n                    \n                \n            \n            \n                \nincrement()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onChange\n                        \n                    \n                \n            \n            \n                \nonChange(value: number | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        number | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onTouch\n                        \n                    \n                \n            \n            \n                \nonTouch()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerOnChange\n                        \n                    \n                \n            \n            \n                \nregisterOnChange(fn: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerOnTouched\n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(fn: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        setDisabledState\n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                isDisabled\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateValue\n                        \n                    \n                \n            \n            \n                \nupdateValue(newValue: number | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newValue\n                                            \n                                                        number | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        writeValue\n                        \n                    \n                \n            \n            \n                \nwriteValue(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/stepper/stepper.component.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/stepper/stepper.component.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\n\n/**\n * https://v5.material.angular.io/guide/creating-a-custom-form-field-control\n * guide here in case I want to change my mind and just make one using angular\n * https://www.youtube.com/watch?v=xTcJQaWiJ2c&list=PLw5h0DiJ-9PDF6TTr0J7HmKK_7t6XTPuN  StepperComponent),\n      multi: true,\n    }\n  ],\n  templateUrl: './stepper.component.html',\n  styleUrl: './stepper.component.scss'\n})\nexport class StepperComponent implements ControlValueAccessor {\n  value: number | null = 0;\n  onChange(value: number | null) {\n    this.value = value;\n  }\n  onTouch() {}\n  increment() {\n    this.updateValue(this.value !== null ? this.value + 1 : 1);\n  }\n  decrement() {\n    if (this.value ?? 0 >= 1) {\n      this.updateValue(this.value != null ? this.value - 1 : 0);\n    } else if (this.value ?? 1 \n    \n\n    \n        \n\n  -\n  \n  +\n -->\n\n\n\n  \n    remove\n  \n  \n  \n    add\n  \n -->\n\n\n\n  \n    -\n     -->\n  \n  \n  \n    +\n     -->\n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  -    + -->      remove          add   -->      -     -->          +     -->  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'AttackRollsComponent', 'selector': 'app-attack-rolls'},{'name': 'CharacterSheetComponent', 'selector': 'app-character-sheet'},{'name': 'DiceBonusFormComponent', 'selector': 'app-dice-bonus-form'},{'name': 'DieRollResultsTableComponent', 'selector': 'app-die-roll-results-table'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'NotFoundComponent', 'selector': 'app-not-found'},{'name': 'OverlayComponent', 'selector': 'app-overlay'},{'name': 'SkillCheckComponent', 'selector': 'app-skill-check'},{'name': 'StepperComponent', 'selector': 'app-stepper'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'StepperComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/attack-rolls/attack-rolls.component.ts\n            \n            component\n            AttackRollsComponent\n            \n                25 %\n                (5/20)\n            \n        \n        \n            \n                \n                src/app/character-sheet/character-sheet.component.ts\n            \n            component\n            CharacterSheetComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/characterstats.ts\n            \n            interface\n            CharacterStats\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/dice-bonus-form/dice-bonus-form.component.ts\n            \n            component\n            DiceBonusFormComponent\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/dice-calculations.service.ts\n            \n            injectable\n            DiceCalculationsService\n            \n                81 %\n                (18/22)\n            \n        \n        \n            \n                \n                src/app/diceset.ts\n            \n            class\n            DiceSet\n            \n                6 %\n                (1/15)\n            \n        \n        \n            \n                \n                src/app/diceset.ts\n            \n            interface\n            DiceResults\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/diceset.ts\n            \n            interface\n            DiceSetI\n            \n                18 %\n                (2/11)\n            \n        \n        \n            \n                \n                src/app/die-roll-results-table/die-roll-results-table.component.ts\n            \n            component\n            DieRollResultsTableComponent\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/dropdown.ts\n            \n            interface\n            DropdownGroup\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/dropdown.ts\n            \n            interface\n            DropdownItem\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/navbar/navbar.component.ts\n            \n            component\n            NavbarComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/not-found/not-found.component.ts\n            \n            component\n            NotFoundComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/overlay/overlay.component.ts\n            \n            component\n            OverlayComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/skill-check/skill-check.component.ts\n            \n            component\n            SkillCheckComponent\n            \n                5 %\n                (1/18)\n            \n        \n        \n            \n                \n                src/app/spell.ts\n            \n            class\n            Spell\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/app/spell.ts\n            \n            interface\n            SpellI\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/spell.ts\n            \n            interface\n            SpellResponse\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/spell.ts\n            \n            interface\n            SpellResponseResults\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/spells.service.ts\n            \n            injectable\n            SpellsService\n            \n                37 %\n                (3/8)\n            \n        \n        \n            \n                \n                src/app/stepper/stepper.component.ts\n            \n            component\n            StepperComponent\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                        src/mocks/mockSpells.ts\n            \n            variable\n            mockSpellResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/mocks/mockSpells.ts\n            \n            variable\n            mockSpellResult0\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/mocks/mockSpells.ts\n            \n            variable\n            mockSpellResult1\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^18.2.4\n        \n            @angular/common : ^18.2.4\n        \n            @angular/compiler : ^18.2.4\n        \n            @angular/core : ^18.2.4\n        \n            @angular/fire : ^18.0.1\n        \n            @angular/forms : ^18.2.4\n        \n            @angular/material : ^18.2.13\n        \n            @angular/platform-browser : ^18.2.4\n        \n            @angular/platform-browser-dynamic : ^18.2.4\n        \n            @angular/router : ^18.2.4\n        \n            @npmcli/package-json : ^5.2.0\n        \n            firebase-tools : ^13.25.0\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            typedoc : ^0.26.11\n        \n            zone.js : ~0.14.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Advantage   (src/.../diceset.ts)\n                        \n                        \n                            CharacterClass   (src/.../characterstats.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/diceset.ts\n    \n        \n            \n                \n                    \n                        \n                        Advantage\n                    \n                \n                    \n                        \n                            Enum to track whether to calculate skill check possibility with advantage, disadvantage, or no just a flat roll\n\n                        \n                    \n                        \n                            \n                                 None\n                            \n                        \n                        \n                            \n                                Value : 0\n                            \n                        \n                        \n                            \n                                 Advantage\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 Disadvantage\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n                        \n                            \n                                 SavageAttacker\n                            \n                        \n                        \n                            \n                                Value : 3\n                            \n                        \n            \n        \n\n    src/app/characterstats.ts\n    \n        \n            \n                \n                    \n                        \n                        CharacterClass\n                    \n                \n                        \n                            \n                                 Barbarian\n                            \n                        \n                        \n                            \n                                 Bard\n                            \n                        \n                        \n                            \n                                 Cleric\n                            \n                        \n                        \n                            \n                                 Druid\n                            \n                        \n                        \n                            \n                                 Fighter\n                            \n                        \n                        \n                            \n                                 Monk\n                            \n                        \n                        \n                            \n                                 Paladin\n                            \n                        \n                        \n                            \n                                 Ranger\n                            \n                        \n                        \n                            \n                                 Rogue\n                            \n                        \n                        \n                            \n                                 Sorcerer\n                            \n                        \n                        \n                            \n                                 Warlock\n                            \n                        \n                        \n                            \n                                 Wizard\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDice Calculator\nWebpage found here: https://test-00-c77de.web.app/\nThis webpage is designed to show all possible values that could result in rolling certain amounts of dice.\nThis makes it easier to determine what the likelihood of each decision would be when playing dnd,\nand properly understand how likely an action is to suceed when you try it in dnd.\nTechnologies Used\nAngular is used to build website. API calls are made to https://www.dnd5eapi.co/ to get the list of all spells in dnd.\nTailwindCSS and Material are used for styling components, and organizing the layout.\nTesting is done with Karma.\nDocumentation is built with compodoc, and deployed to github pages using github actions. Local testing of github actions was using act by nektos.\nDeployment is handled by firebase.\nPages\nServices\n\ndice-calculations.service.ts -- This holds all the functions used in dice calculations\nspells.service.ts -- This holds all the functions used to access DnD API to get spell information\n\nData Types\n\nspell.ts -- This holds all the data types used to organize data gotten from API\ndiceset.ts -- This holds all the data types used to organize data related to dice rolls\nCheck skillCheckCalc function on diceset details main algorithm used to calculate dice rolls\n\n\n\nComponents\n\nskill-check.component.ts -- Skill Check PageIt contains frontend for calculating likelihood of skill check suceeeding.\nattack-rolls.component.ts -- Attack Rolls PageIt contains frontend for calculating spell damage and likelihood.\nstepper.component.ts -- Dice inputModified form input (type=\"number\", but with + and - buttons on the sides)\ndice-bonus-form.component.ts -- Dice FormReusable form subsection that holds dice values that can be added to calculations\ndie-roll-results-table.component.ts -- Roll TableReusable form table that is dynamically added to dice calculations pages\n\nVideo Resources Used\n\nDeploy to Firebase\nGithub Pages Deploy\nCustom form component (used in stepper.component.ts)\nReusable angular forms (used in dice-bonus-form.component)\nDynamic components (used to implement die-roll-results-table)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    10 Components\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            mockSpellResponse   (src/.../mockSpells.ts)\n                        \n                        \n                            mockSpellResult0   (src/.../mockSpells.ts)\n                        \n                        \n                            mockSpellResult1   (src/.../mockSpells.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideRouter(routes), provideAnimationsAsync(), provideHttpClient(), provideFirebaseApp(() => initializeApp({\"projectId\":\"test-00-c77de\",\"appId\":\"1:864287131419:web:4b60183cca62591db7b5be\",\"storageBucket\":\"test-00-c77de.firebasestorage.app\",\"apiKey\":\"AIzaSyDP4kd1doMBPfOSirbE7I6DYLjMbbNbTAY\",\"authDomain\":\"test-00-c77de.firebaseapp.com\",\"messagingSenderId\":\"864287131419\"})), provideAuth(() => getAuth()), provideFirebaseApp(() => initializeApp({\"projectId\":\"test-00-c77de\",\"appId\":\"1:864287131419:web:4b60183cca62591db7b5be\",\"storageBucket\":\"test-00-c77de.firebasestorage.app\",\"apiKey\":\"AIzaSyDP4kd1doMBPfOSirbE7I6DYLjMbbNbTAY\",\"authDomain\":\"test-00-c77de.firebaseapp.com\",\"messagingSenderId\":\"864287131419\"})), provideAuth(() => getAuth())\n  ]\n}\n                    \n                \n\n\n        \n    \n\n    src/mocks/mockSpells.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockSpellResponse\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellResponse\n\n                    \n                \n                \n                    \n                        Default value : {\n    count: 1,\n    results: [mockSpellResult0, mockSpellResult1]\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mockSpellResult0\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellResponseResults\n\n                    \n                \n                \n                    \n                        Default value : {\n    index: '0',\n    name: 'cantrip',\n    level: 0,\n    url: '/api/spells/cantrip'\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mockSpellResult1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SpellResponseResults\n\n                    \n                \n                \n                    \n                        Default value : {\n    index: '1',\n    name: 'level 1',\n    level: 1,\n    url: '/api/spells/level-1'\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
